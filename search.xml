<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[mysql事务未提交引发的阻塞]]></title>
      <url>http://riverdba.github.io/2017/07/13/mysql-transcation-uncommitted/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：重现mysql事务未提交导致的阻塞<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>zabbix的表history_str的数据总行数为680：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@zabbix 10:24:26&gt;select count(*) from history_str;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">|      680 |</div><div class="line">+----------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>通过这个表模拟会话1执行一个事务很快就完成了但是未提交，会话2对该表进行update操作就会被阻塞。</p>
<h3 id="会话1"><a href="#会话1" class="headerlink" title="会话1"></a>会话1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@zabbix 10:24:26&gt;begin;</div><div class="line">root@zabbix 10:24:26&gt;select * from history_str for update;</div></pre></td></tr></table></figure>
<p>会话1上对该表开启一个事务，并执行一个操作，对表的每一行都加X锁。也就是说相当于对该表加了表锁。<br>由于表只有几百条数据，查询很快就完成了。但是该事务一直未提交。</p>
<h3 id="会话2"><a href="#会话2" class="headerlink" title="会话2"></a>会话2</h3><p>这时另一个会话对该表的某一条记录进行更新操作，就遇到了报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@zabbix 10:26:43&gt;update history_str set value=&apos;testupdate&apos; where itemid=23327; </div><div class="line">ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</div></pre></td></tr></table></figure></p>
<p>由于表数据很少，所以会话1中的操作很快已完成，所以在processlist中是看不到任何正在执行的sql：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@zabbix 10:31:30&gt;show processlist;</div><div class="line">+----+------+-----------+--------+---------+------+-------+------------------+</div><div class="line">| Id | User | Host      | db     | Command | Time | State | Info             |</div><div class="line">+----+------+-----------+--------+---------+------+-------+------------------+</div><div class="line">|  1 | root | localhost | zabbix | Sleep   |   80 |       | NULL             |</div><div class="line">|  2 | root | localhost | zabbix | Query   |    0 | init  | show processlist |</div><div class="line">|  3 | root | localhost | NULL   | Sleep   |  217 |       | NULL             |</div><div class="line">+----+------+-----------+--------+---------+------+-------+------------------+</div><div class="line">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h3 id="会话3"><a href="#会话3" class="headerlink" title="会话3"></a>会话3</h3><p>查看是否存在正在被锁定的事务线程：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@(none) 10:27:21&gt;select r.*,p.HOST,p.COMMAND,p.state,p.time from information_schema.innodb_trx r,information_schema.processlist p where p.id = trx_mysql_thread_id  \G </div><div class="line">*************************** 1. row ***************************</div><div class="line">                    trx_id: 19828757</div><div class="line">                 trx_state: RUNNING  #这个状态说明事务还在运行中</div><div class="line">               trx_started: 2017-07-07 10:24:26</div><div class="line">     trx_requested_lock_id: NULL</div><div class="line">          trx_wait_started: NULL</div><div class="line">                trx_weight: 5</div><div class="line">       trx_mysql_thread_id: 1</div><div class="line">                 trx_query: NULL  #由于已经执行完毕，这里看不到具体的SQL</div><div class="line">       trx_operation_state: NULL</div><div class="line">         trx_tables_in_use: 0</div><div class="line">         trx_tables_locked: 0</div><div class="line">          trx_lock_structs: 5</div><div class="line">     trx_lock_memory_bytes: 1184</div><div class="line">           trx_rows_locked: 684</div><div class="line">         trx_rows_modified: 0</div><div class="line">   trx_concurrency_tickets: 0</div><div class="line">       trx_isolation_level: REPEATABLE READ</div><div class="line">         trx_unique_checks: 1</div><div class="line">    trx_foreign_key_checks: 1</div><div class="line">trx_last_foreign_key_error: NULL</div><div class="line"> trx_adaptive_hash_latched: 0</div><div class="line"> trx_adaptive_hash_timeout: 10000</div><div class="line">          trx_is_read_only: 0</div><div class="line">trx_autocommit_non_locking: 0</div><div class="line">                      HOST: localhost</div><div class="line">                   COMMAND: Sleep  #这个状态说明sql已执行完毕</div><div class="line">                     state: </div><div class="line">                      time: 210</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>可以看到有一个事务id为19828757，为了确定下update操作是否被他阻塞，再次执行会话2的update语句然后马上到会话3查询：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@(none) 10:27:56&gt;select r.*,p.HOST,p.COMMAND,p.state,p.time from information_schema.innodb_trx r,information_schema.processlist p where p.id = trx_mysql_thread_id  \G </div><div class="line">*************************** 1. row ***************************</div><div class="line">                    trx_id: 19828759</div><div class="line">                 trx_state: LOCK WAIT</div><div class="line">               trx_started: 2017-07-07 10:28:13</div><div class="line">     trx_requested_lock_id: 19828759:79:6:2</div><div class="line">          trx_wait_started: 2017-07-07 10:28:13</div><div class="line">                trx_weight: 2</div><div class="line">       trx_mysql_thread_id: 2</div><div class="line">                 trx_query: update history_str set value=&apos;testupdate&apos; where itemid=23327</div><div class="line">       trx_operation_state: starting index read</div><div class="line">         trx_tables_in_use: 1</div><div class="line">         trx_tables_locked: 1</div><div class="line">          trx_lock_structs: 2</div><div class="line">     trx_lock_memory_bytes: 360</div><div class="line">           trx_rows_locked: 1</div><div class="line">         trx_rows_modified: 0</div><div class="line">   trx_concurrency_tickets: 0</div><div class="line">       trx_isolation_level: REPEATABLE READ</div><div class="line">         trx_unique_checks: 1</div><div class="line">    trx_foreign_key_checks: 1</div><div class="line">trx_last_foreign_key_error: NULL</div><div class="line"> trx_adaptive_hash_latched: 0</div><div class="line"> trx_adaptive_hash_timeout: 10000</div><div class="line">          trx_is_read_only: 0</div><div class="line">trx_autocommit_non_locking: 0</div><div class="line">                      HOST: localhost</div><div class="line">                   COMMAND: Query</div><div class="line">                     state: updating</div><div class="line">                      time: 2</div><div class="line">*************************** 2. row ***************************</div><div class="line">                    trx_id: 19828757</div><div class="line">                 trx_state: RUNNING</div><div class="line">               trx_started: 2017-07-07 10:24:26</div><div class="line">     trx_requested_lock_id: NULL</div><div class="line">          trx_wait_started: NULL</div><div class="line">                trx_weight: 5</div><div class="line">       trx_mysql_thread_id: 1</div><div class="line">                 trx_query: NULL</div><div class="line">       trx_operation_state: NULL</div><div class="line">         trx_tables_in_use: 0</div><div class="line">         trx_tables_locked: 0</div><div class="line">          trx_lock_structs: 5</div><div class="line">     trx_lock_memory_bytes: 1184</div><div class="line">           trx_rows_locked: 684</div><div class="line">         trx_rows_modified: 0</div><div class="line">   trx_concurrency_tickets: 0</div><div class="line">       trx_isolation_level: REPEATABLE READ</div><div class="line">         trx_unique_checks: 1</div><div class="line">    trx_foreign_key_checks: 1</div><div class="line">trx_last_foreign_key_error: NULL</div><div class="line"> trx_adaptive_hash_latched: 0</div><div class="line"> trx_adaptive_hash_timeout: 10000</div><div class="line">          trx_is_read_only: 0</div><div class="line">trx_autocommit_non_locking: 0</div><div class="line">                      HOST: localhost</div><div class="line">                   COMMAND: Sleep</div><div class="line">                     state: </div><div class="line">                      time: 229</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可以看到我们的update果然是被会话1中未提交的事务（trx_id:19828757）阻塞了。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>应急解决：Kill掉会话1<br>永久解决：找到导致该事务未提交的业务代码，务必保证每个事务都及时commit。</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 故障诊断 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫框架scrapy的安装]]></title>
      <url>http://riverdba.github.io/2017/07/11/scrapy-install/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：记录一下scrapy的安装过程，尤其是在windows上的安装会遇到一些问题<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="Linux上安装Scrapy"><a href="#Linux上安装Scrapy" class="headerlink" title="Linux上安装Scrapy"></a>Linux上安装Scrapy</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接使用pip install scrapy访问国外的源会经常超时，因此建议使用国内的站点快速安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql .pip]# pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</div><div class="line">Collecting scrapy</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/a8/96/3affe11cf53a5d2105536919113d5b453479038bb486f7387f4ce4a3b83f/Scrapy-1.4.0-py2.py3-none-any.whl (248kB)</div><div class="line">    100% |████████████████████████████████| 256kB 2.0MB/s </div><div class="line">Collecting queuelib (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/16/4f/b307fc978a21bfbb138e8e01a9f4953191d439e30578f5e4fd5befa77de1/queuelib-1.4.2-py2.py3-none-any.whl</div><div class="line">Collecting w3lib&gt;=1.17.0 (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/20/3e/ba9865b88c39edd09100a8c8df11722c8881bbf76aef0c0ae5b970eb42b7/w3lib-1.17.0-py2.py3-none-any.whl</div><div class="line">Collecting cssselect&gt;=0.9 (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/1d/e5/f1d410192e34b1034dba7804de5dbcdece20a883c445ad661e5ea8226b42/cssselect-1.0.1-py2.py3-none-any.whl</div><div class="line">Collecting lxml (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/62/b7/aafdcf0c0ad0cf36a0835adde50f4a7e18241440b9897a88c80f520d0c76/lxml-3.8.0-cp27-cp27m-manylinux1_x86_64.whl (6.8MB)</div><div class="line">    100% |████████████████████████████████| 6.8MB 193kB/s </div><div class="line">Collecting parsel&gt;=1.1 (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/d0/bd/c5c3cf9c490d328a1d1e5e942c3a2b84d6934d5666e9d4bcfc2f83e7dbdd/parsel-1.2.0-py2.py3-none-any.whl</div><div class="line">Collecting service-identity (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/29/fa/995e364220979e577e7ca232440961db0bf996b6edaf586a7d1bd14d81f1/service_identity-17.0.0-py2.py3-none-any.whl</div><div class="line">Collecting six&gt;=1.5.2 (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/c8/0a/b6723e1bc4c516cb687841499455a8505b44607ab535be01091c0f24f079/six-1.10.0-py2.py3-none-any.whl</div><div class="line">Collecting Twisted&gt;=13.1.0 (from scrapy)</div><div class="line">  Could not find a version that satisfies the requirement Twisted&gt;=13.1.0 (from scrapy) (from versions: )</div><div class="line">No matching distribution found for Twisted&gt;=13.1.0 (from scrapy)</div></pre></td></tr></table></figure></p>
<p>报错说找不到Twisted，尝试pip安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql .pip]# pip install Twisted</div><div class="line">Collecting Twisted</div><div class="line">  Could not find a version that satisfies the requirement Twisted (from versions: )</div><div class="line">No matching distribution found for Twisted</div></pre></td></tr></table></figure></p>
<p>也找不到，只能单独下载Twisted并安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql .pip]# wget https://twistedmatrix.com/Releases/Twisted/17.1/Twisted-17.1.0.tar.bz2</div><div class="line">[root@mysql .pip]# tar -jxvf Twisted-17.1.0.tar.bz2</div><div class="line">[root@mysql .pip]# cd Twisted-17.1.0</div><div class="line">[root@mysql Twisted-17.1.0]# python setup.py install</div></pre></td></tr></table></figure></p>
<p>然后再次安装scrapy即可：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql Twisted-17.1.0]# pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</div><div class="line">Collecting scrapy</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/a8/96/3affe11cf53a5d2105536919113d5b453479038bb486f7387f4ce4a3b83f/Scrapy-1.4.0-py2.py3-none-any.whl</div><div class="line">Collecting queuelib (from scrapy)</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/16/4f/b307fc978a21bfbb138e8e01a9f4953191d439e30578f5e4fd5befa77de1/queuelib-1.4.2-py2.py3-none-any.whl</div><div class="line">Collecting w3lib&gt;=1.17.0 (from scrapy)</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/20/3e/ba9865b88c39edd09100a8c8df11722c8881bbf76aef0c0ae5b970eb42b7/w3lib-1.17.0-py2.py3-none-any.whl</div><div class="line">Collecting cssselect&gt;=0.9 (from scrapy)</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/1d/e5/f1d410192e34b1034dba7804de5dbcdece20a883c445ad661e5ea8226b42/cssselect-1.0.1-py2.py3-none-any.whl</div><div class="line">Collecting lxml (from scrapy)</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/62/b7/aafdcf0c0ad0cf36a0835adde50f4a7e18241440b9897a88c80f520d0c76/lxml-3.8.0-cp27-cp27m-manylinux1_x86_64.whl</div><div class="line">Collecting parsel&gt;=1.1 (from scrapy)</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/d0/bd/c5c3cf9c490d328a1d1e5e942c3a2b84d6934d5666e9d4bcfc2f83e7dbdd/parsel-1.2.0-py2.py3-none-any.whl</div><div class="line">Collecting service-identity (from scrapy)</div><div class="line">  Using cached https://pypi.tuna.tsinghua.edu.cn/packages/29/fa/995e364220979e577e7ca232440961db0bf996b6edaf586a7d1bd14d81f1/service_identity-17.0.0-py2.py3-none-any.whl</div><div class="line">Requirement already satisfied: six&gt;=1.5.2 in /usr/local/lib/python2.7/site-packages/six-1.10.0-py2.7.egg (from scrapy)</div><div class="line">Requirement already satisfied: Twisted&gt;=13.1.0 in /usr/local/lib/python2.7/site-packages/Twisted-17.1.0-py2.7-linux-x86_64.egg (from scrapy)</div><div class="line">Collecting PyDispatcher&gt;=2.0.5 (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/cd/37/39aca520918ce1935bea9c356bcbb7ed7e52ad4e31bff9b943dfc8e7115b/PyDispatcher-2.0.5.tar.gz</div><div class="line">Collecting pyOpenSSL (from scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/d0/39/7730559b75b565fd6983d857776fcb4982afb0e8faddb06170e59b62b41c/pyOpenSSL-17.1.0-py2.py3-none-any.whl (53kB)</div><div class="line">    100% |████████████████████████████████| 61kB 1.5MB/s </div><div class="line">Collecting pyasn1 (from service-identity-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/a5/ae/6b4c4cb9420edddd7401782f55504130d1269f2e5ae3ba3c986da167dd6c/pyasn1-0.2.3-py2.py3-none-any.whl (53kB)</div><div class="line">    100% |████████████████████████████████| 61kB 15.1MB/s </div><div class="line">Requirement already satisfied: attrs in /usr/local/lib/python2.7/site-packages/attrs-17.2.0-py2.7.egg (from service-identity-&gt;scrapy)</div><div class="line">Collecting pyasn1-modules (from service-identity-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/5b/a4/d4934b1b9d28541e37fa354a7dd3c3d45d19d92196df127e1342420a0ae6/pyasn1_modules-0.0.9-py2.py3-none-any.whl (60kB)</div><div class="line">    100% |████████████████████████████████| 61kB 7.0MB/s </div><div class="line">Requirement already satisfied: zope.interface&gt;=3.6.0 in /usr/local/lib/python2.7/site-packages/zope.interface-4.4.2-py2.7-linux-x86_64.egg (from Twisted&gt;=13.1.0-&gt;scrapy)</div><div class="line">Requirement already satisfied: constantly&gt;=15.1 in /usr/local/lib/python2.7/site-packages/constantly-15.1.0-py2.7.egg (from Twisted&gt;=13.1.0-&gt;scrapy)</div><div class="line">Requirement already satisfied: incremental&gt;=16.10.1 in ./.eggs/incremental-17.5.0-py2.7.egg (from Twisted&gt;=13.1.0-&gt;scrapy)</div><div class="line">Requirement already satisfied: Automat&gt;=0.3.0 in /usr/local/lib/python2.7/site-packages/Automat-0.6.0-py2.7.egg (from Twisted&gt;=13.1.0-&gt;scrapy)</div><div class="line">Collecting cryptography&gt;=1.9 (from pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/2a/0c/31bd69469e90035381f0197b48bf71032991d9f07a7e444c311b4a23a3df/cryptography-1.9.tar.gz (409kB)</div><div class="line">    100% |████████████████████████████████| 419kB 3.9MB/s </div><div class="line">Requirement already satisfied: setuptools in /usr/local/lib/python2.7/site-packages/setuptools-19.4-py2.7.egg (from zope.interface&gt;=3.6.0-&gt;Twisted&gt;=13.1.0-&gt;scrapy)</div><div class="line">Collecting idna&gt;=2.1 (from cryptography&gt;=1.9-&gt;pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/11/7d/9bbbd7bb35f34b0169542487d2a8859e44306bb2e6a4455d491800a5621f/idna-2.5-py2.py3-none-any.whl (55kB)</div><div class="line">    100% |████████████████████████████████| 61kB 10.2MB/s </div><div class="line">Collecting asn1crypto&gt;=0.21.0 (from cryptography&gt;=1.9-&gt;pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/97/ba/7e8117d8efcee589f4d96dd2b2eb1d997f96d27d214cf2b7134ad8acf6ab/asn1crypto-0.22.0-py2.py3-none-any.whl (97kB)</div><div class="line">    100% |████████████████████████████████| 102kB 13.8MB/s </div><div class="line">Collecting enum34 (from cryptography&gt;=1.9-&gt;pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/c5/db/e56e6b4bbac7c4a06de1c50de6fe1ef3810018ae11732a50f15f62c7d050/enum34-1.1.6-py2-none-any.whl</div><div class="line">Collecting ipaddress (from cryptography&gt;=1.9-&gt;pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/17/93/28f4dd560780dd70fe75ce7e2662869770dfac181f6bbb472179ea8da516/ipaddress-1.0.18-py2-none-any.whl</div><div class="line">Collecting cffi&gt;=1.7 (from cryptography&gt;=1.9-&gt;pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/90/aa/bae1c4627e3e3f631fb8e946da040f36931af86917f54e279ad6f4b29641/cffi-1.10.0-cp27-cp27m-manylinux1_x86_64.whl (394kB)</div><div class="line">    100% |████████████████████████████████| 399kB 3.0MB/s </div><div class="line">Collecting pycparser (from cffi&gt;=1.7-&gt;cryptography&gt;=1.9-&gt;pyOpenSSL-&gt;scrapy)</div><div class="line">  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/8c/2d/aad7f16146f4197a11f8e91fb81df177adcc2073d36a17b1491fd09df6ed/pycparser-2.18.tar.gz (245kB)</div><div class="line">    100% |████████████████████████████████| 256kB 6.4MB/s </div><div class="line">Installing collected packages: queuelib, w3lib, cssselect, lxml, parsel, idna, asn1crypto, enum34, ipaddress, pycparser, cffi, cryptography, pyOpenSSL, pyasn1, pyasn1-modules, service-identity, PyDispatcher, scrapy</div><div class="line">  Running setup.py install for pycparser ... done</div><div class="line">  Running setup.py install for cryptography ... done</div><div class="line">  Running setup.py install for PyDispatcher ... done</div><div class="line">Successfully installed PyDispatcher-2.0.5 asn1crypto-0.22.0 cffi-1.10.0 cryptography-1.9 cssselect-1.0.1 enum34-1.1.6 idna-2.5 ipaddress-1.0.18 lxml-3.8.0 parsel-1.2.0 pyOpenSSL-17.1.0 pyasn1-0.2.3 pyasn1-modules-0.0.9 pycparser-2.18 queuelib-1.4.2 scrapy-1.4.0 service-identity-17.0.0 w3lib-1.17.0</div></pre></td></tr></table></figure></p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql Twisted-17.1.0]# scrapy version</div><div class="line">Scrapy 1.4.0</div><div class="line">[root@mysql Twisted-17.1.0]# cd </div><div class="line">[root@mysql ~]# python </div><div class="line">Python 2.7.10 (default, Jan 18 2016, 17:00:09) </div><div class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-11)] on linux2</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; import scrapy</div><div class="line">&gt;&gt;&gt; exit()</div><div class="line">[root@mysql ~]#</div></pre></td></tr></table></figure>
<h2 id="Windows10上安装Scrapy"><a href="#Windows10上安装Scrapy" class="headerlink" title="Windows10上安装Scrapy"></a>Windows10上安装Scrapy</h2><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>windows上需要先下载openssl并将include目录拷贝到VC下。VC的具体路径因环境而不同，不过可以在安装报错日志中看到。经过各种报错后整理正确的安装步骤如下：<br>1）下载openssl：<a href="https://ci.cryptography.io/job/cryptography-support-jobs/job/openssl-release-1.1/" target="_blank" rel="external">https://ci.cryptography.io/job/cryptography-support-jobs/job/openssl-release-1.1/</a><br>如果python2.7是32位的就下载openssl-1.1.0f-2010-x86.zip，如果python是64位的就下载openssl-1.1.0f-2010-x86_64.zip，务必保证python和openssl操作系统位数一致。<br>2）将openssl-win32-2010\include下面的文件夹拷贝到C:\Users\Administrator\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\include下。<br>3）将openssl-win32-2010\lib下面的文件拷贝到C:\Python27\libs下。<br>4）pip install scrapy -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="external">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<h3 id="遇到报错及解决"><a href="#遇到报错及解决" class="headerlink" title="遇到报错及解决"></a>遇到报错及解决</h3><p>报错1：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">C:\Users\Administrator\AppData\Local\Programs\Common\Microsoft\Visual C++ for Py</div><div class="line">thon\9.0\VC\Bin\cl.exe /c /nologo /Ox /MD /W3 /GS- /DNDEBUG -IC:\Python27\includ</div><div class="line">e -IC:\Python27\PC /Tcbuild\temp.win32-2.7\Release\_openssl.c /Fobuild\temp.win3</div><div class="line">2-2.7\Release\build\temp.win32-2.7\Release\_openssl.obj</div><div class="line"></div><div class="line">_openssl.c</div><div class="line"></div><div class="line">build\temp.win32-2.7\Release\_openssl.c(434) : fatal error C1083: Cannot open in</div><div class="line">clude file: &apos;openssl/opensslv.h&apos;: No such file or directory</div><div class="line"></div><div class="line">error: command &apos;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Micr</div><div class="line">osoft\\Visual C++ for Python\\9.0\\VC\\Bin\\cl.exe&apos; failed with exit status 2</div><div class="line"></div><div class="line">----------------------------------------</div><div class="line">Cleaning up...</div><div class="line">Command C:\Python27\python.exe -c &quot;import setuptools, tokenize;__file__=&apos;c:\\use</div><div class="line">rs\\admini~1\\appdata\\local\\temp\\pip_build_Administrator\\cryptography\\setup</div><div class="line">.py&apos;;exec(compile(getattr(tokenize, &apos;open&apos;, open)(__file__).read().replace(&apos;\r\n</div><div class="line">&apos;, &apos;\n&apos;), __file__, &apos;exec&apos;))&quot; install --record c:\users\admini~1\appdata\local\t</div><div class="line">emp\pip-7as3vx-record\install-record.txt --single-version-externally-managed --c</div><div class="line">ompile failed with error code 1 in c:\users\admini~1\appdata\local\temp\pip_buil</div><div class="line">d_Administrator\cryptography</div><div class="line">Storing debug log for failure in C:\Users\Administrator\pip\pip.log</div></pre></td></tr></table></figure></p>
<p>解决办法：下载openssl（如果python2.7是32位的就下载openssl-1.1.0f-2010-x86.zip，如果python是64位的就下载openssl-1.1.0f-2010-x86_64.zip）<br>下载网址：<a href="https://ci.cryptography.io/job/cryptography-support-jobs/job/openssl-release-1.1/" target="_blank" rel="external">https://ci.cryptography.io/job/cryptography-support-jobs/job/openssl-release-1.1/</a><br>下载后解压然后将openssl-win32-2010\include下面的文件夹拷贝到C:\Users\Administrator\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\include<br>再次安装，遇到报错2。<br>报错2：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">C:\Users\Administrator\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\Bin\link.exe /DLL /nologo /INCREMENTAL:NO /LIBPATH:C:\Python27\libs /LIBPATH:C:\Python27\PCbuild libssl.lib libcrypto.lib advapi32.lib crypt32.lib gdi32.lib user32.lib ws2_32.lib /EXPORT:init_openssl build\temp.win32-2.7\Release\build\temp.win32-2.7\Release\_openssl.obj /OUT:build\lib.win32-2.7\cryptography\hazmat\bindings\_openssl.pyd /IMPLIB:build\temp.win32-2.7\Release\build\temp.win32-2.7\Release\_openssl.lib /MANIFESTFILE:build\temp.win32-2.7\Release\build\temp.win32-2.7\Release\_openssl.pyd.manifest /NXCOMPAT /DYNAMICBASE</div><div class="line">LINK : fatal error LNK1181: cannot open input file &apos;libssl.lib&apos;</div><div class="line">error: command &apos;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\link.exe&apos; failed with exit status 1181</div></pre></td></tr></table></figure></p>
<p>解决办法：将openssl-win32-2010\lib下面的文件拷贝到C:\Python27\libs，再次安装即可成功。<br>如果误将openssl-win64-2010\lib拷到C:\Python27\libs的话还会遇到下面的报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">build\lib.win32-2.7\cryptography\hazmat\bindings\_openssl.pyd : fatal error LNK1120: 1037 unresolved externals</div><div class="line">error: command &apos;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\Bin\\link.exe&apos; failed with exit status 1120</div></pre></td></tr></table></figure></p>
<p>所以务必保证python和openssl操作系统位数的一致。<br>报错3：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UnicodeDecodeError: &apos;ascii&apos; codec can&apos;t decode byte 0xb0 in position 1: ordinal not in range(128)</div></pre></td></tr></table></figure></p>
<p>解决办法：打开C:\Python27\Lib下的 mimetypes.py 文件，找到大概256行（你可以用Notepad++的搜索功能）的‘default_encoding = sys.getdefaultencoding()’。<br>在这行前面添加三行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">if sys.getdefaultencoding() != &apos;gbk&apos;:  </div><div class="line">    reload(sys)  </div><div class="line">    sys.setdefaultencoding(&apos;gbk&apos;)  </div><div class="line">default_encoding = sys.getdefaultencoding()</div></pre></td></tr></table></figure></p>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">C:\&gt;python</div><div class="line">Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win</div><div class="line">32</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; import scrapy</div><div class="line">&gt;&gt;&gt; exit()</div><div class="line"></div><div class="line">C:\&gt;scrapy version</div><div class="line">Scrapy 1.4.0</div><div class="line"></div><div class="line">C:\&gt;scrapy bench</div><div class="line">2017-07-11 09:51:30 [scrapy.utils.log] INFO: Scrapy 1.4.0 started (bot: scrapybo</div><div class="line">t)</div><div class="line">2017-07-11 09:51:30 [scrapy.utils.log] INFO: Overridden settings: &#123;&apos;CLOSESPIDER_</div><div class="line">TIMEOUT&apos;: 10, &apos;LOG_LEVEL&apos;: &apos;INFO&apos;, &apos;LOGSTATS_INTERVAL&apos;: 1&#125;</div><div class="line">2017-07-11 09:51:32 [scrapy.middleware] INFO: Enabled extensions:</div><div class="line">[&apos;scrapy.extensions.closespider.CloseSpider&apos;,</div><div class="line"> &apos;scrapy.extensions.logstats.LogStats&apos;,</div><div class="line"> &apos;scrapy.extensions.telnet.TelnetConsole&apos;,</div><div class="line"> &apos;scrapy.extensions.corestats.CoreStats&apos;]</div><div class="line">2017-07-11 09:51:33 [scrapy.middleware] INFO: Enabled downloader middlewares:</div><div class="line">[&apos;scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.retry.RetryMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.cookies.CookiesMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&apos;,</div><div class="line"> &apos;scrapy.downloadermiddlewares.stats.DownloaderStats&apos;]</div><div class="line">2017-07-11 09:51:33 [scrapy.middleware] INFO: Enabled spider middlewares:</div><div class="line">[&apos;scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&apos;,</div><div class="line"> &apos;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&apos;,</div><div class="line"> &apos;scrapy.spidermiddlewares.referer.RefererMiddleware&apos;,</div><div class="line"> &apos;scrapy.spidermiddlewares.urllength.UrlLengthMiddleware&apos;,</div><div class="line"> &apos;scrapy.spidermiddlewares.depth.DepthMiddleware&apos;]</div><div class="line">2017-07-11 09:51:33 [scrapy.middleware] INFO: Enabled item pipelines:</div><div class="line">[]</div><div class="line">2017-07-11 09:51:33 [scrapy.core.engine] INFO: Spider opened</div><div class="line">2017-07-11 09:51:33 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pag</div><div class="line">es/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:34 [scrapy.extensions.logstats] INFO: Crawled 61 pages (at 3660</div><div class="line"> pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:35 [scrapy.extensions.logstats] INFO: Crawled 133 pages (at 432</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:36 [scrapy.extensions.logstats] INFO: Crawled 197 pages (at 384</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:37 [scrapy.extensions.logstats] INFO: Crawled 262 pages (at 390</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:38 [scrapy.extensions.logstats] INFO: Crawled 334 pages (at 432</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:39 [scrapy.extensions.logstats] INFO: Crawled 405 pages (at 426</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:40 [scrapy.extensions.logstats] INFO: Crawled 470 pages (at 390</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:41 [scrapy.extensions.logstats] INFO: Crawled 533 pages (at 378</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:42 [scrapy.extensions.logstats] INFO: Crawled 605 pages (at 432</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:43 [scrapy.core.engine] INFO: Closing spider (closespider_timeo</div><div class="line">ut)</div><div class="line">2017-07-11 09:51:43 [scrapy.extensions.logstats] INFO: Crawled 670 pages (at 390</div><div class="line">0 pages/min), scraped 0 items (at 0 items/min)</div><div class="line">2017-07-11 09:51:44 [scrapy.statscollectors] INFO: Dumping Scrapy stats:</div><div class="line">&#123;&apos;downloader/request_bytes&apos;: 212136,</div><div class="line"> &apos;downloader/request_count&apos;: 686,</div><div class="line"> &apos;downloader/request_method_count/GET&apos;: 686,</div><div class="line"> &apos;downloader/response_bytes&apos;: 1017138,</div><div class="line"> &apos;downloader/response_count&apos;: 686,</div><div class="line"> &apos;downloader/response_status_count/200&apos;: 686,</div><div class="line"> &apos;dupefilter/filtered&apos;: 879,</div><div class="line"> &apos;finish_reason&apos;: &apos;closespider_timeout&apos;,</div><div class="line"> &apos;finish_time&apos;: datetime.datetime(2017, 7, 11, 1, 51, 44, 289000),</div><div class="line"> &apos;log_count/INFO&apos;: 17,</div><div class="line"> &apos;request_depth_max&apos;: 24,</div><div class="line"> &apos;response_received_count&apos;: 686,</div><div class="line"> &apos;scheduler/dequeued&apos;: 686,</div><div class="line"> &apos;scheduler/dequeued/memory&apos;: 686,</div><div class="line"> &apos;scheduler/enqueued&apos;: 12841,</div><div class="line"> &apos;scheduler/enqueued/memory&apos;: 12841,</div><div class="line"> &apos;start_time&apos;: datetime.datetime(2017, 7, 11, 1, 51, 33, 886000)&#125;</div><div class="line">2017-07-11 09:51:44 [scrapy.core.engine] INFO: Spider closed (closespider_timeou</div><div class="line">t)</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://pypi.python.org/pypi/Scrapy" target="_blank" rel="external">https://pypi.python.org/pypi/Scrapy</a><br><a href="https://cryptography.io/en/latest/installation/#on-windows" target="_blank" rel="external">https://cryptography.io/en/latest/installation/#on-windows</a><br><a href="http://blog.csdn.net/zzk1995/article/details/51924510" target="_blank" rel="external">http://blog.csdn.net/zzk1995/article/details/51924510</a><br><a href="http://bbs.chinaunix.net/thread-4251968-1-1.html" target="_blank" rel="external">http://bbs.chinaunix.net/thread-4251968-1-1.html</a></p>
</the>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用pt-kill实现MySQL的过载保护]]></title>
      <url>http://riverdba.github.io/2017/06/02/pt-kill/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：通过python+pt-kill实现对批量mysql多实例的过载保护<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="什么是pt-kill"><a href="#什么是pt-kill" class="headerlink" title="什么是pt-kill"></a>什么是pt-kill</h3><p>pt-kill是percona-toolkit中的一个工具，用来杀掉指定匹配条件的慢查询会话以保证mysql实例的可用性。<br>安装方法详见官网：<a href="https://www.percona.com/doc/percona-toolkit/LATEST/installation.html" target="_blank" rel="external">https://www.percona.com/doc/percona-toolkit/LATEST/installation.html</a><br>安装好后就可以在/usr/local/bin/目录下面看到一组pt-开头的可执行文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql80 bin]# ll /usr/local/bin/pt-*</div><div class="line">-r-xr-xr-x 1 root root  40852 Nov 29  2016 /usr/local/bin/pt-align</div><div class="line">-r-xr-xr-x 1 root root 261876 Nov 29  2016 /usr/local/bin/pt-archiver</div><div class="line">-r-xr-xr-x 1 root root 168211 Nov 29  2016 /usr/local/bin/pt-config-diff</div><div class="line">-r-xr-xr-x 1 root root 165435 Nov 29  2016 /usr/local/bin/pt-deadlock-logger</div><div class="line">-r-xr-xr-x 1 root root 164145 Nov 29  2016 /usr/local/bin/pt-diskstats</div><div class="line">-r-xr-xr-x 1 root root 168157 Nov 29  2016 /usr/local/bin/pt-duplicate-key-checker</div><div class="line">-r-xr-xr-x 1 root root  49262 Nov 29  2016 /usr/local/bin/pt-fifo-split</div><div class="line">-r-xr-xr-x 1 root root 148953 Nov 29  2016 /usr/local/bin/pt-find</div><div class="line">-r-xr-xr-x 1 root root  66409 Nov 29  2016 /usr/local/bin/pt-fingerprint</div><div class="line">-r-xr-xr-x 1 root root 132405 Nov 29  2016 /usr/local/bin/pt-fk-error-logger</div><div class="line">-r-xr-xr-x 1 root root 191457 Nov 29  2016 /usr/local/bin/pt-heartbeat</div><div class="line">-r-xr-xr-x 1 root root 225247 Nov 29  2016 /usr/local/bin/pt-index-usage</div><div class="line">-r-xr-xr-x 1 root root  32345 Nov 29  2016 /usr/local/bin/pt-ioprofile</div><div class="line">-r-xr-xr-x 1 root root 247973 May 31 18:08 /usr/local/bin/pt-kill</div><div class="line">-r-xr-xr-x 1 root root  21753 Nov 29  2016 /usr/local/bin/pt-mext</div><div class="line">-r-xr-xr-x 1 root root 100986 Nov 29  2016 /usr/local/bin/pt-mysql-summary</div><div class="line">-r-xr-xr-x 1 root root 383964 Nov 29  2016 /usr/local/bin/pt-online-schema-change</div><div class="line">-r-xr-xr-x 1 root root  24594 Nov 29  2016 /usr/local/bin/pt-pmp</div><div class="line">-r-xr-xr-x 1 root root 517540 Nov 29  2016 /usr/local/bin/pt-query-digest</div><div class="line">-r-xr-xr-x 1 root root  72542 Nov 29  2016 /usr/local/bin/pt-show-grants</div><div class="line">-r-xr-xr-x 1 root root  37724 Nov 29  2016 /usr/local/bin/pt-sift</div><div class="line">-r-xr-xr-x 1 root root 144771 Nov 29  2016 /usr/local/bin/pt-slave-delay</div><div class="line">-r-xr-xr-x 1 root root 126975 Nov 29  2016 /usr/local/bin/pt-slave-find</div><div class="line">-r-xr-xr-x 1 root root 178774 Nov 29  2016 /usr/local/bin/pt-slave-restart</div><div class="line">-r-xr-xr-x 1 root root  69559 Nov 29  2016 /usr/local/bin/pt-stalk</div><div class="line">-r-xr-xr-x 1 root root  89868 Nov 29  2016 /usr/local/bin/pt-summary</div><div class="line">-r-xr-xr-x 1 root root 418326 Nov 29  2016 /usr/local/bin/pt-table-checksum</div><div class="line">-r-xr-xr-x 1 root root 395628 Nov 29  2016 /usr/local/bin/pt-table-sync</div><div class="line">-r-xr-xr-x 1 root root 222599 Nov 29  2016 /usr/local/bin/pt-table-usage</div><div class="line">-r-xr-xr-x 1 root root 329999 Nov 29  2016 /usr/local/bin/pt-upgrade</div><div class="line">-r-xr-xr-x 1 root root 176246 Nov 29  2016 /usr/local/bin/pt-variable-advisor</div><div class="line">-r-xr-xr-x 1 root root 101650 Nov 29  2016 /usr/local/bin/pt-visual-explain</div></pre></td></tr></table></figure></p>
<h3 id="如何使用pt-kill"><a href="#如何使用pt-kill" class="headerlink" title="如何使用pt-kill"></a>如何使用pt-kill</h3><p>可以通过pt-kill –help查看帮助。假如希望每10秒监控一次来自xldev用户的查询语句，如果有超过10秒的SQL就杀掉：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql80 ~]# pt-kill \</div><div class="line">--no-version-check \</div><div class="line">--host 192.168.1.80 --port 3306 --user &apos;root&apos; --password &apos;xueledba&apos; \</div><div class="line">--charset utf8 \</div><div class="line">--match-command Query \</div><div class="line">--match-user xldev \</div><div class="line">--busy-time 10 \</div><div class="line">--kill \</div><div class="line">--victims all \</div><div class="line">--interval 10 \</div><div class="line">--print</div></pre></td></tr></table></figure></p>
<p>在客户端通过xldev用户执行一个12秒的查询语句看看能否被杀掉：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql1 ~]# mysql -uxldev -pxueledev -h192.168.1.80 -P3306 -e &quot;select sleep(12);&quot;</div><div class="line">Warning: Using a password on the command line interface can be insecure.</div><div class="line">ERROR 2013 (HY000) at line 1: Lost connection to MySQL server during query</div></pre></td></tr></table></figure></p>
<p>可以看到pt-kill输出日志显示该语句运行到第11秒的时候将它kill掉了：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 2017-04-06T01:25:41 KILL 2921294 (Query 11 sec) select sleep(12)</div></pre></td></tr></table></figure></p>
<p>由于这个是针对特定用户xldev的，因此在客户端用root执行就不会被杀：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql1 ~]# mysql -uroot -pxueledba -h192.168.1.80 -P3306 -e &quot;select sleep(12);&quot;             </div><div class="line">Warning: Using a password on the command line interface can be insecure.</div><div class="line">+-----------+</div><div class="line">| sleep(12) |</div><div class="line">+-----------+</div><div class="line">|         0 |</div><div class="line">+-----------+</div></pre></td></tr></table></figure></p>
<h3 id="多实例集中监控的实现"><a href="#多实例集中监控的实现" class="headerlink" title="多实例集中监控的实现"></a>多实例集中监控的实现</h3><p>由于一个pt-kill进程只能监控一个实例，如果是多实例部署的话就要起多个进程来监控。因此通过python的多进程可以方便的实现，python脚本内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql80 bin]# cat pt-kill.py </div><div class="line">#!/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"># by yangchangjiang@xueleyun.com</div><div class="line"></div><div class="line">import string</div><div class="line">import commands</div><div class="line">import datetime</div><div class="line">import multiprocessing</div><div class="line">import sys, os, time</div><div class="line"></div><div class="line">result = []</div><div class="line">#传入要被拦截的SQL来源IP，多个IP中间要用|分割</div><div class="line">refuse_ip = sys.argv[1]</div><div class="line"></div><div class="line">def runCmd(ip,port,user,pwd,refuse_ip):</div><div class="line">    cmd = &quot;/usr/local/bin/pt-kill --no-version-check --host %s --port %s --user %s --password %s --charset utf8 --match-command Query \</div><div class="line">          --match-host %s --busy-time 10 --kill --victims all --interval 10 --print&quot; % (ip,port,user,pwd,refuse_ip)</div><div class="line">    print cmd</div><div class="line">    os.system(cmd)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    global ip,port,user,pwd</div><div class="line">    p = multiprocessing.Pool(processes=2)</div><div class="line">    data = &#123;&apos;192.168.1.80&apos;:[&apos;3306&apos;,&apos;root&apos;,&apos;xueledba&apos;],</div><div class="line">            &apos;192.168.1.91&apos;:[&apos;3306&apos;,&apos;root&apos;,&apos;xueledba&apos;]</div><div class="line">           &#125;</div><div class="line">    for d in data:</div><div class="line">        ip = d</div><div class="line">        port = data[d][0]</div><div class="line">        user = data[d][1]</div><div class="line">        pwd = data[d][2]</div><div class="line">        #print ip,port,user,pwd</div><div class="line">        result.append(p.apply_async(runCmd,(ip,port,user,pwd,refuse_ip)))</div><div class="line">    p.close()</div><div class="line"></div><div class="line">    for res in result:</div><div class="line">         res.get(timeout=864000)</div></pre></td></tr></table></figure></p>
<p>假如要针对来自192.168.1.3的SQL进行监控查杀，可以启动python脚本：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql80 bin]# python pt-kill.py 192.168.1.3</div><div class="line">/usr/local/bin/pt-kill --no-version-check --host 192.168.1.80 --port 3306 --user root --password xueledba --charset utf8 --match-command Query           --match-host 192.168.1.3 --busy-time 10 --kill --victims all --interval 10 --print</div><div class="line">/usr/local/bin/pt-kill --no-version-check --host 192.168.1.91 --port 3306 --user root --password xueledba --charset utf8 --match-command Query           --match-host 192.168.1.3 --busy-time 10 --kill --victims all --interval 10 --print</div><div class="line">#然后到192.168.1.3执行select sleep(30)，可以看到会话被杀的日志输出：</div><div class="line"># 2017-05-26T17:01:02 KILL 1100285 (Query 15 sec) select sleep(30)</div><div class="line"># 2017-05-26T17:02:12 KILL 1146147 (Query 13 sec) select sleep(30)</div></pre></td></tr></table></figure></p>
<p>采用这种方式同时监控多实例的话，由于日志是集中打印的，就不知道到底杀掉的是哪台上面的sql。因此可以修改pt-kill的源代码，添加输出主机IP信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#进入源码，搜索关键字MATCHING_QUERY或直接定位到第7144行：</div><div class="line">MATCHING_QUERY:</div><div class="line">     foreach my $query ( @queries ) &#123;</div><div class="line">        if ( $o-&gt;get(&apos;print&apos;) ) &#123;</div><div class="line">           printf &quot;# %s %s %d (%s %d sec) %s\n&quot;,</div><div class="line">              ts(time), $o-&gt;get(&apos;kill-query&apos;) ? &apos;KILL QUERY&apos; : &apos;KILL&apos;,</div><div class="line">              $query-&gt;&#123;Id&#125;, ($query-&gt;&#123;Command&#125; || &apos;NULL&apos;), $query-&gt;&#123;Time&#125;,</div><div class="line">              ($query-&gt;&#123;Info&#125; || &apos;NULL&apos;);</div><div class="line">        &#125;</div><div class="line">#将这段代码改为：</div><div class="line">MATCHING_QUERY:</div><div class="line">foreach my $query ( @queries ) &#123;</div><div class="line">if ( $o-&gt;get(&apos;print&apos;) ) &#123;</div><div class="line">   printf &quot;# %s %s %d (%s %d sec) %s %s\n&quot;,</div><div class="line">      ts(time),$o-&gt;get(&apos;kill-query&apos;) ? &apos;KILL QUERY&apos; : &apos;KILL&apos;,</div><div class="line">      $query-&gt;&#123;Id&#125;, ($query-&gt;&#123;Command&#125; || &apos;NULL&apos;), $query-&gt;&#123;Time&#125;,($dbh-&gt;&#123;mysql_hostinfo&#125; || &apos;&apos;),</div><div class="line">      ($query-&gt;&#123;Info&#125; || &apos;NULL&apos;);</div><div class="line">&#125;            </div><div class="line">#然后保存退出，启动pt-kill：</div><div class="line">[root@mysql80 bin]# python pt-kill.py 192.168.1.3</div><div class="line">/usr/local/bin/pt-kill --no-version-check --host 192.168.1.80 --port 3306 --user root --password xueledba --charset utf8 --match-command Query           --match-host 192.168.1.3 --busy-time 10 --kill --victims all --interval 10 --print</div><div class="line">/usr/local/bin/pt-kill --no-version-check --host 192.168.1.91 --port 3306 --user root --password xueledba --charset utf8 --match-command Query           --match-host 192.168.1.3 --busy-time 10 --kill --victims all --interval 10 --print</div><div class="line"># 2017-05-26T18:03:23 KILL 1150267 (Query 16 sec) 192.168.1.80 via TCP/IP select sleep(36)</div><div class="line"># 2017-05-26T18:04:03 KILL 1104444 (Query 13 sec) 192.168.1.91 via TCP/IP select sleep(35)</div></pre></td></tr></table></figure></p>
<p>这样就可以看到是在80上的还是91上的被杀了。pt-kill的结果可以输出到日志也可以保存到数据库，具体可参考官方文档。</p>
]]></content>
      
        <categories>
            
            <category> TOOLS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python+pt-kill </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql binlog文件扩展序号最大是多少]]></title>
      <url>http://riverdba.github.io/2017/05/25/mysql-binlog-filename/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：你知道mysql的binlog文件扩展后缀序号最大到多少吗？<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="思考一个问题"><a href="#思考一个问题" class="headerlink" title="思考一个问题"></a>思考一个问题</h3><p>我们知道mysql刚开始生成的binlog文件是从binlog.000001开始的，那么当日志文件到binlog.999999后是会从000001重新开始呢还是会继续递增呢？</p>
<h3 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h3><p>测试下当binlog文件名达到binlog.999999后会怎么样？（在mysql5.6.35上测试）<br>首先关闭mysqld服务，手动生成一个binlog.999999的空文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# /opt/mysql/bin/mysqladmin shutdown --socket=/data/mysql/run/mysql.sock</div><div class="line">170526 04:01:15 mysqld_safe mysqld from pid file /data/mysql/data/mysql2.pid ended</div><div class="line">[1]+  Done                    /opt/mysql/bin/mysqld_safe --defaults-file=/opt/my3306.cnf  (wd: /opt)</div><div class="line">(wd now: ~)</div><div class="line">[root@mysql2 ~]# ps -ef|grep mysqld</div><div class="line">root     11033 29391  0 04:01 pts/0    00:00:00 grep mysqld</div><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog/</div><div class="line">total 16</div><div class="line">-rw-r--r-- 1 root  root  1119 Mar  3 16:56 undo.sql</div><div class="line">-rw-rw---- 1 mysql mysql   74 May 16 01:15 binlog.index</div><div class="line">-rw-rw---- 1 mysql mysql  231 May 16 01:15 binlog.000033</div><div class="line">-rw-rw---- 1 mysql mysql  254 May 26 04:01 binlog.000034</div><div class="line">[root@mysql2 ~]# touch /data/mysql/log/binlog/binlog.999999</div><div class="line">[root@mysql2 ~]# chown -R mysql.mysql /data/mysql/log/binlog/binlog.999999</div><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog/                          </div><div class="line">total 16</div><div class="line">-rw-r--r-- 1 root  root  1119 Mar  3 16:56 undo.sql</div><div class="line">-rw-rw---- 1 mysql mysql   74 May 16 01:15 binlog.index</div><div class="line">-rw-rw---- 1 mysql mysql  231 May 16 01:15 binlog.000033</div><div class="line">-rw-rw---- 1 mysql mysql  254 May 26 04:01 binlog.000034</div><div class="line">-rw-r--r-- 1 mysql mysql    0 May 26 04:02 binlog.999999</div></pre></td></tr></table></figure></p>
<p>然后启动mysqld服务，看看会产生什么样的日志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# /opt/mysql/bin/mysqld_safe --defaults-file=/opt/my3306.cnf &amp;</div><div class="line">[1] 11042</div><div class="line">[root@mysql2 ~]# 170526 04:03:36 mysqld_safe Logging to &apos;/data/mysql/log/error.log&apos;.</div><div class="line">170526 04:03:36 mysqld_safe Starting mysqld daemon with databases from /data/mysql/data</div><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog/                             </div><div class="line">total 16</div><div class="line">-rw-r--r-- 1 root  root  1119 Mar  3 16:56 undo.sql</div><div class="line">-rw-rw---- 1 mysql mysql  254 May 26 04:01 binlog.000034</div><div class="line">-rw-r--r-- 1 mysql mysql    0 May 26 04:02 binlog.999999</div><div class="line">-rw-rw---- 1 mysql mysql   75 May 26 04:03 binlog.index</div><div class="line">-rw-rw---- 1 mysql mysql  231 May 26 04:03 binlog.1000000</div><div class="line">[root@mysql2 ~]# cat /data/mysql/log/binlog/binlog.index </div><div class="line">/data/mysql/log/binlog/binlog.000034</div><div class="line">/data/mysql/log/binlog/binlog.1000000</div><div class="line">[root@mysql2 ~]#</div></pre></td></tr></table></figure></p>
<p>可以看到产生的新日志是binlog.1000000。由此可见binlog日志的后缀序号并不局限于6位数，而是会继续递增，那么最大能到多少呢？<br>接下来我们去5.7.18版本的源码中看看，在Binlog.cc文件中看到如下代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**</div><div class="line">  Find a unique filename for &apos;filename.#&apos;.</div><div class="line"></div><div class="line">  Set &apos;#&apos; to the highest existing log file extension plus one.</div><div class="line"></div><div class="line">  This function will return nonzero if: (i) the generated name</div><div class="line">  exceeds FN_REFLEN; (ii) if the number of extensions is exhausted;</div><div class="line">  or (iii) some other error happened while examining the filesystem.</div><div class="line"></div><div class="line">  @return</div><div class="line">    nonzero if not possible to get unique filename.</div><div class="line">*/</div><div class="line">/*从上面这段注释可以看出这里定义了一个查找binlog文件的方法，产生新的binlog日志是现有最高日志文件的扩展名加1*/</div><div class="line">static int find_uniq_filename(char *name)</div><div class="line">&#123;</div><div class="line">  uint                  i;</div><div class="line">  char                  buff[FN_REFLEN], ext_buf[FN_REFLEN];</div><div class="line">  struct st_my_dir     *dir_info;</div><div class="line">  struct fileinfo *file_info;</div><div class="line">  ulong                 max_found= 0, next= 0, number= 0;</div><div class="line">  size_t		buf_length, length;</div><div class="line">  char			*start, *end;</div><div class="line">  int                   error= 0;</div><div class="line">  DBUG_ENTER(&quot;find_uniq_filename&quot;);</div><div class="line"></div><div class="line">  length= dirname_part(buff, name, &amp;buf_length);</div><div class="line">  start=  name + length;</div><div class="line">  end=    strend(start);</div><div class="line"></div><div class="line">  *end=&apos;.&apos;;</div><div class="line">  length= (size_t) (end - start + 1);</div><div class="line"></div><div class="line">  if ((DBUG_EVALUATE_IF(&quot;error_unique_log_filename&quot;, 1, </div><div class="line">      !(dir_info= my_dir(buff,MYF(MY_DONT_SORT))))))</div><div class="line">  &#123;						// This shouldn&apos;t happen</div><div class="line">    my_stpcpy(end,&quot;.1&quot;);				// use name+1</div><div class="line">    DBUG_RETURN(1);</div><div class="line">  &#125;</div><div class="line">  file_info= dir_info-&gt;dir_entry;</div><div class="line">  for (i= dir_info-&gt;number_off_files ; i-- ; file_info++)</div><div class="line">  &#123;</div><div class="line">    if (strncmp(file_info-&gt;name, start, length) == 0 &amp;&amp;</div><div class="line">	is_number(file_info-&gt;name+length, &amp;number,0))</div><div class="line">    &#123;</div><div class="line">      set_if_bigger(max_found, number);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  my_dirend(dir_info);</div><div class="line"></div><div class="line">  /* check if reached the maximum possible extension number */</div><div class="line">  if (max_found == MAX_LOG_UNIQUE_FN_EXT)  /*当找到的数是定义的最大数时，就退出*/</div><div class="line">  &#123;</div><div class="line">    sql_print_error(&quot;Log filename extension number exhausted: %06lu. \</div><div class="line">Please fix this by archiving old logs and \</div><div class="line">updating the index files.&quot;, max_found);</div><div class="line">    error= 1;</div><div class="line">    goto end;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  next= max_found + 1;</div><div class="line">  if (sprintf(ext_buf, &quot;%06lu&quot;, next)&lt;0)</div><div class="line">  &#123;</div><div class="line">    error= 1;</div><div class="line">    goto end;</div><div class="line">  &#125;</div><div class="line">  *end++=&apos;.&apos;;</div></pre></td></tr></table></figure></p>
<p>再看下MAX_LOG_UNIQUE_FN_EXT的定义：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/*</div><div class="line">  Maximum unique log filename extension. /*这里定义了最大的日志文件扩展名序号*/</div><div class="line">  Note: setting to 0x7FFFFFFF due to atol windows</div><div class="line">        overflow/truncate.</div><div class="line"> */</div><div class="line">#define MAX_LOG_UNIQUE_FN_EXT 0x7FFFFFFF</div></pre></td></tr></table></figure></p>
<p>我们知道以0x开头的数据表示16进制，将它转换为10进制后：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT CONV(&apos;7FFFFFFF&apos;,16,10);</div><div class="line">+------------------------+</div><div class="line">| CONV(&apos;7FFFFFFF&apos;,16,10) |</div><div class="line">+------------------------+</div><div class="line">| 2147483647             |</div><div class="line">+------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; select pow(2,31)-1;</div><div class="line">+-------------+</div><div class="line">| pow(2,31)-1 |</div><div class="line">+-------------+</div><div class="line">|  2147483647 |</div><div class="line">+-------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>由此可见，binlog后缀扩展序号的最大值是：2^31 - 1。</p>
<h3 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h3><p>测试当达到binlog.2147483647后再进行flush logs；MySQL会发生什么事情。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# touch /data/mysql/log/binlog/binlog.2147483645</div><div class="line">[root@mysql2 ~]# chown -R mysql.mysql /data/mysql/log/binlog/binlog.2147483645</div><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog                               </div><div class="line">total 16</div><div class="line">-rw-r--r-- 1 root  root  1119 Mar  3 16:56 undo.sql</div><div class="line">-rw-rw---- 1 mysql mysql  254 May 26 04:01 binlog.000034</div><div class="line">-rw-r--r-- 1 mysql mysql    0 May 26 04:02 binlog.999999</div><div class="line">-rw-rw---- 1 mysql mysql   75 May 26 04:03 binlog.index</div><div class="line">-rw-rw---- 1 mysql mysql  231 May 26 04:03 binlog.1000000</div><div class="line">-rw-r--r-- 1 mysql mysql    0 May 26 04:50 binlog.2147483645</div><div class="line">[root@mysql2 ~]# /opt/mysql/bin/mysqladmin shutdown --socket=/data/mysql/run/mysql.sock</div><div class="line">170526 04:51:33 mysqld_safe mysqld from pid file /data/mysql/data/mysql2.pid ended</div><div class="line">[1]+  Done                    /opt/mysql/bin/mysqld_safe --defaults-file=/opt/my3306.cnf</div><div class="line">[root@mysql2 ~]# /opt/mysql/bin/mysqld_safe --defaults-file=/opt/my3306.cnf &amp;</div><div class="line">[1] 13009</div><div class="line">[root@mysql2 ~]# 170526 04:51:50 mysqld_safe Logging to &apos;/data/mysql/log/error.log&apos;.</div><div class="line">170526 04:51:50 mysqld_safe Starting mysqld daemon with databases from /data/mysql/data</div><div class="line">mysql&gt; show master status;</div><div class="line">+-------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------------+</div><div class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                                                                             |</div><div class="line">+-------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------------+</div><div class="line">| binlog.2147483646 |      231 |              |                  | 82ea218f-ffe4-11e6-977d-005056a740da:1-8727440,</div><div class="line">82ea218f-ffe4-11e6-977d-005056a740db:1-430292 |</div><div class="line">+-------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; flush logs;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div><div class="line">mysql&gt; show master status;</div><div class="line">+-------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------------+</div><div class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                                                                             |</div><div class="line">+-------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------------+</div><div class="line">| binlog.2147483647 |      231 |              |                  | 82ea218f-ffe4-11e6-977d-005056a740da:1-8727440,</div><div class="line">82ea218f-ffe4-11e6-977d-005056a740db:1-430292 |</div><div class="line">+-------------------+----------+--------------+------------------+-----------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; flush logs;</div><div class="line">ERROR 1098 (HY000): Can&apos;t generate a unique log-filename /data/mysql/log/binlog/binlog.(1-999)</div><div class="line">mysql&gt; show master status;</div><div class="line">Empty set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>错误日志如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# tailf /data/mysql/log/error.log                             </div><div class="line">2017-05-26 04:52:50 13978 [Warning] Next log extension: 2147483642. Remaining log filename extensions: 5. Please consider archiving some logs.</div><div class="line">2017-05-26 04:52:56 13978 [Warning] Next log extension: 2147483643. Remaining log filename extensions: 4. Please consider archiving some logs.</div><div class="line">2017-05-26 04:53:01 13978 [Warning] Next log extension: 2147483644. Remaining log filename extensions: 3. Please consider archiving some logs.</div><div class="line">2017-05-26 04:53:04 13978 [Warning] Next log extension: 2147483645. Remaining log filename extensions: 2. Please consider archiving some logs.</div><div class="line">2017-05-26 04:53:09 13978 [Warning] Next log extension: 2147483646. Remaining log filename extensions: 1. Please consider archiving some logs.</div><div class="line">2017-05-26 04:53:11 13978 [Warning] Next log extension: 2147483647. Remaining log filename extensions: 0. Please consider archiving some logs.</div><div class="line">2017-05-26 04:53:14 13978 [ERROR] Log filename extension number exhausted: 2147483647. Please fix this by archiving old logs and updating the index files.</div><div class="line">2017-05-26 04:53:14 13978 [ERROR] Can&apos;t generate a unique log-filename /data/mysql/log/binlog/binlog.(1-999)</div><div class="line">2017-05-26 04:53:14 13978 [ERROR] Could not open /data/mysql/log/binlog/binlog for logging (error 0). Turning logging off for the whole duration of the MySQL server process. To turn it on again: fix the cause, shutdown the MySQL server and restart it.</div></pre></td></tr></table></figure></p>
<p>报错提示无法生成binlog文件了，查看生成的日志：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog                                        </div><div class="line">total 44</div><div class="line">-rw-r--r-- 1 root  root  1119 Mar  3 16:56 undo.sql</div><div class="line">-rw-rw---- 1 mysql mysql  254 May 26 04:01 binlog.000034</div><div class="line">-rw-r--r-- 1 mysql mysql    0 May 26 04:02 binlog.999999</div><div class="line">-rw-rw---- 1 mysql mysql  254 May 26 04:51 binlog.1000000</div><div class="line">-rw-r--r-- 1 mysql mysql    0 May 26 04:52 binlog.2147483645</div><div class="line">-rw-rw---- 1 mysql mysql  279 May 26 04:53 binlog.2147483646</div><div class="line">-rw-rw---- 1 mysql mysql  362 May 26 04:53 binlog.index</div><div class="line">-rw-rw---- 1 mysql mysql  231 May 26 04:53 binlog.2147483647</div><div class="line">[root@mysql2 ~]# cat /data/mysql/log/binlog/binlog.index </div><div class="line">/data/mysql/log/binlog/binlog.000034</div><div class="line">/data/mysql/log/binlog/binlog.1000000</div><div class="line">/data/mysql/log/binlog/binlog.2147483645</div><div class="line">/data/mysql/log/binlog/binlog.2147483646</div><div class="line">/data/mysql/log/binlog/binlog.2147483647</div><div class="line">[root@mysql2 ~]#</div></pre></td></tr></table></figure></p>
<p>可以看出虽然报错貌似是想产生binlog.(1-999)的，事实上也没产生。说明当binlog序号达到最大值后既无法递增也无法重新从000001开始！<br>虽然实际工作中不大可能遇到binlog序号用完的情况，如果一旦遇到只能将日志清空然后重启mysqld服务，日志会继续从binlog.000001开始。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# rm -rf /data/mysql/log/binlog/binlog.*</div><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog        </div><div class="line">total 4</div><div class="line">-rw-r--r-- 1 root root 1119 Mar  3 16:56 undo.sql</div><div class="line">[root@mysql2 ~]#  /opt/mysql/bin/mysqld_safe --defaults-file=/opt/my3306.cnf &amp;</div><div class="line">[1] 17966</div><div class="line">[root@mysql2 ~]# 170526 05:06:20 mysqld_safe Logging to &apos;/data/mysql/log/error.log&apos;.</div><div class="line">170526 05:06:20 mysqld_safe Starting mysqld daemon with databases from /data/mysql/data</div><div class="line">mysql&gt; show master status;</div><div class="line">+---------------+----------+--------------+------------------+----------------------------------------+</div><div class="line">| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                      |</div><div class="line">+---------------+----------+--------------+------------------+----------------------------------------+</div><div class="line">| binlog.000001 |      455 |              |                  | 82ea218f-ffe4-11e6-977d-005056a740db:1 |</div><div class="line">+---------------+----------+--------------+------------------+----------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; exit</div><div class="line">Bye</div><div class="line">[root@mysql2 ~]# cat /data/mysql/log/binlog/binlog.index </div><div class="line">/data/mysql/log/binlog/binlog.000001</div><div class="line">[root@mysql2 ~]# ls -lrt /data/mysql/log/binlog/binlog.index    </div><div class="line">-rw-rw---- 1 mysql mysql 37 May 26 05:06 /data/mysql/log/binlog/binlog.index</div><div class="line">[root@mysql2 ~]#</div></pre></td></tr></table></figure></p>
<p>总结：</p>
<ol>
<li>mysql binlog的最大sequence是：pow(2,31)-1 = 2147483647</li>
<li>当binlog接近这个值是小于1000开始向error log中写入警告</li>
<li>binlog的sequence达到最大值时，不管有没有mysql-bin.000001类似这样的文件，mysqld都是退出。</li>
<li>在mysql产生binlog时会读取当前日件文目录下的log-bin的base name获取下一个日志文件的后面的Seq。 所以日志目录下文件太多，会影响MySQL的启动及日志切换。这里也有一个大的隐患运行中给放一个较大的日志文件，在下次日志文件切换时有可能很快就接近于最大值，造成mysqld crash退出。</li>
<li>一定要监控error log的输出以及binlog序号并足够重视，一旦监控到binlog序号接近最大值时就要找机会对主库进行reset master重置binlog序号从000001开始！<br>参考：<a href="http://wubx.net/mysql-binlog-max-sequence/" target="_blank" rel="external">http://wubx.net/mysql-binlog-max-sequence/</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql5.6之performance schema初探]]></title>
      <url>http://riverdba.github.io/2017/05/15/mysql-performance-schema/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：对比mysql5.6和5.7中的performance schema<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="Performance-Schema是什么"><a href="#Performance-Schema是什么" class="headerlink" title="Performance Schema是什么"></a>Performance Schema是什么</h3><p>MySQL Performance Schema是一个在底层监控MySQL Server的特性,下文简称PFS。它具有如下特点：<br>1、提供了一种对运行中的服务执行内部检查的方法，主要搜集性能数据，数据存储在performance_schema数据库中，该库中的表的存储引擎为PERFORMANCE_SCHEMA。它和INFORMATION_SCHEMA不同，INFORMATION_SCHEMA提供访问数据库元数据,关于MySQL服务器的信息（如数据库或表的名称,数据类型的列,或者访问权限等）<br>2、可以监控并搜集任何服务器的事件信息。通常一个事件可能是一个函数调用、一个操作系统等待、一个SQL执行阶段（如解析或排序或整条语句或一组语句）。还有几个存储引擎服务器的同步调用（如互斥对象）文件和表的I/O、表锁等事件搜集信息。<br>3、PFS事件和写入binlog的事件是不同的，写入binlog的事件是用来记录数据的修改情况。和事件调度器也不同（属于定时任务程序）。<br>4、PFS事件针对特定的MySQL服务器的实例。是属于本地服务器的，PFS事件的变化是不会写入二进制日志的，因此是不会被复制到从库的。<br>5、可以对当前事件及历史事件的记录并汇总，这样可以了解活动的时间和次数。可以显示特定活动线程或特定的对象或文件。<br>6、PFS存储引擎收集事件数据使用的是源码中的instrumentation points。<br>7、搜集到的事件被存储在PFS数据库中，这些表可以像其他表一样用SELECT语句进行查询。<br>7、PFS的配置可以通过SQL语句动态修改performance_schema数据库中的表。配置更改立即影响数据收集。<br>8、PFS中的表是内存表，他们是没有持久化存储到磁盘的。表的数据会随着服务的启动而增加，随着服务的关闭而丢失。<br>9、支持对所有平台的MySQL进行监控。<br>10、数据搜集可以通过修改源码增加instrumentation。<br>PFS旨在提供关于服务器执行的有用信息,同时对服务器性能产生最小的影响。实现这些的设计目标如下:<br>1、开启PFS不会导致服务器发生变化。比如：不会改变线程调度，也不会改变执行计划。<br>2、不需要重新调整之前已经分配好的内存大小。<br>3、对服务器不断的监控只需要很小的性能开销，开启PFS并不会导致服务器不可用。<br>4、没有新的关键词或语句，解析器就不变。<br>5、很容易添加新的instrumentation points（检测点）。</p>
<h3 id="PFS配置"><a href="#PFS配置" class="headerlink" title="PFS配置"></a>PFS配置</h3><p>查看运行中的MySQL服务器是否开启了PFS相关变量值：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# /opt/mysql/bin/mysqladmin variables|grep &quot;performance_schema&quot;</div><div class="line">| performance_schema                                     | ON                                                                      </div><div class="line">| performance_schema_accounts_size                       | 100                                                                     </div><div class="line">| performance_schema_digests_size                        | 10000                                                                   </div><div class="line">| performance_schema_events_stages_history_long_size     | 10000                                                                   </div><div class="line">| performance_schema_events_stages_history_size          | 10                                                                      </div><div class="line">| performance_schema_events_statements_history_long_size | 10000                                                                   </div><div class="line">| performance_schema_events_statements_history_size      | 10                                                                      </div><div class="line">| performance_schema_events_waits_history_long_size      | 10000                                                                   </div><div class="line">| performance_schema_events_waits_history_size           | 10                                                                      </div><div class="line">| performance_schema_hosts_size                          | 100                                                                     </div><div class="line">| performance_schema_max_cond_classes                    | 80                                                                      </div><div class="line">| performance_schema_max_cond_instances                  | 137172                                                                  </div><div class="line">| performance_schema_max_file_classes                    | 50                                                                      </div><div class="line">| performance_schema_max_file_handles                    | 32768                                                                   </div><div class="line">| performance_schema_max_file_instances                  | 302782                                                                  </div><div class="line">| performance_schema_max_mutex_classes                   | 200                                                                     </div><div class="line">| performance_schema_max_mutex_instances                 | 665360                                                                  </div><div class="line">| performance_schema_max_rwlock_classes                  | 30                                                                      </div><div class="line">| performance_schema_max_rwlock_instances                | 396616                                                                  </div><div class="line">| performance_schema_max_socket_classes                  | 10                                                                      </div><div class="line">| performance_schema_max_socket_instances                | 3020                                                                    </div><div class="line">| performance_schema_max_stage_classes                   | 150                                                                     </div><div class="line">| performance_schema_max_statement_classes               | 175                                                                     </div><div class="line">| performance_schema_max_table_handles                   | 131072                                                                  </div><div class="line">| performance_schema_max_table_instances                 | 81920                                                                   </div><div class="line">| performance_schema_max_thread_classes                  | 50                                                                      </div><div class="line">| performance_schema_max_thread_instances                | 3100                                                                    </div><div class="line">| performance_schema_session_connect_attrs_size          | 512                                                                     </div><div class="line">| performance_schema_setup_actors_size                   | 100                                                                     </div><div class="line">| performance_schema_setup_objects_size                  | 100                                                                     </div><div class="line">| performance_schema_users_size                          | 100                                                                     </div><div class="line">[root@mysql ~]#</div></pre></td></tr></table></figure></p>
<p>如果没有PFS的话需要重新编译MySQL加入：-DWITH_PERFSCHEMA_STORAGE_ENGINE=1。<br>MySQL5.6上的PFS默认是开启的，也可以显式的在my.cnf中设置关闭：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[mysqld]</div><div class="line">performance_schema=OFF</div></pre></td></tr></table></figure></p>
<p>查看PFS存储引擎：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@(none) 03:09:19&gt;show engines\G;</div><div class="line">... ...</div><div class="line">*************************** 9. row ***************************</div><div class="line">      Engine: PERFORMANCE_SCHEMA</div><div class="line">     Support: YES</div><div class="line">     Comment: Performance Schema</div><div class="line">Transactions: NO</div><div class="line">          XA: NO</div><div class="line">  Savepoints: NO</div><div class="line">9 rows in set (0.00 sec)</div><div class="line">... ...</div></pre></td></tr></table></figure></p>
<h3 id="监控表说明"><a href="#监控表说明" class="headerlink" title="监控表说明"></a>监控表说明</h3><p>1、setup_actors: How to initialize monitoring for new foreground threads 。监控什么样的用户（主机/用户/角色）<br>2、setup_consumers: The destinations to which event information can be sent and stored 。监控什么事件（哪些事件可监控，有：事件阶段/事件语句/事件事务/事件等待/…）<br>3、setup_instruments: The classes of instrumented objects for which events can be collected 。监控什么仪表（哪类仪表可监控）<br>4、setup_objects: Which objects should be monitored 。监控数据库的对象（表/函数/存储过程/事件/触发器）<br>5、setup_timers: The current event timer 。监控哪类事件计时器（空闲/等待/语句/事务/阶段）</p>
<h3 id="监控策略"><a href="#监控策略" class="headerlink" title="监控策略"></a>监控策略</h3><p>1、全系统监控: 监控项全部开启（便于分析不确定的问题，影响系统性能）<br>2、定制监控: 监控项部分开启（便于分析确定的问题，影响系统性能较少）<br>如：<br>禁止所有的文件类仪表:<br>UPDATE setup_instruments SET ENABLED = ‘NO’<br>WHERE NAME LIKE ‘wait/io/file/%’;</p>
<h3 id="监控示例"><a href="#监控示例" class="headerlink" title="监控示例"></a>监控示例</h3><p>系统“卡”住了，怎么办？关注：<br>mutex_instances.LOCKED_BY_THREAD_ID<br>rwlock_instances.WRITE_LOCKED_BY_THREAD_ID<br>1、假定线程1被卡住（thread 1 is stuck waiting for a mutex ）<br>SELECT <em> FROM events_waits_current WHERE THREAD_ID = thread_1;<br>2、查询结果显示此线程在等待mutex A，则应该找出是谁持有mutex A<br>SELECT </em> FROM mutex_instances WHERE OBJECT_INSTANCE_BEGIN = mutex_A;<br>3、查询结果显示此线程2在持有mutex A ，则应该查线程2在做什么事情<br>SELECT * FROM events_waits_current WHERE THREAD_ID = thread_2;<br><a href="https://dev.mysql.com/doc/refman/5.6/en/performance-schema.html" target="_blank" rel="external">更多详见官网</a></p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用GDB调试mysql源码]]></title>
      <url>http://riverdba.github.io/2017/05/04/gdb-debug-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：通过GDB调试mysql5.6的启动过程<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="安装GDB"><a href="#安装GDB" class="headerlink" title="安装GDB"></a>安装GDB</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 src]# wget http://ftp.gnu.org/gnu/gdb/gdb-7.6.1.tar.gz</div><div class="line">[root@mysql2 src]# tar -zxvf gdb-7.6.1.tar.gz </div><div class="line">[root@mysql2 src]# cd gdb-7.6.1 </div><div class="line">[root@mysql2 gdb-7.6.1]# ./configure  </div><div class="line">[root@mysql2 gdb-7.6.1]# make &amp;&amp; make install</div><div class="line">[root@mysql2 gdb-7.6.1]# whereis gdb</div><div class="line">gdb: /usr/local/bin/gdb /usr/share/gdb</div><div class="line">[root@mysql2 gdb-7.6.1]# gdb -v</div><div class="line">GNU gdb (GDB) 7.6.1</div><div class="line">Copyright (C) 2013 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class="line">and &quot;show warranty&quot; for details.</div><div class="line">This GDB was configured as &quot;x86_64-unknown-linux-gnu&quot;.</div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class="line">[root@mysql2 ~]# gdb</div><div class="line">GNU gdb (GDB) 7.6.1</div><div class="line">Copyright (C) 2013 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class="line">and &quot;show warranty&quot; for details.</div><div class="line">This GDB was configured as &quot;x86_64-unknown-linux-gnu&quot;.</div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class="line">(gdb) help</div><div class="line">List of classes of commands:</div><div class="line"></div><div class="line">aliases -- Aliases of other commands</div><div class="line">breakpoints -- Making program stop at certain points</div><div class="line">data -- Examining data</div><div class="line">files -- Specifying and examining files</div><div class="line">internals -- Maintenance commands</div><div class="line">obscure -- Obscure features</div><div class="line">running -- Running the program</div><div class="line">stack -- Examining the stack</div><div class="line">status -- Status inquiries</div><div class="line">support -- Support facilities</div><div class="line">tracepoints -- Tracing of program execution without stopping the program</div><div class="line">user-defined -- User-defined commands</div><div class="line"></div><div class="line">Type &quot;help&quot; followed by a class name for a list of commands in that class.</div><div class="line">Type &quot;help all&quot; for the list of all commands.</div><div class="line">Type &quot;help&quot; followed by command name for full documentation.</div><div class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class="line">Command name abbreviations are allowed if unambiguous.</div><div class="line">(gdb)</div></pre></td></tr></table></figure>
<h3 id="开启DEBUG模式编译源码"><a href="#开启DEBUG模式编译源码" class="headerlink" title="开启DEBUG模式编译源码"></a>开启DEBUG模式编译源码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# mkdir -p &#123;/opt/debug_mysql,/opt/debug_mysql/run,/data/debug_mysql/data,/data/debug_mysql/tmp,/data/debug_mysql/log/iblog,/data/debug_mysql/log/binlog&#125;</div><div class="line">[root@mysql2 mysql-5.6.35]#cmake \</div><div class="line">-DCMAKE_INSTALL_PREFIX=/opt/debug_mysql \</div><div class="line">-DINSTALL_DATADIR=/data/debug_mysql/data  \</div><div class="line">-DDEFAULT_CHARSET=utf8 \</div><div class="line">-DDEFAULT_COLLATION=utf8_general_ci \</div><div class="line">-DEXTRA_CHARSETS=all \</div><div class="line">-DWITH_SSL=yes \</div><div class="line">-DWITH_EMBEDDED_SERVER=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_ARCHIVE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</div><div class="line">-DMYSQL_UNIX_ADDR=/opt/debug_mysql/run/mysql.sock \</div><div class="line">-DMYSQL_TCP_PORT=3307 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DSYSCONFDIR=/etc \</div><div class="line">-DWITH_DEBUG=1 #添加此项开启DEBUG模式</div><div class="line">[root@mysql2 mysql-5.6.35]# make &amp;&amp; make install</div><div class="line">[root@mysql2 opt]# /opt/debug_mysql/scripts/mysql_install_db --defaults-file=/opt/my3307.cnf --basedir=/opt/debug_mysql</div></pre></td></tr></table></figure>
<h3 id="调试mysqld的启动过程"><a href="#调试mysqld的启动过程" class="headerlink" title="调试mysqld的启动过程"></a>调试mysqld的启动过程</h3><h4 id="找到mysqld的启动入口"><a href="#找到mysqld的启动入口" class="headerlink" title="找到mysqld的启动入口"></a>找到mysqld的启动入口</h4><p>对mysqld的入口函数(mysqld_main)做断点:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql2 ~]# gdb --args /opt/debug_mysql/bin/mysqld</div><div class="line">GNU gdb (GDB) 7.6.1</div><div class="line">Copyright (C) 2013 Free Software Foundation, Inc.</div><div class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class="line">This is free software: you are free to change and redistribute it.</div><div class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class="line">and &quot;show warranty&quot; for details.</div><div class="line">This GDB was configured as &quot;x86_64-unknown-linux-gnu&quot;.</div><div class="line">For bug reporting instructions, please see:</div><div class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</div><div class="line">Reading symbols from /opt/debug_mysql/bin/mysqld...done.</div><div class="line">(gdb) b mysqld_main</div><div class="line">Breakpoint 1 at 0x63bfbf: file /opt/mysql-5.6.35/sql/mysqld.cc, line 5250.</div><div class="line">(gdb)</div></pre></td></tr></table></figure></p>
<p>查看源码文件mysqld.cc的第5250行：<br><img src="/2017/05/04/gdb-debug-mysql/1.png" alt="图1"><br>说明这个mysqld_main就是mysqld启动的入口函数</p>
<h4 id="启动mysqld"><a href="#启动mysqld" class="headerlink" title="启动mysqld"></a>启动mysqld</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">The program is not being run.</div><div class="line">(gdb) r</div><div class="line">Starting program: /opt/debug_mysql/bin/mysqld </div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.</div><div class="line"></div><div class="line">Breakpoint 1, mysqld_main (argc=1, argv=0x7fffffffe578) at /opt/mysql-5.6.35/sql/mysqld.cc:5250</div><div class="line">5250      my_progname= argv[0];</div></pre></td></tr></table></figure>
<p>mysqld_main本身作为第一个参数传递给my_progname启动。</p>
<h4 id="文件、目录权限的初始化"><a href="#文件、目录权限的初始化" class="headerlink" title="文件、目录权限的初始化"></a>文件、目录权限的初始化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">5254      if (my_init())                 // init my_sys library &amp; pthreads</div><div class="line">(gdb) s</div><div class="line">my_init () at /opt/mysql-5.6.35/mysys/my_init.c:69</div><div class="line">69        if (my_init_done)</div><div class="line">(gdb) n</div><div class="line">72        my_init_done= 1;</div><div class="line">(gdb) n</div><div class="line">74        my_umask= 0660;                       /* Default umask for new files */</div><div class="line">(gdb) n</div><div class="line">75        my_umask_dir= 0700;                   /* Default umask for new directories */</div><div class="line">(gdb) n</div><div class="line">78        if ((str= getenv(&quot;UMASK&quot;)) != 0)</div><div class="line">(gdb) n</div><div class="line">81        if ((str= getenv(&quot;UMASK_DIR&quot;)) != 0)</div><div class="line">(gdb) n</div><div class="line">84        init_glob_errs();</div><div class="line">(gdb) n</div><div class="line">86        instrumented_stdin.m_file= stdin;</div><div class="line">(gdb) n</div><div class="line">87        instrumented_stdin.m_psi= NULL;       /* not yet instrumented */</div><div class="line">(gdb) n</div><div class="line">88        mysql_stdin= &amp; instrumented_stdin;</div></pre></td></tr></table></figure>
<h4 id="线程初始化"><a href="#线程初始化" class="headerlink" title="线程初始化"></a>线程初始化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">90        if (my_thread_global_init())</div><div class="line">(gdb) s</div><div class="line">my_thread_global_init () at /opt/mysql-5.6.35/mysys/my_thr_init.c:120</div><div class="line">120       if (my_thread_global_init_done)</div><div class="line">(gdb) n</div><div class="line">122       my_thread_global_init_done= 1;</div><div class="line">(gdb) n</div><div class="line">134       pthread_mutexattr_init(&amp;my_fast_mutexattr);</div><div class="line">(gdb) n</div><div class="line">135       pthread_mutexattr_settype(&amp;my_fast_mutexattr,</div><div class="line">(gdb) n</div><div class="line">143       pthread_mutexattr_init(&amp;my_errorcheck_mutexattr);</div><div class="line">(gdb) n</div><div class="line">144       pthread_mutexattr_settype(&amp;my_errorcheck_mutexattr,</div><div class="line">(gdb) n</div><div class="line">148       DBUG_ASSERT(! THR_KEY_mysys_initialized);</div><div class="line">(gdb) n</div><div class="line">149       if ((pth_ret= pthread_key_create(&amp;THR_KEY_mysys, NULL)) != 0)</div><div class="line">(gdb) s</div><div class="line">155       THR_KEY_mysys_initialized= TRUE;</div><div class="line">(gdb) n</div><div class="line">156       mysql_mutex_init(key_THR_LOCK_malloc, &amp;THR_LOCK_malloc, MY_MUTEX_INIT_FAST);</div><div class="line">(gdb) n</div><div class="line">157       mysql_mutex_init(key_THR_LOCK_open, &amp;THR_LOCK_open, MY_MUTEX_INIT_FAST);</div><div class="line">(gdb) n</div><div class="line">158       mysql_mutex_init(key_THR_LOCK_charset, &amp;THR_LOCK_charset, MY_MUTEX_INIT_FAST);</div><div class="line">(gdb) n</div><div class="line">159       mysql_mutex_init(key_THR_LOCK_threads, &amp;THR_LOCK_threads, MY_MUTEX_INIT_FAST);</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/2.png" alt="图2"><br><img src="/2017/05/04/gdb-debug-mysql/3.png" alt="图3"></p>
<h4 id="mutex初始化"><a href="#mutex初始化" class="headerlink" title="mutex初始化"></a>mutex初始化</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">my_init () at /opt/mysql-5.6.35/mysys/my_init.c:94</div><div class="line">94        safe_mutex_global_init();             /* Must be called early */</div><div class="line">(gdb) n</div><div class="line">102       if ((home_dir= getenv(&quot;HOME&quot;)) != 0)</div><div class="line">(gdb) n</div><div class="line">103         home_dir= intern_filename(home_dir_buff, home_dir);</div><div class="line">(gdb) n</div><div class="line">106         DBUG_ENTER(&quot;my_init&quot;);</div><div class="line">(gdb) n</div><div class="line">107         DBUG_PROCESS((char*) (my_progname ? my_progname : &quot;unknown&quot;));</div><div class="line">(gdb) n</div><div class="line">109         DBUG_PRINT(&quot;exit&quot;, (&quot;home: &apos;%s&apos;&quot;, home_dir));</div><div class="line">(gdb) n</div><div class="line">113         DBUG_RETURN(0);</div><div class="line">(gdb) n</div><div class="line">115     &#125; /* my_init */</div></pre></td></tr></table></figure>
<h4 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">mysqld_main (argc=1, argv=0x7fffffffe578) at /opt/mysql-5.6.35/sql/mysqld.cc:5261</div><div class="line">5261      orig_argc= argc;</div><div class="line">(gdb) s</div><div class="line">5262      orig_argv= argv;</div><div class="line">(gdb) n</div><div class="line">5263      my_getopt_use_args_separator= TRUE;</div><div class="line">(gdb) n</div><div class="line">5264      my_defaults_read_login_file= FALSE;</div><div class="line">(gdb) n</div><div class="line">5265      if (load_defaults(MYSQL_CONFIG_NAME, load_default_groups, &amp;argc, &amp;argv))</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/4.png" alt="图4"><br><img src="/2017/05/04/gdb-debug-mysql/5.png" alt="图5"><br>下图可以看到win平台上mysqld加载my.cnf配置文件的顺序：<br><img src="/2017/05/04/gdb-debug-mysql/6.png" alt="图6"><br>下图可以看到linux平台上mysqld加载my.cnf配置文件的顺序：<br><img src="/2017/05/04/gdb-debug-mysql/7.png" alt="图7"><br>依次查找my.cnf的顺序是：/etc、/etc/mysql、当前目录、当前用户家目录</p>
<h4 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">5274      system_charset_info= &amp;my_charset_utf8_general_ci;</div></pre></td></tr></table></figure>
<h4 id="初始化各种status变量"><a href="#初始化各种status变量" class="headerlink" title="初始化各种status变量"></a>初始化各种status变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">5276      init_sql_statement_names();</div><div class="line">(gdb) s</div><div class="line">init_sql_statement_names () at /opt/mysql-5.6.35/sql/mysqld.cc:3599</div><div class="line">3599      char *first_com= (char*) offsetof(STATUS_VAR, com_stat[0]);</div></pre></td></tr></table></figure>
<h4 id="初始化系统变量"><a href="#初始化系统变量" class="headerlink" title="初始化系统变量"></a>初始化系统变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">5277      sys_var_init();</div><div class="line">(gdb) s</div><div class="line">sys_var_init () at /opt/mysql-5.6.35/sql/set_var.cc:61</div><div class="line">61        DBUG_ENTER(&quot;sys_var_init&quot;);</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/8.png" alt="图8"></p>
<h4 id="初始化performance-schema"><a href="#初始化performance-schema" class="headerlink" title="初始化performance_schema"></a>初始化performance_schema</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) s</div><div class="line">init_pfs_instrument_array () at /opt/mysql-5.6.35/storage/perfschema/pfs_server.cc:218</div><div class="line">218       my_init_dynamic_array(&amp;pfs_instr_config_array, sizeof(PFS_instr_config*), 10, 10);</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/9.png" alt="图9"></p>
<h4 id="为performance-schema初始化做早期准备"><a href="#为performance-schema初始化做早期准备" class="headerlink" title="为performance schema初始化做早期准备"></a>为performance schema初始化做早期准备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">mysqld_main (argc=2, argv=0x17edd20) at /opt/mysql-5.6.35/sql/mysqld.cc:5288</div><div class="line">5288      ho_error= handle_early_options();</div><div class="line">(gdb) s</div><div class="line">handle_early_options () at /opt/mysql-5.6.35/sql/mysqld.cc:6865</div><div class="line">6865      vector&lt;my_option&gt; all_early_options;</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/10.png" alt="图10"></p>
<h4 id="初始化key-LOCK-error-log"><a href="#初始化key-LOCK-error-log" class="headerlink" title="初始化key_LOCK_error_log"></a>初始化key_LOCK_error_log</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">5358      init_error_log_mutex();</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/11.png" alt="图11"></p>
<h4 id="初始化key-LOCK-audit-mask"><a href="#初始化key-LOCK-audit-mask" class="headerlink" title="初始化key_LOCK_audit_mask"></a>初始化key_LOCK_audit_mask</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) s</div><div class="line">5368      mysql_audit_initialize();</div><div class="line">(gdb) s</div><div class="line">mysql_audit_initialize () at /opt/mysql-5.6.35/sql/sql_audit.cc:316</div><div class="line">316       init_audit_psi_keys();</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/12.png" alt="图12"></p>
<h4 id="初始化logger"><a href="#初始化logger" class="headerlink" title="初始化logger"></a>初始化logger</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">mysqld_main (argc=2, argv=0x17edd20) at /opt/mysql-5.6.35/sql/mysqld.cc:5374</div><div class="line">5374      logger.init_base();</div><div class="line">(gdb) s</div><div class="line">LOGGER::init_base (this=0x179a4c0 &lt;logger&gt;) at /opt/mysql-5.6.35/sql/log.cc:912</div><div class="line">912       DBUG_ASSERT(inited == 0);</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/13.png" alt="图13"><br><img src="/2017/05/04/gdb-debug-mysql/14.png" alt="图14"></p>
<h4 id="初始化公共变量"><a href="#初始化公共变量" class="headerlink" title="初始化公共变量"></a>初始化公共变量</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) s</div><div class="line">5404      if (init_common_variables())</div></pre></td></tr></table></figure>
<p><img src="/2017/05/04/gdb-debug-mysql/15.png" alt="图15"></p>
<h4 id="检查data-home目录"><a href="#检查data-home目录" class="headerlink" title="检查data home目录"></a>检查data home目录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">5465      check_data_home(mysql_real_data_home);</div><div class="line">(gdb) n</div><div class="line">5466      if (my_setwd(mysql_real_data_home,MYF(MY_WME)) &amp;&amp; !opt_help)</div><div class="line">(gdb) s</div><div class="line">my_setwd (dir=0x17931a0 &lt;mysql_real_data_home&gt; &quot;/opt/debug_mysql/data/&quot;, MyFlags=16) at /opt/mysql-5.6.35/mysys/my_getwd.c:98</div><div class="line">98        DBUG_ENTER(&quot;my_setwd&quot;);</div></pre></td></tr></table></figure>
<h4 id="检查用户"><a href="#检查用户" class="headerlink" title="检查用户"></a>检查用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">(gdb) n</div><div class="line">mysqld_main (argc=2, argv=0x17edd20) at /opt/mysql-5.6.35/sql/mysqld.cc:5469</div><div class="line">5469      if ((user_info= check_user(mysqld_user)))</div><div class="line">(gdb) s</div><div class="line">check_user (user=0x0) at /opt/mysql-5.6.35/sql/mysqld.cc:2100</div><div class="line">2100      uid_t user_id= geteuid();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mycat常见问题集锦]]></title>
      <url>http://riverdba.github.io/2017/04/24/mycat-faq/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：MyCAT常见问题与解决过程记录<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="1-4版本BUG"><a href="#1-4版本BUG" class="headerlink" title="1.4版本BUG"></a>1.4版本BUG</h3><p>mycat版本：1.4-RELEASE<br>运行环境：线上库<br>报错内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">04/21 21:50:01.156   WARN [$_MyCatServer] (NIOAcceptor.java:121) -$_MyCatServer</div><div class="line">java.lang.ArrayIndexOutOfBoundsException: 9</div><div class="line">        at org.opencloudb.net.NIOReactorPool.getNextReactor(NIOReactorPool.java:22)</div><div class="line">        at org.opencloudb.net.NIOAcceptor.accept(NIOAcceptor.java:117)</div><div class="line">        at org.opencloudb.net.NIOAcceptor.run(NIOAcceptor.java:91)</div></pre></td></tr></table></figure></p>
<p>紧急解决：这个报错导致客户端无法正常连接，重启mycat后恢复正常！<br>永久解决：这是1.4的BUG，建议升级到1.5。</p>
<h3 id="错误号1105"><a href="#错误号1105" class="headerlink" title="错误号1105"></a>错误号1105</h3><p>mycat版本：1.5.1-RELEASE<br>运行环境：开发库<br>报错内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from e_detail;</div><div class="line">ERROR 1105 (HY000): java.lang.ArrayIndexOutOfBoundsException: 80</div><div class="line">mycat日志：</div><div class="line">04/24 16:14:19.368   WARN [BusinessExecutor3] (MultiNodeQueryHandler.java:484) -caught exception </div><div class="line">java.lang.ArrayIndexOutOfBoundsException</div><div class="line">04/24 16:14:19.369   INFO [BusinessExecutor3] (AbstractConnection.java:458) -close connection,reason:java.lang.ArrayIndexOutOfBoundsException ,MySQLConnection [id=27389, lastTime=1493021659154, user=xldev, schema=xueledb125, old shema=xueledb125, borrowed=true, fromSlaveDB=false, threadId=3560685, charset=utf8, txIsolation=3, autocommit=true, attachment=dn249&#123;SELECT *</div><div class="line">FROM e_detail</div></pre></td></tr></table></figure></p>
<p>现象补充：当执行select count(*) from e_detail时没报错，只有这个表执行select *的时候会报错。其他表select *都没问题！<br>造成原因：各个分片中的表结构字段数量不一致！<br>解决办法：<br>1、找到不一致的分片加上遗漏的字段<br>2、直接在mycat上drop掉这个表，重新创建该表（由于开发库数据无所谓，固采用此法）</p>
<h3 id="异常（not-support-token-IDENTIFIER）"><a href="#异常（not-support-token-IDENTIFIER）" class="headerlink" title="异常（not support token:IDENTIFIER）"></a>异常（not support token:IDENTIFIER）</h3><p>mycat版本：1.4.1-dev<br>运行环境：线上全站考核库<br>业务场景：开发反馈将hive输出文件导入mycat时，某个文件导入不了。<br>查看mycat的wrapper.log报错如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 | Exception in thread &quot;BusinessExecutor18987&quot; com.alibaba.druid.sql.parser.ParserException: not support token:IDENTIFIER</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLExprParser.methodRest(SQLExprParser.java:698)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLExprParser.primaryRest(SQLExprParser.java:658)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser.primaryRest(MySqlExprParser.java:480)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLExprParser.primary(SQLExprParser.java:555)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser.primary(MySqlExprParser.java:166)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLExprParser.expr(SQLExprParser.java:119)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseLoadDataInFile(MySqlStatementParser.java:1851)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseLoad(MySqlStatementParser.java:1675)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser.parseStatementListDialect(MySqlStatementParser.java:582)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:313)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:121)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.parser.SQLStatementParser.parseStatementList(SQLStatementParser.java:116)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at com.alibaba.druid.sql.visitor.ParameterizedOutputVisitorUtils.parameterize(ParameterizedOutputVisitorUtils.java:53)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at org.opencloudb.stat.HighFrequencySqlAnalyzer$SQLParser.mergeSql(HighFrequencySqlAnalyzer.java:202)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at org.opencloudb.stat.HighFrequencySqlAnalyzer.onQuery(HighFrequencySqlAnalyzer.java:46)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at org.opencloudb.stat.QueryResultDispatcher$1.run(QueryResultDispatcher.java:51)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">INFO   | jvm 1    | 2017/04/28 17:17:51 |       at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure></p>
<p>造成原因：只看这个报错提示可能觉得不够友好，没办法看出是什么问题。通过测试导入的文件发现数据已经存在数据库中了。说明是由于主键id冲突导致这个错。经开发确认确实是delete语句的where条件写错日期范围了。导致部分数据没删掉！<br>解决办法：删掉重复的数据再次导入即可。</p>
<h3 id="插入数据后无法正常路由查询"><a href="#插入数据后无法正常路由查询" class="headerlink" title="插入数据后无法正常路由查询"></a>插入数据后无法正常路由查询</h3><p>开发有个需求，需要向mycat中插入一条数据，insert语句如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">INSERT INTO t_disk (disk_id,creator,user_id,unit_id,file_pk,file_uri,file_type,NAME,description,extension,ext_type,ext_icon_type,size,add_time,update_time,sticky_status,share_status,share_time,audit_instructions,collect_status,pid,sch_id,STATUS,is_province,resource_id) </div><div class="line">VALUES(  &apos;abcdb0a3233249c59ea463d2ff1d5627&apos;,  &apos;1000110004&apos;,  &apos;1000110004&apos;,  &apos;010003001001001001001&apos;,  &apos;156754d9cf9a5dab2fc07ee37043aa72&apos;,  &apos;156754d9cf9a5dab2fc07ee37043aa72&apos;,  4,  &apos;智慧课堂测试大文件500M&apos;,  &apos;&apos;,  &apos;mp4&apos;,  4,  &apos;video&apos;,  &apos;50000000&apos;,  NOW(),  NOW(),  0,  0,  NOW(),  &apos;&apos;,  0,  &apos;&apos;,  &apos;&apos; &apos;10001&apos;,  1,  0,  &apos;&apos;) ;</div></pre></td></tr></table></figure></p>
<p>开发说已在开发库执行过了，没报错。到线上mycat执行后也提示成功插入一条数据。可是当根据分片字段（sch_id）去查的时候却查不到数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SELECT * FROM t_disk WHERE disk_id=&apos;abcdb0a3233249c59ea463d2ff1d5627&apos; AND sch_id=&apos;10001&apos;;</div><div class="line">没有数据返回</div></pre></td></tr></table></figure></p>
<p>只根据主键查询的时候可以查到一条数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SELECT * FROM t_disk WHERE disk_id=&apos;abcdb0a3233249c59ea463d2ff1d5627&apos;;</div><div class="line">返回一条数据</div></pre></td></tr></table></figure></p>
<p>而且这条数据查询到的sch_id确实是10001，可是为什么通过mycat无法查到呢？<br>先看看根据分片查询语句的路由信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ct_user@ctdb 05:36:55&gt;explain SELECT * FROM t_disk WHERE disk_id=&apos;abcdb0a3233249c59ea463d2ff1d5627&apos; AND sch_id=&apos;10001&apos;;</div><div class="line">+-----------+----------------------------------------------------------------------------------------------------+</div><div class="line">| DATA_NODE | SQL                                                                                                |</div><div class="line">+-----------+----------------------------------------------------------------------------------------------------+</div><div class="line">| xldn55    | SELECT * FROM t_disk WHERE disk_id=&apos;abcdb0a3233249c59ea463d2ff1d5627&apos; AND sch_id=&apos;10001&apos; |</div><div class="line">+-----------+----------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可以看到该SQL去节点xldn55上查询数据，结果没查到！<br>再来查看下insert语句的路由信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ct_user@ctdb 05:31:25&gt;EXPLAIN</div><div class="line">    -&gt; INSERT INTO t_disk (disk_id,creator,user_id,unit_id,file_pk,file_uri,file_type,NAME,description,extension,ext_type,ext_icon_type,size,add_time,update_time,sticky_status,share_status,share_time,audit_instructions,collect_status,pid,sch_id,STATUS,is_province,resource_id) </div><div class="line">    -&gt; VALUES(  &apos;abcdb0a3233249c59ea463d2ff1d5627&apos;,  &apos;1000110004&apos;,  &apos;1000110004&apos;,  &apos;010003001001001001001&apos;,  &apos;156754d9cf9a5dab2fc07ee37043aa72&apos;,  &apos;156754d9cf9a5dab2fc07ee37043aa72&apos;,  4,  &apos;智慧课堂测试大文件500M&apos;,  &apos;&apos;,  &apos;mp4&apos;,  4,  &apos;video&apos;,  &apos;50000000&apos;,  NOW(),  NOW(),  0,  0,  NOW(),  &apos;&apos;,  0,  &apos;&apos;,  &apos;&apos; &apos;10001&apos;,  1,  0,  &apos;&apos;) ;</div><div class="line">+-----------+----------------------------------------------------------------------------------------------------</div><div class="line">| DATA_NODE | SQL  </div><div class="line">----------------------------------------------------------------------------------------------------------------+</div><div class="line">| xldn145   | INSERT INTO t_disk (disk_id,creator,user_id,unit_id,file_pk,file_uri,file_type,NAME,description,extension,ext_type,ext_icon_type,size,add_time,update_time,sticky_status,share_status,share_time,audit_instructions,collect_status,pid,sch_id,STATUS,is_province,resource_id)  VALUES(  &apos;abcdb0a3233249c59ea463d2ff1d5627&apos;,  &apos;1000110004&apos;,  &apos;1000110004&apos;,  &apos;010003001001001001001&apos;,  &apos;156754d9cf9a5dab2fc07ee37043aa72&apos;,  &apos;156754d9cf9a5dab2fc07ee37043aa72&apos;,  4,  &apos;智慧课堂测试大文件500M&apos;,  &apos;&apos;,  &apos;mp4&apos;,  4,  &apos;video&apos;,  &apos;50000000&apos;,  NOW(),  NOW(),  0,  0,  NOW(),  &apos;&apos;,  0,  &apos;&apos;,  &apos;&apos; &apos;10001&apos;,  1,  0,  &apos;&apos;)          |</div><div class="line">+-----------+----------------------------------------------------------------------------------------------------</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>路由显示其存储节点是xldn145，竟然不是同一个分片，这就难怪查询不到了。仔细查看insert语句，发现对应sch_id字段的值是:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&apos;&apos; &apos;10001&apos;</div></pre></td></tr></table></figure></p>
<p>该字符串路由到的分片节点和’10001’肯定是不同的。<br>解决办法很简单：根据主键删掉该条数据，然后插入正确的值即可！</p>
<h3 id="mycat不支持的SQL写法"><a href="#mycat不支持的SQL写法" class="headerlink" title="mycat不支持的SQL写法"></a>mycat不支持的SQL写法</h3><p>开发同事使用开源的Quartz Job Scheduling来做定时任务调度模块，使用过程中发现一些sql写法不支持，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT NEXT_FIRE_TIME FROM qrtz_TRIGGERS WHERE SCHED_NAME =&apos;XueleJobScheduler&apos; AND NOT (MISFIRE_INSTR = -1); </div><div class="line">+----------------+</div><div class="line">| NEXT_FIRE_TIME |</div><div class="line">+----------------+</div><div class="line">|  1495116120000 |</div><div class="line">|  1495292400000 |</div><div class="line">+----------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line">mysql&gt; SELECT NEXT_FIRE_TIME FROM qrtz_TRIGGERS WHERE SCHED_NAME =&apos;XueleJobScheduler&apos; AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME &lt; 1495116120000; </div><div class="line">+----------------+</div><div class="line">| NEXT_FIRE_TIME |</div><div class="line">+----------------+</div><div class="line">|  1495116120000 |</div><div class="line">|  1495292400000 |</div><div class="line">+----------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line">mysql&gt; SELECT NEXT_FIRE_TIME FROM qrtz_TRIGGERS WHERE SCHED_NAME =&apos;XueleJobScheduler&apos; AND NOT (MISFIRE_INSTR = -1) AND NEXT_FIRE_TIME &gt; 1495116120000; </div><div class="line">+----------------+</div><div class="line">| NEXT_FIRE_TIME |</div><div class="line">+----------------+</div><div class="line">|  1495116120000 |</div><div class="line">|  1495292400000 |</div><div class="line">+----------------+</div><div class="line">2 rows in set (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>发现无论AND NOT后面跟任何条件都不生效，将NOT (MISFIRE_INSTR = -1)改写为MISFIRE_INSTR != -1查询返回结果正常：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT NEXT_FIRE_TIME FROM qrtz_TRIGGERS WHERE SCHED_NAME =&apos;XueleJobScheduler&apos; AND MISFIRE_INSTR != -1 AND NEXT_FIRE_TIME &lt; 1495116120000; </div><div class="line">Empty set (0.00 sec)</div><div class="line">mysql&gt; SELECT NEXT_FIRE_TIME FROM qrtz_TRIGGERS WHERE SCHED_NAME =&apos;XueleJobScheduler&apos; AND MISFIRE_INSTR != -1 AND NEXT_FIRE_TIME = 1495116120000; </div><div class="line">+----------------+</div><div class="line">| NEXT_FIRE_TIME |</div><div class="line">+----------------+</div><div class="line">|  1495116120000 |</div><div class="line">+----------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">mysql&gt; SELECT NEXT_FIRE_TIME FROM qrtz_TRIGGERS WHERE SCHED_NAME =&apos;XueleJobScheduler&apos; AND MISFIRE_INSTR != -1 AND NEXT_FIRE_TIME &gt; 1495116120000; </div><div class="line">+----------------+</div><div class="line">| NEXT_FIRE_TIME |</div><div class="line">+----------------+</div><div class="line">|  1495292400000 |</div><div class="line">+----------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h3 id="mycat1-5不支持sqoop工具"><a href="#mycat1-5不支持sqoop工具" class="headerlink" title="mycat1.5不支持sqoop工具"></a>mycat1.5不支持sqoop工具</h3><p>使用sqoop将hive数据导入mysql时，sqoop工具会去读取information_schema下面的一些系统表来获取表的字段情况。SQL如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = (SELECT SCHEMA())   AND TABLE_NAME = &apos;a_table&apos;;</div></pre></td></tr></table></figure></p>
<p>mycat1.5环境中报错说mycat中未定义该表：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 158336</div><div class="line">Server version: 5.5.8-mycat-1.5.1-RELEASE-20161130213509 MyCat Server (OpenCloundDB)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = (SELECT SCHEMA())   AND TABLE_NAME = &apos;a_table&apos;; </div><div class="line">ERROR 1064 (HY000): can&apos;t find table define in schema INFORMATION_SCHEMA.COLUMNS schema:a_db</div><div class="line">mysql&gt; </div><div class="line">mysql&gt; exit</div><div class="line">Bye</div></pre></td></tr></table></figure></p>
<p>切到mycat1.4环境正常：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 13</div><div class="line">Server version: 5.5.8-mycat-1.4-RELEASE-20150901112004 MyCat Server (OpenCloundDB)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = (SELECT SCHEMA())   AND TABLE_NAME = &apos;a_table&apos;; </div><div class="line"></div><div class="line">+--------------+</div><div class="line">| COLUMN_NAME  |</div><div class="line">+--------------+</div><div class="line">| accs_id      |</div><div class="line">| class_id     |</div><div class="line">| score        |</div><div class="line">| user_id      |</div><div class="line">| user_name    |</div><div class="line">| icon         |</div><div class="line">| user_score   |</div><div class="line">| school_rank  |</div><div class="line">| area_rank    |</div><div class="line">| global_rank  |</div><div class="line">| monthsubject |</div><div class="line">| grade        |</div><div class="line">+--------------+</div><div class="line">12 rows in set (0.03 sec)</div><div class="line"></div><div class="line">mysql&gt; </div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>如果一定要用mycat1.5就需要将INFORMATION_SCHEMA.COLUMNS配置到mycat中才可以。</p>
</the>]]></content>
      
        <categories>
            
            <category> MyCAT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在mycat上使用select * 的影响]]></title>
      <url>http://riverdba.github.io/2017/04/24/select-on-mycat/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：select * 写法对mycat结果集的影响<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="为什么要避免SELECT"><a href="#为什么要避免SELECT" class="headerlink" title="为什么要避免SELECT *"></a>为什么要避免SELECT *</h3><p>select *会将不需要读的字段数据都从MySQL里读出来，给网络传输造成不必要的压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</p>
<h3 id="SELECT-对MyCAT的影响"><a href="#SELECT-对MyCAT的影响" class="headerlink" title="SELECT *对MyCAT的影响"></a>SELECT *对MyCAT的影响</h3><p>mycat版本：1.5.1-RELEASE<br>使用select *查询结果：<br><img src="/2017/04/24/select-on-mycat/1.png" alt="图1"><br>将每个字段列出来查询结果：<br><img src="/2017/04/24/select-on-mycat/2.png" alt="图2"><br>可以看到，使用select *导致mycat返回结果集错乱了。<br>再次强调：SELECT语句必须指定具体字段名称！</p>
</the>]]></content>
      
        <categories>
            
            <category> MyCAT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mycat1.4升级到1.5]]></title>
      <url>http://riverdba.github.io/2017/04/22/mycat-upgrade/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：将mycat1.4升级到1.5<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="为什么升级"><a href="#为什么升级" class="headerlink" title="为什么升级"></a>为什么升级</h3><p>我们公司自2015年6月开始使用mycat1.4-RC，9月份升级到1.4-RELEASE，直到今天已经稳定运行快2年了。昨天晚上线上mycat突然发生连接失败报警，于是迅速登上服务器看到如下报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">04/21 21:50:01.156   WARN [$_MyCatServer] (NIOAcceptor.java:121) -$_MyCatServer</div><div class="line">java.lang.ArrayIndexOutOfBoundsException: 9</div><div class="line">        at org.opencloudb.net.NIOReactorPool.getNextReactor(NIOReactorPool.java:22)</div><div class="line">        at org.opencloudb.net.NIOAcceptor.accept(NIOAcceptor.java:117)</div><div class="line">        at org.opencloudb.net.NIOAcceptor.run(NIOAcceptor.java:91)</div></pre></td></tr></table></figure></p>
<p>先紧急处理故障：备份mycat日志并重启mycat后恢复正常。今天上午咨询了Leader-us，确认此为1.4的bug，建议升级到1.5！</p>
<h3 id="下载mycat1-5"><a href="#下载mycat1-5" class="headerlink" title="下载mycat1.5"></a>下载mycat1.5</h3><p>下载地址：<a href="https://github.com/MyCATApache/Mycat-download/blob/master/1.5-RELEASE/Mycat-server-1.5.1-RELEASE-20161130213509-linux.tar.gz" target="_blank" rel="external">https://github.com/MyCATApache/Mycat-download/blob/master/1.5-RELEASE/Mycat-server-1.5.1-RELEASE-20161130213509-linux.tar.gz</a><br>删除当前目录下所有的文件夹：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mycat2 src]# find ./ -type d |xargs rm -rf</div></pre></td></tr></table></figure></p>
<p>解压：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mycat2 src]# tar -zxvf Mycat-server-1.5.1-RELEASE-20161130213509-linux.tar.gz</div></pre></td></tr></table></figure></p>
<p>查看文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mycat2 src]# cd mycat/</div><div class="line">[root@mycat2 mycat]# ls</div><div class="line">bin  catlet  conf  lib  logs  version.txt</div><div class="line">[root@mycat2 mycat]# cat version.txt </div><div class="line">BuildTime  2016-11-30 13:35:05</div><div class="line">GitVersion   15645b8ef82a653bcd7c66f6d15f8bd73249991f</div><div class="line">MavenVersion 1.5.1-RELEASE</div><div class="line">GitUrl https://github.com/MyCATApache/Mycat-Server.git</div><div class="line">MyCatSite http://www.mycat.org.cn</div><div class="line">QQGroup 106088787</div><div class="line">[root@mycat2 mycat]#</div></pre></td></tr></table></figure></p>
<h3 id="备份mycat1-4"><a href="#备份mycat1-4" class="headerlink" title="备份mycat1.4"></a>备份mycat1.4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mycat2 local]# cp -r mycat mycat1.4_20170422</div></pre></td></tr></table></figure>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>将mycat1.4中的配置文件目录（conf）拷贝到1.5<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mycat2]#cd /usr/local/mycat</div><div class="line">采用不提示直接覆盖的方式拷贝文件：</div><div class="line">[root@mycat2 mycat]# \cp -rf conf/ /src/mycat/</div><div class="line">拷贝完毕后要到1.5的mycat目录中确认下配置文件是否完好，确定OK后再将1.4的mycat删掉，将1.5的mycat拷贝到/usr/local然后启动mycat</div><div class="line">[root@mycat2 local]# rm -rf mycat</div><div class="line">[root@mycat2 local]# mv /src/mycat/ ./</div><div class="line">[root@mycat2 local]# mycat start</div><div class="line">Starting Mycat-server...</div><div class="line">[root@mycat2 local]# ps -ef|grep mycat</div><div class="line">root       300     1  0 15:00 ?        00:00:00 /usr/local/mycat/bin/./wrapper-linux-x86-64 /usr/local/mycat/conf/wrapper.conf wrapper.syslog.ident=mycat wrapper.pidfile=/usr/local/mycat/logs/mycat.pid wrapper.daemonize=TRUE wrapper.lockfile=/var/lock/subsys/mycat</div><div class="line">root       351 17022  0 15:00 pts/0    00:00:00 grep mycat</div><div class="line">[root@mycat2 local]# mysql -udev_ro -pdev2017 -h192.168.1.130 -P8066</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 51</div><div class="line">Server version: 5.5.8-mycat-1.5.1-RELEASE-20161130213509 MyCat Server (OpenCloundDB)</div><div class="line">Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.</div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line">mysql&gt; show databases;</div><div class="line">+---------------+</div><div class="line">| DATABASE      |</div><div class="line">+---------------+</div><div class="line">| testdb        |</div><div class="line">| riverdb       |</div><div class="line">+---------------+</div><div class="line">14 rows in set (0.00 sec)</div><div class="line">mysql&gt; exit</div><div class="line">Bye</div><div class="line">[root@mycat2 local]#</div></pre></td></tr></table></figure></p>
</the>]]></content>
      
        <categories>
            
            <category> MyCAT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql sleep连接太多怎么办]]></title>
      <url>http://riverdba.github.io/2017/04/21/mysql-sleep-process-too-many/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：interactive_timeout和wait_timeout参数对sleep连接的影响<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="interactive-timeout"><a href="#interactive-timeout" class="headerlink" title="interactive_timeout"></a>interactive_timeout</h3><p>参数含义：服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。<br>参数默认值：28800秒（8小时）<br>官网文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_interactive_timeout" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_interactive_timeout</a></p>
<h3 id="wait-timeout"><a href="#wait-timeout" class="headerlink" title="wait_timeout"></a>wait_timeout</h3><p>参数含义：服务器关闭非交互连接之前等待活动的秒数。<br>在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。<br>参数默认值：28800秒（8小时）<br>官网文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_wait_timeout" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_wait_timeout</a></p>
<h3 id="sleep连接"><a href="#sleep连接" class="headerlink" title="sleep连接"></a>sleep连接</h3><p>参数含义：指processlist中Command类型为sleep的线程（线程正在等待客户端发送一个新的语句）<br>官网文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/show-processlist.html" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/show-processlist.html</a><br>          <a href="https://dev.mysql.com/doc/refman/5.6/en/thread-commands.html中介绍Sleep的含义是:The" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/thread-commands.html中介绍Sleep的含义是:The</a> thread is waiting for the client to send a new statement to it.</p>
<h3 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h3><p>参数含义：最大允许客户端同时连接的数量。当客户端连接数超过该值的时候就会报错：Too many connections！<br>官网文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connections" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_connections</a></p>
<h3 id="max-user-connections"><a href="#max-user-connections" class="headerlink" title="max_user_connections"></a>max_user_connections</h3><p>参数含义：允许任何给定的MySQL用户帐户的最大并发连接数。默认的值为0，意味着“没有限制”。<br>官网文档：<a href="https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_user_connections" target="_blank" rel="external">https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_max_user_connections</a></p>
<h3 id="以上参数对连接数的影响"><a href="#以上参数对连接数的影响" class="headerlink" title="以上参数对连接数的影响"></a>以上参数对连接数的影响</h3><p>MySQL所支持的最大连接数是有上限的，由参数max_connections控制。因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL处理完相应的操作后就断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，最终肯定会达到MySQL Server的连接上限数，这会报’too many connections’的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，可以进行适当的调整小些。</p>
<h3 id="调整参数"><a href="#调整参数" class="headerlink" title="调整参数"></a>调整参数</h3><p>调整前：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql_43 ~]# lxsql 3306 variables &apos;timeout&apos;</div><div class="line">+-----------------------------+----------+</div><div class="line">| Variable_name               | Value    |</div><div class="line">+-----------------------------+----------+</div><div class="line">| connect_timeout             | 10       |</div><div class="line">| delayed_insert_timeout      | 300      |</div><div class="line">| have_statement_timeout      | YES      |</div><div class="line">| innodb_flush_log_at_timeout | 1        |</div><div class="line">| innodb_lock_wait_timeout    | 5        |</div><div class="line">| innodb_rollback_on_timeout  | OFF      |</div><div class="line">| interactive_timeout         | 31536000 |</div><div class="line">| lock_wait_timeout           | 31536000 |</div><div class="line">| net_read_timeout            | 30       |</div><div class="line">| net_write_timeout           | 60       |</div><div class="line">| rpl_stop_slave_timeout      | 31536000 |</div><div class="line">| slave_net_timeout           | 3600     |</div><div class="line">| thread_pool_idle_timeout    | 60       |</div><div class="line">| wait_timeout                | 31536000 |</div><div class="line">+-----------------------------+----------+</div><div class="line">[root@mysql_43 ~]# lxsql 3306 connect</div><div class="line">+-------------+---------+----------+</div><div class="line">| USER        | command | COUNT(*) |</div><div class="line">+-------------+---------+----------+</div><div class="line">| rouser      | Sleep   |      124 |</div><div class="line">| system user | Connect |        2 |</div><div class="line">| root        | Sleep   |        1 |</div><div class="line">| root        | Query   |        1 |</div><div class="line">+-------------+---------+----------+</div></pre></td></tr></table></figure></p>
<p>调整命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; set global interactive_timeout=600;set global wait_timeout=600;</div><div class="line">记得修改配置文件：以防下次实例重启后恢复旧值</div><div class="line">[root@mysql_43 ~]# sed -i &apos;s/wait_timeout=31536000/wait_timeout=600/g;s/interactive_timeout=31536000/interactive_timeout=600/g&apos; /opt/mysql/my.cnf</div><div class="line">[root@mysql_43 ~]# cat /opt/mysql/my.cnf|grep &quot;timeout&quot;</div><div class="line">wait_timeout=600</div><div class="line">interactive_timeout=600</div></pre></td></tr></table></figure></p>
<p>看看是否调整成功：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql_43 ~]# xlsql 3306 variables &apos;timeout&apos;</div><div class="line">+-----------------------------+----------+</div><div class="line">| Variable_name               | Value    |</div><div class="line">+-----------------------------+----------+</div><div class="line">| connect_timeout             | 10       |</div><div class="line">| delayed_insert_timeout      | 300      |</div><div class="line">| have_statement_timeout      | YES      |</div><div class="line">| innodb_flush_log_at_timeout | 1        |</div><div class="line">| innodb_lock_wait_timeout    | 5        |</div><div class="line">| innodb_rollback_on_timeout  | OFF      |</div><div class="line">| interactive_timeout         | 600      |</div><div class="line">| lock_wait_timeout           | 31536000 |</div><div class="line">| net_read_timeout            | 30       |</div><div class="line">| net_write_timeout           | 60       |</div><div class="line">| rpl_stop_slave_timeout      | 31536000 |</div><div class="line">| slave_net_timeout           | 3600     |</div><div class="line">| thread_pool_idle_timeout    | 60       |</div><div class="line">| wait_timeout                | 600      |</div><div class="line">+-----------------------------+----------+</div></pre></td></tr></table></figure></p>
<p>过10分钟后，查看mysql的sleep连接有所降低：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql_43 ~]# xlsql 3306 connect</div><div class="line">+-------------+---------+----------+</div><div class="line">| USER        | command | COUNT(*) |</div><div class="line">+-------------+---------+----------+</div><div class="line">| rouser      | Sleep   |      106 |</div><div class="line">| system user | Connect |        2 |</div><div class="line">| root        | Query   |        1 |</div><div class="line">| rouser      | Query   |        1 |</div><div class="line">+-------------+---------+----------+</div><div class="line">[root@mysql_43 ~]#</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL性能调优技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL在线DDL工具之OAK]]></title>
      <url>http://riverdba.github.io/2017/04/20/online-ddl-tools-by-oak/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：openarkkit工具包中oak-online-alter-table的使用<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="什么是OAK"><a href="#什么是OAK" class="headerlink" title="什么是OAK"></a>什么是OAK</h3><p>openark工具包是一组由Python语言编写的用于MySQL的工具集。可以解决一些日常复杂或耗时的维护任务。<br>包括如下工具:<br>oak-apply-ri: apply referential integrity on two columns with parent-child relationship.<br>oak-block-account: block or release MySQL users accounts, disabling them or enabling them to login.<br>oak-chunk-update: perform long, non-blocking UPDATE/DELETE operation in auto managed small chunks.<br>oak-get-slave-lag: print slave replication lag and terminate with respective exit code.<br>oak-hook-general-log: hook up and filter general log entries based on entry type or execution plan criteria.<br>oak-kill-slow-queries: terminate long running queries.<br>oak-modify-charset: change the character set (and collation) of a textual column.<br>oak-online-alter-table: perform a non-blocking ALTER TABLE operation.<br>oak-prepare-shutdown: make for a fast and safe MySQL shutdown.<br>oak-purge-master-logs: purge master logs, depending on the state of replicating slaves.<br>oak-repeat-query: repeat query execution until some condition holds.<br>oak-security-audit: audit accounts, passwords, privileges and other security settings.<br>oak-show-limits: show AUTO_INCREMENT “free space”.<br>oak-show-replication-status: show how far behind are replicating slaves on a given master.</p>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">下载：</div><div class="line">[root@mysql1 src]# wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/openarkkit/openark-kit-196.tar.gz</div><div class="line">安装：</div><div class="line">[root@mysql1 src]# tar -zxvf openark-kit-196.tar.gz </div><div class="line">[root@mysql1 src]# cd openark-kit-196</div><div class="line">[root@mysql1 openark-kit-196]# python setup.py install</div><div class="line">查看安装好的系列工具集：</div><div class="line">[root@mysql1 openark-kit-196]# ll /usr/local/bin/oak*</div><div class="line">-rwxr-xr-x 1 root root 11020 Apr 20 10:27 /usr/local/bin/oak-apply-ri</div><div class="line">-rwxr-xr-x 1 root root 10999 Apr 20 10:27 /usr/local/bin/oak-block-account</div><div class="line">-rwxr-xr-x 1 root root 29490 Apr 20 10:27 /usr/local/bin/oak-chunk-update</div><div class="line">-rwxr-xr-x 1 root root  5501 Apr 20 10:27 /usr/local/bin/oak-get-slave-lag</div><div class="line">-rwxr-xr-x 1 root root 18181 Apr 20 10:27 /usr/local/bin/oak-hook-general-log</div><div class="line">-rwxr-xr-x 1 root root  6314 Apr 20 10:27 /usr/local/bin/oak-kill-slow-queries</div><div class="line">-rwxr-xr-x 1 root root  5630 Apr 20 10:27 /usr/local/bin/oak-modify-charset</div><div class="line">-rwxr-xr-x 1 root root 39192 Apr 20 10:27 /usr/local/bin/oak-online-alter-table</div><div class="line">-rwxr-xr-x 1 root root  7809 Apr 20 10:27 /usr/local/bin/oak-prepare-shutdown</div><div class="line">-rwxr-xr-x 1 root root 15045 Apr 20 10:27 /usr/local/bin/oak-purge-master-logs</div><div class="line">-rwxr-xr-x 1 root root  8371 Apr 20 10:27 /usr/local/bin/oak-repeat-query</div><div class="line">-rwxr-xr-x 1 root root 19312 Apr 20 10:27 /usr/local/bin/oak-security-audit</div><div class="line">-rwxr-xr-x 1 root root  5910 Apr 20 10:27 /usr/local/bin/oak-show-limits</div><div class="line">-rwxr-xr-x 1 root root  8654 Apr 20 10:27 /usr/local/bin/oak-show-replication-status</div></pre></td></tr></table></figure>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>1、检查被操作的表是否符合如下条件：</p>
<ul>
<li>单列唯一索引（联合索引和联合主键是不可以的，会触发mysql的一个bug）</li>
<li>没有外键</li>
<li>没有触发器（有的话要先删除，做完DDL再加上）<br>2、执行OAK命令<br>3、数据一致性校验<br>4、表切换<br>5、删除触发器<br>6、删除临时表<h3 id="在线DDL实操"><a href="#在线DDL实操" class="headerlink" title="在线DDL实操"></a>在线DDL实操</h3><h4 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# sysbench --test=/root/sysbench-0.5/sysbench/tests/db/insert.lua --oltp-table-size=1000000 --mysql-table-engine=innodb --mysql-user=root --mysql-passw</div><div class="line">ord=root123 --mysql-port=3306 --mysql-host=192.168.1.172 --mysql-db=jfedu --max-requests=0 --max-time=60 --oltp-tables-count=1 --report-interval=10 --num_threads=1 p</div><div class="line">repare</div><div class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</div><div class="line">Creating table &apos;sbtest1&apos;...</div><div class="line">Inserting 1000000 records into &apos;sbtest1&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest1&apos;...</div><div class="line">[root@mysql ~]# </div><div class="line">root@jfedu 01:20:08&gt;show create table sbtest1;</div><div class="line">+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Table   | Create Table                                                                                                                                                                                                                                                                                |</div><div class="line">+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| sbtest1 | CREATE TABLE `sbtest1` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `k` int(10) unsigned NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `c` char(120) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  `pad` char(60) NOT NULL DEFAULT &apos;&apos;,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `k_1` (`k`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1000001 DEFAULT CHARSET=utf8 MAX_ROWS=1000000 |</div><div class="line">+---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.02 sec)</div><div class="line">mysql&gt; select count(*) from sbtest1;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">|  1060893 |</div><div class="line">+----------+</div><div class="line">1 row in set (0.16 sec)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="检查是否符合在线DDL的条件"><a href="#检查是否符合在线DDL的条件" class="headerlink" title="检查是否符合在线DDL的条件"></a>检查是否符合在线DDL的条件</h4><p>根据表结构可以看出是符合单列唯一索引，且无外键的。通过下面SQL查看结果显示是没触发器的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@jfedu 01:47:30&gt;SELECT TRIGGER_SCHEMA,TRIGGER_NAME,EVENT_OBJECT_SCHEMA,EVENT_OBJECT_TABLE FROM information_schema.TRIGGERS WHERE event_object_schema= &apos;jfedu&apos;;</div><div class="line">Empty set (0.03 sec)</div><div class="line">root@jfedu 01:47:37&gt;</div></pre></td></tr></table></figure></p>
<h4 id="执行OAK命令，给表加字段"><a href="#执行OAK命令，给表加字段" class="headerlink" title="执行OAK命令，给表加字段"></a>执行OAK命令，给表加字段</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql1 ~]# oak-online-alter-table -u root --ask-pass -S /data/mysql/run/mysql.sock -d jfedu -t sbtest1 -g new_sbtest1 -a &quot;add last_update_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,add key last_update_time(last_update_time)&quot; --sleep=300 --skip-delete-pass</div><div class="line">OAK开跑后，开启一个会话向老表插入一条数据：</div><div class="line">mysql&gt; insert into sbtest1 values(20000000,2222222222,&apos;22222222222&apos;,&apos;ccc&apos;);</div><div class="line">Query OK, 1 row affected (0.02 sec)</div><div class="line">OAK执行完毕后：</div><div class="line">... ...</div><div class="line">-- Copying range (1059000), (1060000), progress: 99%</div><div class="line">-- + Will sleep for 0.3 seconds</div><div class="line">-- - Reminder: altering jfedu.sbtest1: add last_update_time timestamp...</div><div class="line">-- Copying range (1060000), (1060893), progress: 99%</div><div class="line">-- + Will sleep for 0.3 seconds</div><div class="line">-- Copying range 100% complete. Number of rows: 1060893</div><div class="line">-- Ghost table creation completed. Note that triggers on jfedu.sbtest1 were not removed</div></pre></td></tr></table></figure>
<p>可以看到只拷贝了1060893条数据，我们后来插入的数据有没有过去呢？</p>
<h4 id="数据一致性校验"><a href="#数据一致性校验" class="headerlink" title="数据一致性校验"></a>数据一致性校验</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; select count(*) from sbtest1 union all select count(*) from new_sbtest1;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">|  1060894 |</div><div class="line">|  1060894 |</div><div class="line">+----------+</div><div class="line">2 rows in set (0.87 sec)</div><div class="line">可以看到多了一条数据，说明我们后来插入的数据同步成功了。看看表结构：</div><div class="line">mysql&gt; desc sbtest1;</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">| Field | Type             | Null | Key | Default | Extra          |</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">| id    | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</div><div class="line">| k     | int(10) unsigned | NO   | MUL | 0       |                |</div><div class="line">| c     | char(120)        | NO   |     |         |                |</div><div class="line">| pad   | char(60)         | NO   |     |         |                |</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line">mysql&gt; desc new_sbtest1;</div><div class="line">+------------------+------------------+------+-----+-------------------+-----------------------------+</div><div class="line">| Field            | Type             | Null | Key | Default           | Extra                       |</div><div class="line">+------------------+------------------+------+-----+-------------------+-----------------------------+</div><div class="line">| id               | int(10) unsigned | NO   | PRI | NULL              | auto_increment              |</div><div class="line">| k                | int(10) unsigned | NO   | MUL | 0                 |                             |</div><div class="line">| c                | char(120)        | NO   |     |                   |                             |</div><div class="line">| pad              | char(60)         | NO   |     |                   |                             |</div><div class="line">| last_update_time | timestamp        | NO   | MUL | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</div><div class="line">+------------------+------------------+------+-----+-------------------+-----------------------------+</div><div class="line">5 rows in set (0.00 sec)</div><div class="line">可以看到我们加的字段已经出现在新表上面了。</div></pre></td></tr></table></figure>
<h4 id="验证一个疑问"><a href="#验证一个疑问" class="headerlink" title="验证一个疑问"></a>验证一个疑问</h4><p>用oak执行完ddl后，尚未rename的时候，在老表上做DML操作是否会同步到新表？<br>1、在老表插入数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; select count(*) from sbtest1 union all select count(*) from new_sbtest1;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">|  1060894 |</div><div class="line">|  1060894 |</div><div class="line">+----------+</div><div class="line">2 rows in set (0.87 sec)</div><div class="line">插入一条数据：</div><div class="line">mysql&gt; insert into sbtest1 values(20000001,3333333,&apos;333333&apos;,&apos;ccc&apos;);                      </div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line">mysql&gt; select count(*) from sbtest1 union all select count(*) from new_sbtest1;</div><div class="line">+----------+</div><div class="line">| count(*) |</div><div class="line">+----------+</div><div class="line">|  1060895 |</div><div class="line">|  1060895 |</div><div class="line">+----------+</div><div class="line">2 rows in set (0.30 sec)</div><div class="line">可以看到新表和旧表都新增了一条数据。</div><div class="line">mysql&gt; select sum(crc32(concat(ifnull(id,&apos;NULL&apos;),ifnull(k,&apos;NULL&apos;)))) as sum from sbtest1 union all select sum(crc32(concat(ifnull(id,&apos;NULL&apos;),ifnull(k,&apos;NULL&apos;)))) as sum from new_sbtest1;</div><div class="line">+------------------+</div><div class="line">| sum              |</div><div class="line">+------------------+</div><div class="line">| 2278342522965511 |</div><div class="line">| 2278342522965511 |</div><div class="line">+------------------+</div><div class="line">2 rows in set (0.67 sec)</div></pre></td></tr></table></figure></p>
<p>2、在老表修改数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@jfedu 02:27:51&gt;select * from sbtest1 limit 1;</div><div class="line">+----+--------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">| id | k      | c                                                                                                                       | pad                                                         |</div><div class="line">+----+--------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">|  1 | 501885 | 08566691963-88624912351-16662227201-46648573979-64646226163-77505759394-75470094713-41097360717-15161106334-50535565977 | 63188288836-92351140030-06390587585-66802097351-49282961843 |</div><div class="line">+----+--------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line">root@jfedu 02:28:05&gt;update sbtest1 set k=11111 where id=1;</div><div class="line">Query OK, 1 row affected (0.01 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line">root@jfedu 02:29:37&gt;select * from sbtest1 where id=1;</div><div class="line">+----+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">| id | k     | c                                                                                                                       | pad                                                         |</div><div class="line">+----+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">|  1 | 11111 | 08566691963-88624912351-16662227201-46648573979-64646226163-77505759394-75470094713-41097360717-15161106334-50535565977 | 63188288836-92351140030-06390587585-66802097351-49282961843 |</div><div class="line">+----+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@jfedu 02:30:06&gt;select * from new_sbtest1 where id=1;</div><div class="line">+----+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+---------------------+</div><div class="line">| id | k     | c                                                                                                                       | pad                                                         | last_update_time    |</div><div class="line">+----+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+---------------------+</div><div class="line">|  1 | 11111 | 08566691963-88624912351-16662227201-46648573979-64646226163-77505759394-75470094713-41097360717-15161106334-50535565977 | 63188288836-92351140030-06390587585-66802097351-49282961843 | 2017-04-20 14:28:47 |</div><div class="line">+----+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+---------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@jfedu 02:30:13&gt;exit</div><div class="line">Bye</div></pre></td></tr></table></figure></p>
<p>可以看出在老表中的插入和更新操作都被同步到了新表。这是由OAK创建的三个触发器来实现的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT TRIGGER_SCHEMA,TRIGGER_NAME,EVENT_OBJECT_SCHEMA,EVENT_OBJECT_TABLE FROM information_schema.TRIGGERS WHERE event_object_schema= &apos;jfedu&apos;;</div><div class="line">+----------------+----------------+---------------------+--------------------+</div><div class="line">| TRIGGER_SCHEMA | TRIGGER_NAME   | EVENT_OBJECT_SCHEMA | EVENT_OBJECT_TABLE |</div><div class="line">+----------------+----------------+---------------------+--------------------+</div><div class="line">| jfedu          | sbtest1_AI_oak | jfedu               | sbtest1            |</div><div class="line">| jfedu          | sbtest1_AU_oak | jfedu               | sbtest1            |</div><div class="line">| jfedu          | sbtest1_AD_oak | jfedu               | sbtest1            |</div><div class="line">+----------------+----------------+---------------------+--------------------+</div><div class="line">3 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>看看这三个触发器的内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@jfedu 02:26:24&gt;show create trigger sbtest1_AI_oak;</div><div class="line">+----------------+------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">| Trigger        | sql_mode               | SQL Original Statement                                                                                                                                                                                                              | character_set_client | collation_connection | Database Collation |</div><div class="line">+----------------+------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">| sbtest1_AI_oak | NO_ENGINE_SUBSTITUTION | CREATE DEFINER=`root`@`localhost` TRIGGER jfedu.sbtest1_AI_oak AFTER INSERT ON jfedu.sbtest1</div><div class="line">        FOR EACH ROW</div><div class="line">            REPLACE INTO jfedu.new_sbtest1 (`c`, `pad`, `k`, `id`) VALUES (NEW.`c`, NEW.`pad`, NEW.`k`, NEW.`id`) | utf8                 | utf8_general_ci      | utf8_general_ci    |</div><div class="line">+----------------+------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line">触发器sbtest1_AI_oak负责将老表的insert操作同步到新表</div><div class="line">root@jfedu 02:26:41&gt;show create trigger sbtest1_AU_oak; </div><div class="line">+----------------+------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">| Trigger        | sql_mode               | SQL Original Statement                                                                                                                                                                                                                                                                                                          | character_set_client | collation_connection | Database Collation |</div><div class="line">+----------------+------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">| sbtest1_AU_oak | NO_ENGINE_SUBSTITUTION | CREATE DEFINER=`root`@`localhost` TRIGGER jfedu.sbtest1_AU_oak AFTER UPDATE ON jfedu.sbtest1</div><div class="line">        FOR EACH ROW</div><div class="line">        BEGIN</div><div class="line">            DELETE FROM jfedu.new_sbtest1 WHERE (id) = (OLD.id);</div><div class="line">            REPLACE INTO jfedu.new_sbtest1 (`c`, `pad`, `k`, `id`) VALUES (NEW.`c`, NEW.`pad`, NEW.`k`, NEW.`id`);</div><div class="line">        END | utf8                 | utf8_general_ci      | utf8_general_ci    |</div><div class="line">+----------------+------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">触发器sbtest1_AU_oak负责将老表的update操作同步到新表</div><div class="line">root@jfedu 02:27:22&gt;show create trigger sbtest1_AD_oak; </div><div class="line">+----------------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">| Trigger        | sql_mode               | SQL Original Statement                                                                                                                                                            | character_set_client | collation_connection | Database Collation |</div><div class="line">+----------------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">| sbtest1_AD_oak | NO_ENGINE_SUBSTITUTION | CREATE DEFINER=`root`@`localhost` TRIGGER jfedu.sbtest1_AD_oak AFTER DELETE ON jfedu.sbtest1</div><div class="line">        FOR EACH ROW</div><div class="line">            DELETE FROM jfedu.new_sbtest1 WHERE (id) = (OLD.id) | utf8                 | utf8_general_ci      | utf8_general_ci    |</div><div class="line">+----------------+------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+--------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">触发器sbtest1_AD_oak负责将老表的delete操作同步到新表</div></pre></td></tr></table></figure></p>
<p>也就是说在我们rename切换表之前，对旧表的任何增、删、改操作都会同步到新表！</p>
<h4 id="表切换"><a href="#表切换" class="headerlink" title="表切换"></a>表切换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; rename table sbtest1 to old_sbtest1,new_sbtest1 to sbtest1;</div><div class="line">Query OK, 0 rows affected (0.09 sec)</div><div class="line">mysql&gt; drop trigger sbtest1_AI_oak;drop trigger sbtest1_AU_oak;drop trigger sbtest1_AD_oak;</div><div class="line">Query OK, 0 rows affected (0.03 sec)</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">mysql&gt; drop table old_sbtest1;</div><div class="line">Query OK, 0 rows affected (0.08 sec)</div><div class="line">mysql&gt; desc sbtest1;</div><div class="line">+------------------+------------------+------+-----+-------------------+-----------------------------+</div><div class="line">| Field            | Type             | Null | Key | Default           | Extra                       |</div><div class="line">+------------------+------------------+------+-----+-------------------+-----------------------------+</div><div class="line">| id               | int(10) unsigned | NO   | PRI | NULL              | auto_increment              |</div><div class="line">| k                | int(10) unsigned | NO   | MUL | 0                 |                             |</div><div class="line">| c                | char(120)        | NO   |     |                   |                             |</div><div class="line">| pad              | char(60)         | NO   |     |                   |                             |</div><div class="line">| last_update_time | timestamp        | NO   | MUL | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</div><div class="line">+------------------+------------------+------+-----+-------------------+-----------------------------+</div><div class="line">5 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
<p>在切换表之前，触发器一定不能删掉，否则数据就会不一致的！</p>
<h3 id="遇到问题及解决"><a href="#遇到问题及解决" class="headerlink" title="遇到问题及解决"></a>遇到问题及解决</h3><p>1、安装MySQLdb遇到的问题<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql1 openark-kit-196]# oak-online-alter-table --help</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;/usr/local/bin/oak-online-alter-table&quot;, line 21, in &lt;module&gt;</div><div class="line">    import MySQLdb</div><div class="line">ImportError: No module named MySQLdb</div><div class="line">[root@mysql1 openark-kit-196]# pip install MySQL-python</div><div class="line">&gt;&gt;&gt; import MySQLdb</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/__init__.py&quot;, line 19, in &lt;module&gt;</div><div class="line">    import _mysql</div><div class="line">ImportError: libperconaserverclient.so.18: cannot open shared object file: No such file or directory</div><div class="line">&gt;&gt;&gt; exit()</div><div class="line">[root@mysql1 openark-kit-196]# find / -name &quot;libperconaserverclient*&quot;</div><div class="line">没找到libperconaserverclient相关包，需要安装mysql-devel：</div><div class="line">[root@mysql1 openark-kit-196]# yum -y install mysql-devel</div><div class="line">[root@mysql1 openark-kit-196]# ln -s /opt/mysql/lib/libmysqlclient.so.18 /usr/lib64/libmysqlclient.so.18</div><div class="line">[root@mysql1 openark-kit-196]# ln -s /usr/local/mysql/lib/libperconaserverclient_r.so.18 /usr/lib64</div><div class="line">[root@mysql1 openark-kit-196]# ln -s /usr/local/mysql/lib/libperconaserverclient_r.so /usr/lib64</div><div class="line">[root@mysql1 openark-kit-196]# ldconfig</div><div class="line">[root@mysql1 openark-kit-196]# python</div><div class="line">Python 2.7.10 (default, Jan 20 2016, 16:07:05) </div><div class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-16)] on linux2</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; import MySQLdb</div><div class="line">&gt;&gt;&gt; exit()</div><div class="line">[root@mysql1 openark-kit-196]# oak-online-alter-table --help</div><div class="line">Usage: oak-online-alter-table [options]</div><div class="line"></div><div class="line">Options:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  -u USER, --user=USER  MySQL user</div><div class="line">  -H HOST, --host=HOST  MySQL host (default: localhost)</div><div class="line">  -p PASSWORD, --password=PASSWORD</div><div class="line">                        MySQL password</div><div class="line">  --ask-pass            Prompt for password</div><div class="line">  -P PORT, --port=PORT  TCP/IP port (default: 3306)</div><div class="line">  -S SOCKET, --socket=SOCKET</div><div class="line">                        MySQL socket file. Only applies when host is localhost</div><div class="line">  --defaults-file=DEFAULTS_FILE</div><div class="line">                        Read from MySQL configuration file. Overrides all</div><div class="line">                        other options</div><div class="line">  -d DATABASE, --database=DATABASE</div><div class="line">                        Database name (required unless table is fully</div><div class="line">                        qualified)</div><div class="line">  -t TABLE, --table=TABLE</div><div class="line">                        Table to alter (optionally fully qualified)</div><div class="line">  -g GHOST, --ghost=GHOST</div><div class="line">                        Table name to serve as ghost. This table will be</div><div class="line">                        created and synchronized with the original table</div><div class="line">  -a ALTER_STATEMENT, --alter=ALTER_STATEMENT</div><div class="line">                        Comma delimited ALTER statement details, excluding the</div><div class="line">                        &apos;ALTER TABLE t&apos; itself</div><div class="line">  -c CHUNK_SIZE, --chunk-size=CHUNK_SIZE</div><div class="line">                        Number of rows to act on in chunks. Default: 1000</div><div class="line">  -l, --lock-chunks     Use LOCK TABLES for each chunk</div><div class="line">  -N, --skip-binlog     Disable binary logging</div><div class="line">  -r MAX_LOCK_RETRIES, --max-lock-retries=MAX_LOCK_RETRIES</div><div class="line">                        Maximum times to retry on deadlock or</div><div class="line">                        lock_wait_timeout. (default: 10; 0 is unlimited)</div><div class="line">  --skip-delete-pass    Do not execute the DELETE data pass</div><div class="line">  --sleep=SLEEP_MILLIS  Number of milliseconds to sleep between chunks.</div><div class="line">                        Default: 0</div><div class="line">  --sleep-ratio=SLEEP_RATIO</div><div class="line">                        Ratio of sleep time to execution time. Default: 0</div><div class="line">  --cleanup             Remove custom triggers, ghost table from possible</div><div class="line">                        previous runs</div><div class="line">  -v, --verbose         Print user friendly messages</div><div class="line">  -q, --quiet           Quiet mode, do not verbose</div><div class="line">[root@mysql1 openark-kit-196]#</div></pre></td></tr></table></figure></p>
<p>2、用oak做Online DDL,如果rename那一步操作错了？不小心在从库上做rename了怎么恢复？（包含旧表删除和trigger删除）<br>可以使用oak在主库再做一遍，因为从库已经做过了因此要加一个参数–skip-binlog来关闭binlog写入。这样主库的操作就不会复制到从库，避免主从复制异常！</p>
]]></content>
      
        <categories>
            
            <category> TOOLS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> online ddl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将hive输出文件导入mycat]]></title>
      <url>http://riverdba.github.io/2017/04/19/hive2mycat/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：将hive输出的文件导入mycat<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>hadoop服务器上有个定时任务，每天凌晨通过hive输出运算结果，需要将结果数据导入mycat中。</p>
<h3 id="分析Hive输出文件"><a href="#分析Hive输出文件" class="headerlink" title="分析Hive输出文件"></a>分析Hive输出文件</h3><p>hive输出的文件格式如下：<br><img src="/2017/04/19/hive2mycat/1.png" alt="图1"><br>每行数据的字段分隔符看上去是个小方块，vi进去后看到是^A:<br><img src="/2017/04/19/hive2mycat/2.png" alt="图2"><br>这个符号很容易被误认为是键盘6上面那个倒尖括号和大写字母A组成的，其实是通过按crtl+v+a才可以正确的输出该符号。    </p>
<h3 id="导入MyCAT"><a href="#导入MyCAT" class="headerlink" title="导入MyCAT"></a>导入MyCAT</h3><p><img src="/2017/04/19/hive2mycat/3.png" alt="图3"><br>到数据库中查看导入的数据：<br><img src="/2017/04/19/hive2mycat/4.png" alt="图4"><br>如果字段分割符不对，导入mycat时会报错</p>
<pre><code>命令行报错：
ERROR 2013 (HY000) at line 1: Lost connection to MySQL server during query
mycat日志报错：
04/18 19:28:21.432  ERROR [$_NIOREACTOR-3-RW] (FrontendConnection.java:270) -load data error
java.lang.StringIndexOutOfBoundsException: String index out of range: 0
        at java.lang.String.charAt(String.java:658)
        at org.opencloudb.server.handler.ServerLoadDataInfileHandler.end(ServerLoadDataInfileHandler.java:623)
        at org.opencloudb.net.FrontendConnection.loadDataInfileEnd(FrontendConnection.java:268)
        at org.opencloudb.net.FrontendConnection.rawHandle(FrontendConnection.java:426)
        at org.opencloudb.net.FrontendConnection.handle(FrontendConnection.java:417)
        at org.opencloudb.net.AbstractConnection.onReadData(AbstractConnection.java:313)
        at org.opencloudb.net.NIOSocketWR.asynRead(NIOSocketWR.java:186)
        at org.opencloudb.net.AbstractConnection.asynRead(AbstractConnection.java:274)
        at org.opencloudb.net.NIOReactor$RW.run(NIOReactor.java:96)
        at java.lang.Thread.run(Thread.java:745)
</code></pre>]]></content>
      
        <categories>
            
            <category> MyCAT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[archer安装及使用]]></title>
      <url>http://riverdba.github.io/2017/04/15/archer-install/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：基于inception的自动化SQL操作平台<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="开发语言和推荐环境"><a href="#开发语言和推荐环境" class="headerlink" title="开发语言和推荐环境"></a>开发语言和推荐环境</h3><p>python：3.4<br>django：1.8<br>mysql : 5.6及以上<br>linux : 64位linux操作系统均可</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>1、克隆代码到本地: git clone <a href="https://github.com/jly8866/archer.git" target="_blank" rel="external">https://github.com/jly8866/archer.git</a> 或 下载zip包<br>2、安装mysql 5.6实例，请注意保证mysql数据库默认字符集为utf8或utf8mb4<br>3、安装inception</p>
<h3 id="安装所需软件和模块"><a href="#安装所需软件和模块" class="headerlink" title="安装所需软件和模块"></a>安装所需软件和模块</h3><h4 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /src</div><div class="line">wget https://www.python.org/ftp/python/3.4.1/Python-3.4.1.tgz</div><div class="line">mkdir -p /opt/python3 </div><div class="line">tar -zxvf Python-3.4.1.tgz   </div><div class="line">cd Python-3.4.1  </div><div class="line">./configure --prefix=/opt/python3 &amp;&amp; make &amp;&amp; make install </div><div class="line">将/opt/python3/bin加入环境变量</div><div class="line">[root@mysql3]# python3</div><div class="line">Python 3.4.1 (default, Apr 15 2017, 14:11:11) </div><div class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)] on linux</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; exit()</div></pre></td></tr></table></figure>
<h4 id="安装setuptools"><a href="#安装setuptools" class="headerlink" title="安装setuptools"></a>安装setuptools</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 ~]# wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26</div><div class="line">[root@mysql3 ~]# tar -zxvf setuptools-19.6.tar.gz </div><div class="line">[root@mysql3 ~]# cd setuptools-19.6</div><div class="line">[root@mysql3 setuptools-19.6]# python3 setup.py build</div><div class="line">[root@mysql3 setuptools-19.6]# python3 setup.py install</div><div class="line">... ...</div><div class="line">creating &apos;dist/setuptools-19.6-py3.4.egg&apos; and adding &apos;build/bdist.linux-x86_64/egg&apos; to it</div><div class="line">removing &apos;build/bdist.linux-x86_64/egg&apos; (and everything under it)</div><div class="line">Processing setuptools-19.6-py3.4.egg</div><div class="line">Copying setuptools-19.6-py3.4.egg to /opt/python3/lib/python3.4/site-packages</div><div class="line">Adding setuptools 19.6 to easy-install.pth file</div><div class="line">Installing easy_install script to /opt/python3/bin</div><div class="line">Installing easy_install-3.4 script to /opt/python3/bin</div><div class="line"></div><div class="line">Installed /opt/python3/lib/python3.4/site-packages/setuptools-19.6-py3.4.egg</div><div class="line">Processing dependencies for setuptools==19.6</div><div class="line">Finished processing dependencies for setuptools==19.6</div><div class="line">可以看到安装到python3下面了</div></pre></td></tr></table></figure>
<h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 ~]# wget --no-check-certificate  https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eeb</div><div class="line">[root@mysql3 ~]# tar -zxvf pip-8.0.2.tar.gz </div><div class="line">[root@mysql3 ~]# cd pip-8.0.2</div><div class="line">[root@mysql3 pip-8.0.2]# python3 setup.py build</div><div class="line">[root@mysql3 pip-8.0.2]# python3 setup.py install</div><div class="line">... ...</div><div class="line">creating &apos;dist/pip-8.0.2-py3.4.egg&apos; and adding &apos;build/bdist.linux-x86_64/egg&apos; to it</div><div class="line">removing &apos;build/bdist.linux-x86_64/egg&apos; (and everything under it)</div><div class="line">Processing pip-8.0.2-py3.4.egg</div><div class="line">creating /opt/python3/lib/python3.4/site-packages/pip-8.0.2-py3.4.egg</div><div class="line">Extracting pip-8.0.2-py3.4.egg to /opt/python3/lib/python3.4/site-packages</div><div class="line">Adding pip 8.0.2 to easy-install.pth file</div><div class="line">Installing pip3 script to /opt/python3/bin</div><div class="line">Installing pip3.4 script to /opt/python3/bin</div><div class="line">Installing pip script to /opt/python3/bin</div><div class="line"></div><div class="line">Installed /opt/python3/lib/python3.4/site-packages/pip-8.0.2-py3.4.egg</div><div class="line">Processing dependencies for pip==8.0.2</div><div class="line">Finished processing dependencies for pip==8.0.2</div></pre></td></tr></table></figure>
<h4 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h4><p>使用pip3安装：pip3 install Django==1.8.17<br>或者单独下载安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 ~]# wget https://pypi.python.org/packages/44/41/bf93934082e9897a56a591a67bacbd9fb74e71244f3f42253432a9e627e6/Django-1.8.17.tar.gz#md5=e76842cdfbcb31286bd44f51e087a04c</div><div class="line">[root@mysql3 ~]# tar -zxvf Django-1.8.17.tar.gz </div><div class="line">[root@mysql3 ~]# cd Django-1.8.17</div><div class="line">[root@mysql3 Django-1.8.17]# python3 setup.py install</div><div class="line">[root@mysql3 Django-1.8.17]# python3</div><div class="line">Python 3.4.1 (default, Apr 15 2017, 14:11:11) </div><div class="line">[GCC 4.4.7 20120313 (Red Hat 4.4.7-18)] on linux</div><div class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</div><div class="line">&gt;&gt;&gt; django.VERSION</div><div class="line">(1, 8, 17, &apos;final&apos;, 0)</div><div class="line">&gt;&gt;&gt; exit()</div></pre></td></tr></table></figure></p>
<h4 id="安装Crypto和pymysql"><a href="#安装Crypto和pymysql" class="headerlink" title="安装Crypto和pymysql"></a>安装Crypto和pymysql</h4><p>[root@mysql3 ~]# pip3 install Crypto<br>[root@mysql3 ~]# pip3 install pycrypto<br>[root@mysql3 ~]# pip3 install pymysql<br>[root@mysql3 ~]# vi /opt/python3/lib/python3.4/site-packages/pymysql/connections.py<br>在if int(self.server_version.split(‘.’, 1)[0]) &gt;= 5: 这一行之前加上以下这一句并保存，记得别用tab键用4个空格缩进：<br>self.server_version = ‘5.6.24-72.2-log’<br>修改后如下图：<br><img src="/2017/04/15/archer-install/pymysql.png" alt="图1"></p>
<h3 id="配置archer"><a href="#配置archer" class="headerlink" title="配置archer"></a>配置archer</h3><p>1、将archer-master源码解压到/opt/archer目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 archer-master]# mkdir -p /opt/archer</div><div class="line">[root@mysql3 archer-master]# scp -r /src/archer-master /opt/archer/</div><div class="line">[root@mysql3 archer-master]# cd /opt/archer/</div><div class="line">[root@mysql3 archer]# ls</div><div class="line">archer  debug.sh  docs  manage.py  README.md  requirements.txt  screenshots  sql  startup.sh  stop.sh</div></pre></td></tr></table></figure></p>
<p>2、创建archer DB和inception DB<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@(none) 04:04:54&gt;create database archer;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">root@(none) 04:05:12&gt;grant all on archer.* to archer_rw@&apos;%&apos; identified by &apos;archer_rw&apos;;</div><div class="line">Query OK, 0 rows affected (0.03 sec)</div><div class="line">root@(none) 04:06:42&gt;flush privileges;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div><div class="line">root@(none) 04:13:39&gt;create database inception_db;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">root@(none) 04:13:46&gt;grant all on inception_db.* to incep_rw@&apos;%&apos; identified by &apos;incep_rw&apos;;                    </div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@(none) 04:14:23&gt;flush privileges;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>3、修改/opt/archer/archer/settings.py，如下内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#该项目本身的mysql数据库地址</div><div class="line">DATABASES = &#123;</div><div class="line">    &apos;default&apos;: &#123;</div><div class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class="line">        &apos;NAME&apos;: &apos;archer&apos;,</div><div class="line">        &apos;USER&apos;: &apos;archer_rw&apos;,</div><div class="line">        &apos;PASSWORD&apos;: &apos;archer_rw&apos;,</div><div class="line">        &apos;HOST&apos;: &apos;192.168.1.3&apos;,</div><div class="line">        &apos;PORT&apos;: &apos;3306&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">#inception组件所在的地址</div><div class="line">INCEPTION_HOST = &apos;192.168.1.123&apos;</div><div class="line">INCEPTION_PORT = &apos;6669&apos;</div><div class="line">#查看回滚SQL时候会用到，这里要告诉archer去哪个mysql里读取inception备份的回滚信息和SQL.</div><div class="line">#注意这里要和inception组件的inception.conf里的inception_remote_XX部分保持一致.</div><div class="line">INCEPTION_REMOTE_BACKUP_HOST=&apos;192.168.1.3&apos;</div><div class="line">INCEPTION_REMOTE_BACKUP_PORT=3306</div><div class="line">INCEPTION_REMOTE_BACKUP_USER=&apos;incep_rw&apos;</div><div class="line">INCEPTION_REMOTE_BACKUP_PASSWORD=&apos;incep_rw&apos;</div></pre></td></tr></table></figure></p>
<p>4、通过model创建archer本身的数据库表<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3]# cd /opt/archer</div><div class="line">[root@mysql3 archer]# python3 manage.py makemigrations</div><div class="line">No changes detected</div><div class="line">[root@mysql3 archer]# python3 manage.py makemigrations sql</div><div class="line">Migrations for &apos;sql&apos;:</div><div class="line">  0001_initial.py:</div><div class="line">    - Create model users</div><div class="line">    - Create model master_config</div><div class="line">    - Create model workflow</div><div class="line">[root@mysql3 archer]# python3 manage.py migrate</div><div class="line">Operations to perform:</div><div class="line">  Synchronize unmigrated apps: messages, staticfiles</div><div class="line">  Apply all migrations: sessions, auth, contenttypes, sql, admin</div><div class="line">Synchronizing apps without migrations:</div><div class="line">  Creating tables...</div><div class="line">    Running deferred SQL...</div><div class="line">  Installing custom SQL...</div><div class="line">Running migrations:</div><div class="line">  Rendering model states... DONE</div><div class="line">  Applying contenttypes.0001_initial... OK</div><div class="line">  Applying contenttypes.0002_remove_content_type_name... OK</div><div class="line">  Applying auth.0001_initial... OK</div><div class="line">  Applying auth.0002_alter_permission_name_max_length... OK</div><div class="line">  Applying auth.0003_alter_user_email_max_length... OK</div><div class="line">  Applying auth.0004_alter_user_username_opts... OK</div><div class="line">  Applying auth.0005_alter_user_last_login_null... OK</div><div class="line">  Applying auth.0006_require_contenttypes_0002... OK</div><div class="line">  Applying sql.0001_initial... OK</div><div class="line">  Applying admin.0001_initial... OK</div><div class="line">  Applying sessions.0001_initial... OK</div><div class="line">查看表是否创建成功：  </div><div class="line">[root@mysql3 archer]# mysql -uarcher_rw -parcher_rw -h192.168.1.3 -P3306 -Darcher -e &quot;show tables;&quot;</div><div class="line">Warning: Using a password on the command line interface can be insecure.</div><div class="line">+----------------------------+</div><div class="line">| Tables_in_archer           |</div><div class="line">+----------------------------+</div><div class="line">| auth_group                 |</div><div class="line">| auth_group_permissions     |</div><div class="line">| auth_permission            |</div><div class="line">| django_admin_log           |</div><div class="line">| django_content_type        |</div><div class="line">| django_migrations          |</div><div class="line">| django_session             |</div><div class="line">| sql_master_config          |</div><div class="line">| sql_users                  |</div><div class="line">| sql_users_groups           |</div><div class="line">| sql_users_user_permissions |</div><div class="line">| sql_workflow               |</div><div class="line">+----------------------------+</div></pre></td></tr></table></figure></p>
<p>5、创建django admin管理员<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 archer]# python3 manage.py createsuperuser</div><div class="line">Username: admin</div><div class="line">Email address: river_dba@foxmail.com</div><div class="line">Password: admin123</div><div class="line">Password (again): admin123</div><div class="line">Superuser created successfully.</div><div class="line">该用户可以登录django admin来管理model。</div></pre></td></tr></table></figure></p>
<h3 id="启动acher"><a href="#启动acher" class="headerlink" title="启动acher"></a>启动acher</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 archer]# vi debug.sh </div><div class="line">#!/bin/bash</div><div class="line">python3 manage.py runserver 0.0.0.0:9123</div><div class="line">[root@mysql3 archer]# sh debug.sh </div><div class="line">Performing system checks...</div><div class="line"></div><div class="line">System check identified no issues (0 silenced).</div><div class="line">April 15, 2017 - 16:39:11</div><div class="line">Django version 1.8.17, using settings &apos;archer.settings&apos;</div><div class="line">Starting development server at http://0.0.0.0:9123/</div><div class="line">Quit the server with CONTROL-C.</div></pre></td></tr></table></figure>
<h3 id="创建archer系统登录用户"><a href="#创建archer系统登录用户" class="headerlink" title="创建archer系统登录用户"></a>创建archer系统登录用户</h3><p>通过浏览器访问<a href="http://192.168.1.123:9123/admin/sql/users/" target="_blank" rel="external">http://192.168.1.123:9123/admin/sql/users/</a><br>可以看到django登录界面：<br><img src="/2017/04/15/archer-install/django_login.png" alt="图2"><br>使用上面第5步创建的用户名密码（admin/admin123）登录：<br><img src="/2017/04/15/archer-install/3.png" alt="图3"><br>点击右侧Add用户配置，用户名密码自定义，至少创建一个工程师和一个审核人（用admin用户可以登录）后续新的工程师和审核人用户请用LDAP导入sql_users表或django admin增加<br><img src="/2017/04/15/archer-install/4.png" alt="图4"></p>
<h3 id="配置主库地址"><a href="#配置主库地址" class="headerlink" title="配置主库地址"></a>配置主库地址</h3><p>通过浏览器访问<a href="http://192.168.1.123:9123/admin/sql/master_config" target="_blank" rel="external">http://192.168.1.123:9123/admin/sql/master_config</a><br>点击右侧Add master_config。这一步是为了告诉archer你要用inception去哪些mysql主库里执行SQL，所用到的用户名密码、端口等。<br><img src="/2017/04/15/archer-install/5.png" alt="图5"><br><img src="/2017/04/15/archer-install/6.png" alt="图6"></p>
<h3 id="正式访问主页"><a href="#正式访问主页" class="headerlink" title="正式访问主页"></a>正式访问主页</h3><p><a href="http://192.168.1.123:9123/login/" target="_blank" rel="external">http://192.168.1.123:9123/login/</a><br><img src="/2017/04/15/archer-install/7.png" alt="图7"><br>登录成功后：<br><img src="/2017/04/15/archer-install/8.png" alt="图8"></p>
<h3 id="遇到问题及解决"><a href="#遇到问题及解决" class="headerlink" title="遇到问题及解决"></a>遇到问题及解决</h3><h4 id="查看回滚SQL时报错"><a href="#查看回滚SQL时报错" class="headerlink" title="查看回滚SQL时报错"></a>查看回滚SQL时报错</h4><p><img src="/2017/04/15/archer-install/error1.png" alt="图9"><br>debug日志报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[18/Apr/2017 11:49:50] &quot;GET /detail/2/ HTTP/1.1&quot; 200 7474</div><div class="line">Mysql Error 1142: SELECT command denied to user &apos;incep_rw&apos;@&apos;192.168.1.123&apos; for table &apos;$_$inception_backup_information$_$&apos;</div><div class="line">Error: returned listTables more than 1.</div><div class="line">[18/Apr/2017 11:50:01] &quot;GET /rollback/?csrfmiddlewaretoken=8s6iaPsMtgX1Qvd0lf8vDOXe0K9hPecp&amp;workflowid=2 HTTP/1.1&quot; 500 73965</div></pre></td></tr></table></figure></p>
<p>解决办法：给incep_rw用户赋予select、create、insert权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@mysql 04:42:04&gt;grant select,create,insert on *.* to incep_rw@&apos;%&apos; identified by &apos;incep_rw&apos;;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@mysql 04:54:23&gt;flush privileges;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>CREATE权限用于创建表或者库的，INSERT权限用于插入备份数据的,SELECT权限用于查询回滚SQL。<br>再次执行update语句，查看回滚SQL为空，审核结果显示：<br><img src="/2017/04/15/archer-install/9.png" alt="图9"><br>解决办法：为mysql添加server_id</p>
]]></content>
      
        <categories>
            
            <category> TOOLS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL审核工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Inception安装及使用]]></title>
      <url>http://riverdba.github.io/2017/04/13/inception-install/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：Inception安装<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>源码地址：<a href="https://github.com/mysql-inception/inception" target="_blank" rel="external">https://github.com/mysql-inception/inception</a><br>参考文档：<a href="http://mysql-inception.github.io/inception-document/install/" target="_blank" rel="external">http://mysql-inception.github.io/inception-document/install/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、安装相关依赖包<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install bison ncurses-libs libncurses5-dev ncurses-devel cmake openssl gcc-c++ -y</div></pre></td></tr></table></figure></p>
<p>2、安装inception<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">unzip inception-master.zip</div><div class="line">cd inception-master</div><div class="line">sh inception_build.sh debug</div></pre></td></tr></table></figure></p>
<p>debug就是编译目录，编译后所有的生成文件都在这个目录下面，包括可执行文件Inception。可执行文件在debug/sql目录下面：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 sql]# pwd</div><div class="line">/src/inception-master/debug/sql</div><div class="line">[root@mysql3 sql]# ls</div><div class="line">CMakeFiles           dummy.bak     Inception   libbinlog.a  librpl.a    libsql.a          Makefile  sql_builtin.cc  sql_yacc.h</div><div class="line">cmake_install.cmake  gen_lex_hash  lex_hash.h  libmaster.a  libslave.a  libsqlgunitlib.a  share     sql_yacc.cc</div><div class="line">[root@mysql3 sql]#</div></pre></td></tr></table></figure></p>
<p>3、创建配置目录，将可执行文件Inception拷贝到/opt/inception/bin目录<br>[root@mysql3 sql]# mkdir -p /opt/inception<br>[root@mysql3 sql]# mkdir -p /opt/inception/bin<br>[root@mysql3 sql]# mkdir -p /opt/inception/temp<br>[root@mysql3 sql]# cp Inception /opt/inception/bin/<br>编辑配置文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 sql]# vi /etc/inc.cnf</div><div class="line">[inception]</div><div class="line">general_log=1</div><div class="line">general_log_file=/opt/inception/inception.log</div><div class="line">port=6669</div><div class="line">socket=/opt/inception/inc.socket</div><div class="line">character-set-client-handshake=0</div><div class="line">character-set-server=utf8</div><div class="line">inception_remote_system_password=123456</div><div class="line">inception_remote_system_user=root</div><div class="line">inception_remote_backup_port=3306</div><div class="line">inception_remote_backup_host=127.0.0.1</div><div class="line">inception_support_charset=utf8mb4</div><div class="line">inception_enable_nullable=0</div><div class="line">inception_check_primary_key=1</div><div class="line">inception_check_column_comment=1</div><div class="line">inception_check_table_comment=1</div><div class="line">inception_osc_min_table_size=1</div><div class="line">inception_osc_bin_dir=/opt/inception/temp</div><div class="line">inception_osc_chunk_time=0.1</div><div class="line">inception_ddl_support=1</div><div class="line">inception_enable_blob_type=1</div><div class="line">inception_check_column_default_value=1</div></pre></td></tr></table></figure></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 sql]# nohup /opt/inception/bin/Inception --defaults-file=/etc/inc.cnf &amp;</div><div class="line">[1] 2398</div><div class="line">[root@mysql3 sql]# nohup: ignoring input and appending output to `nohup.out&apos;</div><div class="line"></div><div class="line">[root@mysql3 sql]# ps -ef|grep Inception</div><div class="line">root      2414 23520  0 23:15 pts/0    00:00:00 /opt/inception/bin/Inception --defaults-file=/etc/inc.cnf</div><div class="line">root      2419 23520  0 23:22 pts/0    00:00:00 grep Inception</div></pre></td></tr></table></figure>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql3 sql]# mysql -uroot -h127.0.0.1 -P6669</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 1</div><div class="line">Server version: Inception2.1.50 1</div><div class="line"></div><div class="line">Copyright (c) 2009-2014 Percona LLC and/or its affiliates</div><div class="line">Copyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt; inception get variables;</div><div class="line">+------------------------------------------+-------------------------------------------------+</div><div class="line">| Variable_name                            | Value                                           |</div><div class="line">+------------------------------------------+-------------------------------------------------+</div><div class="line">| autocommit                               | OFF                                             |</div><div class="line">| bind_address                             | *                                               |</div><div class="line">| character_set_system                     | utf8                                            |</div><div class="line">| character_sets_dir                       | /src/inception-master/debug/sql/share/charsets/ |</div><div class="line">| connect_timeout                          | 10                                              |</div><div class="line">| date_format                              | %Y-%m-%d                                        |</div><div class="line">| datetime_format                          | %Y-%m-%d %H:%i:%s                               |</div><div class="line">| general_log                              | ON                                              |</div><div class="line">| general_log_file                         | /opt/inception/inception.log                    |</div><div class="line">| inception_check_autoincrement_datatype   | ON                                              |</div><div class="line">| inception_check_autoincrement_init_value | ON                                              |</div><div class="line">| inception_check_autoincrement_name       | ON                                              |</div><div class="line">| inception_check_column_comment           | ON                                              |</div><div class="line">| inception_check_column_default_value     | ON                                              |</div><div class="line">| inception_check_dml_limit                | ON                                              |</div><div class="line">| inception_check_dml_orderby              | ON                                              |</div><div class="line">| inception_check_dml_where                | ON                                              |</div><div class="line">| inception_check_identifier               | ON                                              |</div><div class="line">| inception_check_index_prefix             | ON                                              |</div><div class="line">| inception_check_insert_field             | ON                                              |</div><div class="line">| inception_check_primary_key              | ON                                              |</div><div class="line">| inception_check_table_comment            | ON                                              |</div><div class="line">| inception_check_timestamp_default        | ON                                              |</div><div class="line">| inception_ddl_support                    | ON                                              |</div><div class="line">| inception_enable_autoincrement_unsigned  | ON                                              |</div><div class="line">| inception_enable_blob_type               | ON                                              |</div><div class="line">| inception_enable_column_charset          | OFF                                             |</div><div class="line">| inception_enable_enum_set_bit            | OFF                                             |</div><div class="line">| inception_enable_foreign_key             | OFF                                             |</div><div class="line">| inception_enable_identifer_keyword       | OFF                                             |</div><div class="line">| inception_enable_not_innodb              | OFF                                             |</div><div class="line">| inception_enable_nullable                | OFF                                             |</div><div class="line">| inception_enable_orderby_rand            | OFF                                             |</div><div class="line">| inception_enable_partition_table         | OFF                                             |</div><div class="line">| inception_enable_pk_columns_only_int     | OFF                                             |</div><div class="line">| inception_enable_select_star             | OFF                                             |</div><div class="line">| inception_enable_sql_statistic           | ON                                              |</div><div class="line">| inception_max_char_length                | 16                                              |</div><div class="line">| inception_max_key_parts                  | 5                                               |</div><div class="line">| inception_max_keys                       | 16                                              |</div><div class="line">| inception_max_primary_key_parts          | 5                                               |</div><div class="line">| inception_max_update_rows                | 10000                                           |</div><div class="line">| inception_merge_alter_table              | ON                                              |</div><div class="line">| inception_osc_alter_foreign_keys_method  | none                                            |</div><div class="line">| inception_osc_bin_dir                    | /opt/inception/temp                             |</div><div class="line">| inception_osc_check_alter                | ON                                              |</div><div class="line">| inception_osc_check_interval             | 5.000000                                        |</div><div class="line">| inception_osc_check_replication_filters  | ON                                              |</div><div class="line">| inception_osc_chunk_size                 | 1000                                            |</div><div class="line">| inception_osc_chunk_size_limit           | 4.000000                                        |</div><div class="line">| inception_osc_chunk_time                 | 0.100000                                        |</div><div class="line">| inception_osc_critical_thread_connected  | 1000                                            |</div><div class="line">| inception_osc_critical_thread_running    | 80                                              |</div><div class="line">| inception_osc_drop_new_table             | ON                                              |</div><div class="line">| inception_osc_drop_old_table             | ON                                              |</div><div class="line">| inception_osc_max_lag                    | 3.000000                                        |</div><div class="line">| inception_osc_max_thread_connected       | 1000                                            |</div><div class="line">| inception_osc_max_thread_running         | 80                                              |</div><div class="line">| inception_osc_min_table_size             | 1                                               |</div><div class="line">| inception_osc_on                         | ON                                              |</div><div class="line">| inception_osc_print_none                 | ON                                              |</div><div class="line">| inception_osc_print_sql                  | ON                                              |</div><div class="line">| inception_osc_recursion_method           | processlist                                     |</div><div class="line">| inception_password                       |                                                 |</div><div class="line">| inception_read_only                      | OFF                                             |</div><div class="line">| inception_remote_backup_host             | 127.0.0.1                                       |</div><div class="line">| inception_remote_backup_port             | 3306                                            |</div><div class="line">| inception_remote_system_password         | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9       |</div><div class="line">| inception_remote_system_user             | root                                            |</div><div class="line">| inception_support_charset                | utf8mb4                                         |</div><div class="line">| inception_user                           |                                                 |</div><div class="line">| interactive_timeout                      | 28800                                           |</div><div class="line">| max_allowed_packet                       | 1073741824                                      |</div><div class="line">| max_connect_errors                       | 100                                             |</div><div class="line">| max_connections                          | 151                                             |</div><div class="line">| net_buffer_length                        | 16384                                           |</div><div class="line">| net_read_timeout                         | 30                                              |</div><div class="line">| net_write_timeout                        | 60                                              |</div><div class="line">| port                                     | 6669                                            |</div><div class="line">| query_alloc_block_size                   | 8192                                            |</div><div class="line">| query_prealloc_size                      | 8192                                            |</div><div class="line">| socket                                   | /opt/inception/inc.socket                       |</div><div class="line">| thread_handling                          | one-thread-per-connection                       |</div><div class="line">| thread_stack                             | 262144                                          |</div><div class="line">| time_format                              | %H:%i:%s                                        |</div><div class="line">| version                                  | Inception2.1.50                                 |</div><div class="line">| version_comment                          | Source distribution                             |</div><div class="line">| version_compile_machine                  | x86_64                                          |</div><div class="line">| version_compile_os                       | Linux                                           |</div><div class="line">| wait_timeout                             | 28800                                           |</div><div class="line">+------------------------------------------+-------------------------------------------------+</div><div class="line">90 rows in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; exit</div><div class="line">Bye</div><div class="line">[root@mysql3 sql]#</div></pre></td></tr></table></figure>
<p>可以看到所有的变量，安装成功！</p>
<h3 id="使用Inception"><a href="#使用Inception" class="headerlink" title="使用Inception"></a>使用Inception</h3><h4 id="DDL审核"><a href="#DDL审核" class="headerlink" title="DDL审核"></a>DDL审核</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# cat inception.py </div><div class="line">#!/usr/bin/python</div><div class="line">#-\*-coding: utf-8-\*-</div><div class="line">import pymysql</div><div class="line">sql=&apos;/*--user=testdev;--password=testdev;--host=192.168.1.3;--execute=1;--port=3306;*/\</div><div class="line">inception_magic_start;\</div><div class="line">use testdb;\</div><div class="line">CREATE TABLE adaptive_office(id int);\</div><div class="line">inception_magic_commit;&apos;</div><div class="line">try:</div><div class="line">    conn=pymysql.connect(host=&apos;192.168.1.123&apos;,user=&apos;root&apos;,password=&apos;123456&apos;,db=&apos;&apos;,port=6669)</div><div class="line">    cur=conn.cursor()</div><div class="line">    ret=cur.execute(sql)</div><div class="line">    result=cur.fetchall()</div><div class="line">    num_fields = len(cur.description) </div><div class="line">    field_names = [i[0] for i in cur.description]</div><div class="line">    print field_names</div><div class="line">    for row in result:</div><div class="line">        print row[0], &quot;|&quot;,row[1],&quot;|&quot;,row[2],&quot;|&quot;,row[3],&quot;|&quot;,row[4],&quot;|&quot;,</div><div class="line">        row[5],&quot;|&quot;,row[6],&quot;|&quot;,row[7],&quot;|&quot;,row[8],&quot;|&quot;,row[9],&quot;|&quot;,row[10]</div><div class="line">    cur.close()</div><div class="line">    conn.close()</div><div class="line">except pymysql.Error,e:</div><div class="line">     print &quot;Mysql Error %d: %s&quot; % (e.args[0], e.args[1])</div><div class="line">[root@mysql ~]#</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# python inception.py </div><div class="line">[u&apos;ID&apos;, u&apos;stage&apos;, u&apos;errlevel&apos;, u&apos;stagestatus&apos;, u&apos;errormessage&apos;, u&apos;SQL&apos;, u&apos;Affected_rows&apos;, u&apos;sequence&apos;, u&apos;backup_dbname&apos;, u&apos;execute_time&apos;, u&apos;sqlsha1&apos;]</div><div class="line">1 | CHECKED | 0 | Audit completed | None | 2 | CHECKED | 1 | Audit completed | Set engine to innodb for table &apos;adaptive_office&apos;.</div><div class="line">Set charset to one of &apos;utf8mb4&apos; for table &apos;adaptive_office&apos;.</div><div class="line">Set comments for table &apos;adaptive_office&apos;.</div><div class="line">Column &apos;id&apos; in table &apos;adaptive_office&apos; have no comments.</div><div class="line">Column &apos;id&apos; in table &apos;adaptive_office&apos; is not allowed to been nullable.</div><div class="line">Set Default value for column &apos;id&apos; in table &apos;adaptive_office&apos;</div><div class="line">Set a primary key for table &apos;adaptive_office&apos;. |</div></pre></td></tr></table></figure></p>
<p>可以看到输出了审核结果！</p>
<h4 id="DML执行及备份"><a href="#DML执行及备份" class="headerlink" title="DML执行及备份"></a>DML执行及备份</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# cat inception.py </div><div class="line">#!/usr/bin/python</div><div class="line">#-\*-coding: utf-8-\*-</div><div class="line">import pymysql</div><div class="line">sql=&apos;/*--user=root;--password=testdba;--host=192.168.1.3;--execute=1;--port=3306;*/\</div><div class="line">inception_magic_start;\</div><div class="line">use testdb;\</div><div class="line">update t1 set b1=88 where a1=8;\</div><div class="line">inception_magic_commit;&apos;</div><div class="line">try:</div><div class="line">    conn=pymysql.connect(host=&apos;192.168.1.123&apos;,user=&apos;root&apos;,password=&apos;123456&apos;,db=&apos;&apos;,port=6669)</div><div class="line">    cur=conn.cursor()</div><div class="line">    ret=cur.execute(sql)</div><div class="line">    result=cur.fetchall()</div><div class="line">    num_fields = len(cur.description) </div><div class="line">    field_names = [i[0] for i in cur.description]</div><div class="line">    print field_names</div><div class="line">    for row in result:</div><div class="line">        print row[0], &quot;|&quot;,row[1],&quot;|&quot;,row[2],&quot;|&quot;,row[3],&quot;|&quot;,row[4],&quot;|&quot;,</div><div class="line">        row[5],&quot;|&quot;,row[6],&quot;|&quot;,row[7],&quot;|&quot;,row[8],&quot;|&quot;,row[9],&quot;|&quot;,row[10]</div><div class="line">    cur.close()</div><div class="line">    conn.close()</div><div class="line">except pymysql.Error,e:</div><div class="line">     print &quot;Mysql Error %d: %s&quot; % (e.args[0], e.args[1])</div><div class="line">[root@mysql ~]# python inception.py </div><div class="line">[u&apos;ID&apos;, u&apos;stage&apos;, u&apos;errlevel&apos;, u&apos;stagestatus&apos;, u&apos;errormessage&apos;, u&apos;SQL&apos;, u&apos;Affected_rows&apos;, u&apos;sequence&apos;, u&apos;backup_dbname&apos;, u&apos;execute_time&apos;, u&apos;sqlsha1&apos;]</div><div class="line">1 | RERUN | 0 | Execute Successfully | None | 2 | EXECUTED | 0 | Execute Successfully</div><div class="line">Backup successfully | None |</div></pre></td></tr></table></figure>
<p>SQL执行、备份成功，查看备份语句：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 05:28:14&gt;use 192_168_1_3_3306_testdb</div><div class="line">Database changed</div><div class="line">root@192_168_1_3_3306_testdb 05:28:57&gt;show tables;</div><div class="line">+------------------------------------+</div><div class="line">| Tables_in_192_168_1_3_3306_testdb  |</div><div class="line">+------------------------------------+</div><div class="line">| $_$inception_backup_information$_$ |</div><div class="line">| t1                                 |</div><div class="line">+------------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div><div class="line">root@192_168_1_3_3306_testdb 05:28:59&gt;desc $_$inception_backup_information$_$;</div><div class="line">+-------------------+--------------+------+-----+-------------------+-----------------------------+</div><div class="line">| Field             | Type         | Null | Key | Default           | Extra                       |</div><div class="line">+-------------------+--------------+------+-----+-------------------+-----------------------------+</div><div class="line">| opid_time         | varchar(50)  | NO   | PRI |                   |                             |</div><div class="line">| start_binlog_file | varchar(512) | YES  |     | NULL              |                             |</div><div class="line">| start_binlog_pos  | int(11)      | YES  |     | NULL              |                             |</div><div class="line">| end_binlog_file   | varchar(512) | YES  |     | NULL              |                             |</div><div class="line">| end_binlog_pos    | int(11)      | YES  |     | NULL              |                             |</div><div class="line">| sql_statement     | text         | YES  |     | NULL              |                             |</div><div class="line">| host              | varchar(64)  | YES  |     | NULL              |                             |</div><div class="line">| dbname            | varchar(64)  | YES  |     | NULL              |                             |</div><div class="line">| tablename         | varchar(64)  | YES  |     | NULL              |                             |</div><div class="line">| port              | int(11)      | YES  |     | NULL              |                             |</div><div class="line">| time              | timestamp    | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</div><div class="line">| type              | varchar(20)  | YES  |     | NULL              |                             |</div><div class="line">+-------------------+--------------+------+-----+-------------------+-----------------------------+</div><div class="line">12 rows in set (0.00 sec)</div><div class="line">root@192_168_1_3_3306_testdb 05:30:14&gt;select sql_statement from $_$inception_backup_information$_$;</div><div class="line">+--------------------------------+</div><div class="line">| sql_statement                  |</div><div class="line">+--------------------------------+</div><div class="line">| update t1 set b1=8 where a1=8  |</div><div class="line">+--------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@192_168_1_3_3306_testdb 05:30:37&gt;</div></pre></td></tr></table></figure></p>
<h3 id="遇到报错及解决"><a href="#遇到报错及解决" class="headerlink" title="遇到报错及解决"></a>遇到报错及解决</h3><h4 id="调用inception接口出错"><a href="#调用inception接口出错" class="headerlink" title="调用inception接口出错"></a>调用inception接口出错</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# python inception.py </div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;inception.py&quot;, line 10, in &lt;module&gt;</div><div class="line">    conn=pymysql.connect(host=&apos;192.168.1.123&apos;,user=&apos;root&apos;,password=&apos;123456&apos;,db=&apos;&apos;,port=6669)</div><div class="line">  File &quot;/usr/local/lib/python2.7/site-packages/pymysql/__init__.py&quot;, line 88, in Connect</div><div class="line">    return Connection(*args, **kwargs)</div><div class="line">  File &quot;/usr/local/lib/python2.7/site-packages/pymysql/connections.py&quot;, line 679, in __init__</div><div class="line">    self.connect()</div><div class="line">  File &quot;/usr/local/lib/python2.7/site-packages/pymysql/connections.py&quot;, line 891, in connect</div><div class="line">    self._request_authentication()</div><div class="line">  File &quot;/usr/local/lib/python2.7/site-packages/pymysql/connections.py&quot;, line 1054, in _request_authentication</div><div class="line">    if int(self.server_version.split(&apos;.&apos;, 1)[0]) &gt;= 5:</div><div class="line">ValueError: invalid literal for int() with base 10: &apos;Inception2&apos;</div></pre></td></tr></table></figure>
<p>解决办法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# vi /usr/local/lib/python2.7/site-packages/pymysql/connections.py</div><div class="line">... ...</div><div class="line">    def _request_authentication(self):</div><div class="line">        # https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::HandshakeResponse</div><div class="line">        self.server_version = &apos;5.6.24-72.2-log&apos;  #添加此行</div><div class="line">        if int(self.server_version.split(&apos;.&apos;, 1)[0]) &gt;= 5:</div><div class="line">... ...</div></pre></td></tr></table></figure></p>
<h4 id="执行DML语句不备份"><a href="#执行DML语句不备份" class="headerlink" title="执行DML语句不备份"></a>执行DML语句不备份</h4><p>仔细阅读inception对线上配置需求文档<br><a href="http://mysql-inception.github.io/inception-document/requires/" target="_blank" rel="external">http://mysql-inception.github.io/inception-document/requires/</a><br>首先检查是否开启了binlog：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 04:57:22&gt;show variables like &apos;%log_bin%&apos;;</div><div class="line">+---------------------------------+-------+</div><div class="line">| Variable_name                   | Value |</div><div class="line">+---------------------------------+-------+</div><div class="line">| log_bin                         | OFF   |</div><div class="line">| log_bin_basename                |       |</div><div class="line">| log_bin_index                   |       |</div><div class="line">| log_bin_trust_function_creators | ON    |</div><div class="line">| log_bin_use_v1_row_events       | OFF   |</div><div class="line">| sql_log_bin                     | ON    |</div><div class="line">+---------------------------------+-------+</div><div class="line">6 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>因为是个测试库,受限于磁盘空间所以当时没有开启binlog。开启binlog后继续执行inception又遇到如下报错:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# python inception.py   </div><div class="line">/usr/local/lib/python2.7/site-packages/pymysql/cursors.py:158: Warning: None</div><div class="line">  result = self._query(query)</div><div class="line">[u&apos;ID&apos;, u&apos;stage&apos;, u&apos;errlevel&apos;, u&apos;stagestatus&apos;, u&apos;errormessage&apos;, u&apos;SQL&apos;, u&apos;Affected_rows&apos;, u&apos;sequence&apos;, u&apos;backup_dbname&apos;, u&apos;execute_time&apos;, u&apos;sqlsha1&apos;]</div><div class="line">1 | RERUN | 0 | Execute Successfully | None | 2 | EXECUTED | 2 | Execute Successfully</div><div class="line">Backup failed | Backup: Access denied for user &apos;dba&apos;@&apos;192.168.1.123&apos; (using password: YES)</div><div class="line">Backup: Access denied for user &apos;dba&apos;@&apos;192.168.1.123&apos; (using password: YES) |</div></pre></td></tr></table></figure></p>
<p>给dba用户赋予create\insert权限:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# python inception.py </div><div class="line">[u&apos;ID&apos;, u&apos;stage&apos;, u&apos;errlevel&apos;, u&apos;stagestatus&apos;, u&apos;errormessage&apos;, u&apos;SQL&apos;, u&apos;Affected_rows&apos;, u&apos;sequence&apos;, u&apos;backup_dbname&apos;, u&apos;execute_time&apos;, u&apos;sqlsha1&apos;]</div><div class="line">1 | RERUN | 0 | Execute Successfully | None | 2 | EXECUTED | 0 | Execute Successfully</div><div class="line">Backup successfully | None |</div><div class="line">[root@mysql ~]#</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> TOOLS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL审核工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql基准测试]]></title>
      <url>http://riverdba.github.io/2017/04/11/sysbench-for-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：使用sysbench对mysql做基准测试<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="安装sysbench"><a href="#安装sysbench" class="headerlink" title="安装sysbench"></a>安装sysbench</h3><p>1、下载：<a href="https://codeload.github.com/akopytov/sysbench/zip/0.5" target="_blank" rel="external">https://codeload.github.com/akopytov/sysbench/zip/0.5</a><br>2、安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql ~]# cd sysbench-0.5</div><div class="line">[root@mysql sysbench-0.5]# ls</div><div class="line">autogen.sh  ChangeLog  config  configure.ac  COPYING  doc  install-sh  m4  Makefile.am  missing  mkinstalldirs  README.md  README-WIN.txt  sysbench  tests  TODO</div><div class="line">[root@mysql sysbench-0.5]# ./autogen.sh </div><div class="line">遇到报错：libtoolize 1.4+ wasn&apos;t found, exiting</div><div class="line">解决办法：[root@mysql sysbench-0.5]# yum install libtool -y</div><div class="line">[root@mysql sysbench-0.5]# ./autogen.sh          </div><div class="line">./autogen.sh: running `aclocal -I m4&apos; </div><div class="line">./autogen.sh: running `libtoolize --copy --force&apos; </div><div class="line">libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, `config&apos;.</div><div class="line">libtoolize: copying file `config/ltmain.sh&apos;</div><div class="line">libtoolize: putting macros in AC_CONFIG_MACRO_DIR, `m4&apos;.</div><div class="line">libtoolize: copying file `m4/libtool.m4&apos;</div><div class="line">libtoolize: copying file `m4/ltoptions.m4&apos;</div><div class="line">libtoolize: copying file `m4/ltsugar.m4&apos;</div><div class="line">libtoolize: copying file `m4/ltversion.m4&apos;</div><div class="line">libtoolize: copying file `m4/lt~obsolete.m4&apos;</div><div class="line">./autogen.sh: running `autoheader&apos; </div><div class="line">./autogen.sh: running `automake -c --foreign --add-missing&apos; </div><div class="line">configure.ac:25: installing `config/compile&apos;</div><div class="line">configure.ac:11: installing `config/config.guess&apos;</div><div class="line">configure.ac:11: installing `config/config.sub&apos;</div><div class="line">configure.ac:16: installing `config/install-sh&apos;</div><div class="line">configure.ac:16: installing `config/missing&apos;</div><div class="line">sysbench/Makefile.am: installing `config/depcomp&apos;</div><div class="line">./autogen.sh: running `autoconf&apos; </div><div class="line">Libtoolized with: libtoolize (GNU libtool) 2.2.6b</div><div class="line">Automade with: automake (GNU automake) 1.11.1</div><div class="line">Configured with: autoconf (GNU Autoconf) 2.63</div><div class="line">[root@mysql sysbench-0.5]# </div><div class="line">[root@mysql sysbench-0.5]# ./configure --with-mysql-includes=/opt/mysql/include --with-mysql-libs=/opt/mysql/lib &amp;&amp; make</div><div class="line">[root@mysql sysbench-0.5]# make install </div><div class="line">遇到报错：</div><div class="line">[root@mysql sysbench-0.5]# sysbench --help</div><div class="line">sysbench: error while loading shared libraries: libmysqlclient.so.18: cannot open shared object file: No such file or directory</div><div class="line">临时解决（只适用当前会话）：</div><div class="line">[root@mysql sysbench-0.5]# export LD_LIBRARY_PATH=/opt/mysql/lib    </div><div class="line">永久解决：</div><div class="line">[root@mysql ~]# ln -s /opt/mysql/lib/libmysqlclient.so.18 /usr/lib64</div><div class="line">[root@mysql ~]# ldconfig</div><div class="line">查看sysbench帮助：</div><div class="line">[root@mysql sysbench-0.5]# sysbench --help                       </div><div class="line">Missing required command argument.</div><div class="line">Usage:</div><div class="line">  sysbench --test=&lt;test-name&gt; [options]... &lt;command&gt;</div><div class="line"></div><div class="line">Commands: prepare run cleanup help version</div><div class="line"></div><div class="line">General options:</div><div class="line">  --num-threads=N             number of threads to use [1]</div><div class="line">  --max-requests=N            limit for total number of requests [10000]</div><div class="line">  --max-time=N                limit for total execution time in seconds [0]</div><div class="line">  --forced-shutdown=STRING    amount of time to wait after --max-time before forcing shutdown [off]</div><div class="line">  --thread-stack-size=SIZE    size of stack per thread [64K]</div><div class="line">  --tx-rate=N                 target transaction rate (tps) [0]</div><div class="line">  --report-interval=N         periodically report intermediate statistics with a specified interval in seconds. 0 disables intermediate reports [0]</div><div class="line">  --report-checkpoints=[LIST,...]dump full statistics and reset all counters at specified points in time. The argument is a list of comma-separated values representing the amount of time in seconds elapsed from start of test when report checkpoint(s) must be performed. Report checkpoints are off by default. []</div><div class="line">  --test=STRING               test to run</div><div class="line">  --debug=[on|off]            print more debugging info [off]</div><div class="line">  --validate=[on|off]         perform validation checks where possible [off]</div><div class="line">  --help=[on|off]             print help and exit</div><div class="line">  --version=[on|off]          print version and exit [off]</div><div class="line">  --rand-init=[on|off]        initialize random number generator [off]</div><div class="line">  --rand-type=STRING          random numbers distribution &#123;uniform,gaussian,special,pareto&#125; [special]</div><div class="line">  --rand-spec-iter=N          number of iterations used for numbers generation [12]</div><div class="line">  --rand-spec-pct=N           percentage of values to be treated as &apos;special&apos; (for special distribution) [1]</div><div class="line">  --rand-spec-res=N           percentage of &apos;special&apos; values to use (for special distribution) [75]</div><div class="line">  --rand-seed=N               seed for random number generator, ignored when 0 [0]</div><div class="line">  --rand-pareto-h=N           parameter h for pareto distibution [0.2]</div><div class="line">  --config-file=FILENAME      File containing command line options</div><div class="line"></div><div class="line">Log options:</div><div class="line">  --verbosity=N      verbosity level &#123;5 - debug, 0 - only critical messages&#125; [3]</div><div class="line"></div><div class="line">  --percentile=N      percentile rank of query response times to count [95]</div><div class="line"></div><div class="line">General database options:</div><div class="line"></div><div class="line">  --db-driver=STRING  specifies database driver to use (&apos;help&apos; to get list of available drivers)</div><div class="line">  --db-ps-mode=STRING prepared statements usage mode &#123;auto, disable&#125; [auto]</div><div class="line">  --db-debug=[on|off] print database-specific debug information [off]</div><div class="line"></div><div class="line"></div><div class="line">Compiled-in database drivers:</div><div class="line">  mysql - MySQL driver</div><div class="line"></div><div class="line">mysql options:</div><div class="line">  --mysql-host=[LIST,...]      MySQL server host [localhost]</div><div class="line">  --mysql-port=N               MySQL server port [3306]</div><div class="line">  --mysql-socket=[LIST,...]    MySQL socket</div><div class="line">  --mysql-user=STRING          MySQL user [sbtest]</div><div class="line">  --mysql-password=STRING      MySQL password []</div><div class="line">  --mysql-db=STRING            MySQL database name [sbtest]</div><div class="line">  --mysql-table-engine=STRING  storage engine to use for the test table &#123;myisam,innodb,bdb,heap,ndbcluster,federated&#125; [innodb]</div><div class="line">  --mysql-engine-trx=STRING    whether storage engine used is transactional or not &#123;yes,no,auto&#125; [auto]</div><div class="line">  --mysql-ssl=[on|off]         use SSL connections, if available in the client library [off]</div><div class="line">  --mysql-compression=[on|off] use compression, if available in the client library [off]</div><div class="line">  --myisam-max-rows=N          max-rows parameter for MyISAM tables [1000000]</div><div class="line">  --mysql-debug=[on|off]       dump all client library calls [off]</div><div class="line">  --mysql-ignore-errors=[LIST,...]list of errors to ignore, or &quot;all&quot; [1213,1020,1205]</div><div class="line">  --mysql-dry-run=[on|off]     Dry run, pretent that all MySQL client API calls are successful without executing them [off]</div><div class="line"></div><div class="line">Compiled-in tests:</div><div class="line">  fileio - File I/O test</div><div class="line">  cpu - CPU performance test</div><div class="line">  memory - Memory functions speed test</div><div class="line">  threads - Threads subsystem performance test</div><div class="line">  mutex - Mutex performance test</div><div class="line"></div><div class="line">See &apos;sysbench --test=&lt;name&gt; help&apos; for a list of options for each test.</div><div class="line">可以看到帮助信息说明安装完毕！</div></pre></td></tr></table></figure></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1、查看机器配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">查看CPU信息：</div><div class="line">[root@mysql db]# grep &quot;physical id&quot; /proc/cpuinfo | sort -u | wc -l</div><div class="line">1</div><div class="line">[root@mysql db]# grep &quot;core id&quot; /proc/cpuinfo | sort -u | wc -l</div><div class="line">2</div><div class="line">[root@mysql db]# grep &quot;processor&quot; /proc/cpuinfo | sort -u | wc -l</div><div class="line">4</div><div class="line">该机器配置：CPU（单颗双核4线程），内存（16G），硬盘（HDD）</div></pre></td></tr></table></figure></p>
<p>2、准备测试数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql db]# sysbench --test=/root/sysbench-0.5/sysbench/tests/db/select.lua --oltp-table-size=20000 --mysql-table-engine=innodb --mysql-user=root --mysql-pas</div><div class="line">sword=test --mysql-port=3306 --mysql-host=192.168.1.3 --mysql-db=test --max-requests=0 --max-time=60 --oltp-tables-count=20 --report-interval=10 --num_threads</div><div class="line">=4 prepare</div><div class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</div><div class="line">Creating table &apos;sbtest1&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest1&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest1&apos;...</div><div class="line">Creating table &apos;sbtest2&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest2&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest2&apos;...</div><div class="line">Creating table &apos;sbtest3&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest3&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest3&apos;...</div><div class="line">Creating table &apos;sbtest4&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest4&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest4&apos;...</div><div class="line">Creating table &apos;sbtest5&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest5&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest5&apos;...</div><div class="line">Creating table &apos;sbtest6&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest6&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest6&apos;...</div><div class="line">Creating table &apos;sbtest7&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest7&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest7&apos;...</div><div class="line">Creating table &apos;sbtest8&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest8&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest8&apos;...</div><div class="line">Creating table &apos;sbtest9&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest9&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest9&apos;...</div><div class="line">Creating table &apos;sbtest10&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest10&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest10&apos;...</div><div class="line">Creating table &apos;sbtest11&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest11&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest11&apos;...</div><div class="line">Creating table &apos;sbtest12&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest12&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest12&apos;...</div><div class="line">Creating table &apos;sbtest13&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest13&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest13&apos;...</div><div class="line">Creating table &apos;sbtest14&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest14&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest14&apos;...</div><div class="line">Creating table &apos;sbtest15&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest15&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest15&apos;...</div><div class="line">Creating table &apos;sbtest16&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest16&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest16&apos;...</div><div class="line">Creating table &apos;sbtest17&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest17&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest17&apos;...</div><div class="line">Creating table &apos;sbtest18&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest18&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest18&apos;...</div><div class="line">Creating table &apos;sbtest19&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest19&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest19&apos;...</div><div class="line">Creating table &apos;sbtest20&apos;...</div><div class="line">Inserting 20000 records into &apos;sbtest20&apos;</div><div class="line">Creating secondary indexes on &apos;sbtest20&apos;...</div></pre></td></tr></table></figure></p>
<h3 id="测试QPS"><a href="#测试QPS" class="headerlink" title="测试QPS"></a>测试QPS</h3><p>测试脚本放在：/root/sysbench-0.5/sysbench/tests/db<br>测试QPS使用：select.lua<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql db]# sysbench --test=/root/sysbench-0.5/sysbench/tests/db/select.lua --oltp-table-size=20000 --mysql-table-engine=innodb --mysql-user=root --mysql-pas</div><div class="line">sword=test --mysql-port=3306 --mysql-host=192.168.1.3 --mysql-db=test --max-requests=0 --max-time=60 --oltp-tables-count=20 --report-interval=10 --num_threads</div><div class="line">=10 run</div><div class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 10</div><div class="line">Report intermediate results every 10 second(s)</div><div class="line">Random number generator seed is 0 and will be ignored</div><div class="line">Initializing worker threads...</div><div class="line">Threads started!</div><div class="line">[  10s] threads: 10, tps: 0.00, reads: 48798.78, writes: 0.00, response time: 0.27ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  20s] threads: 10, tps: 0.00, reads: 49039.11, writes: 0.00, response time: 0.27ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  30s] threads: 10, tps: 0.00, reads: 48814.40, writes: 0.00, response time: 0.27ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  40s] threads: 10, tps: 0.00, reads: 48619.99, writes: 0.00, response time: 0.27ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  50s] threads: 10, tps: 0.00, reads: 49057.90, writes: 0.00, response time: 0.27ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">OLTP test statistics:</div><div class="line">    queries performed:</div><div class="line">        read:                            2932213</div><div class="line">        write:                           0</div><div class="line">        other:                           0</div><div class="line">        total:                           2932213</div><div class="line">    transactions:                        0      (0.00 per sec.)</div><div class="line">    read/write requests:                 2932213 (48870.07 per sec.)  #QPS</div><div class="line">    other operations:                    0      (0.00 per sec.)</div><div class="line">    ignored errors:                      0      (0.00 per sec.)</div><div class="line">    reconnects:                          0      (0.00 per sec.)</div><div class="line">General statistics:</div><div class="line">    total time:                          60.0002s</div><div class="line">    total number of events:              2932213</div><div class="line">    total time taken by event execution: 597.0825s</div><div class="line">    response time:</div><div class="line">         min:                                  0.05ms</div><div class="line">         avg:                                  0.20ms</div><div class="line">         max:                                159.91ms</div><div class="line">         approx.  95 percentile:               0.27ms</div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           293221.3000/4766.23</div><div class="line">    execution time (avg/stddev):   59.7083/0.01</div></pre></td></tr></table></figure></p>
<p>查看OS资源：<br><img src="/2017/04/11/sysbench-for-mysql/1.png" alt="图1"><br>可以看到当QPS达到5W时，CPU已耗光，load也已达到极限。</p>
<h3 id="测试混合读写"><a href="#测试混合读写" class="headerlink" title="测试混合读写"></a>测试混合读写</h3><p>使用oltp.lua<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql db]# sysbench --test=/root/sysbench-0.5/sysbench/tests/db/oltp.lua --oltp-table-size=20000 --mysql-table-engine=innodb --mysql-user=root --mysql-passw</div><div class="line">ord=test --mysql-port=3306 --mysql-host=192.168.1.3 --mysql-db=test --max-requests=0 --max-time=60 --oltp-tables-count=20 --report-interval=10 --num_threads=1</div><div class="line">0 run  </div><div class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 10</div><div class="line">Report intermediate results every 10 second(s)</div><div class="line">Random number generator seed is 0 and will be ignored</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">[  10s] threads: 10, tps: 785.09, reads: 11005.28, writes: 3144.37, response time: 52.92ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  20s] threads: 10, tps: 758.80, reads: 10619.20, writes: 3032.10, response time: 57.15ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  30s] threads: 10, tps: 648.80, reads: 9085.42, writes: 2595.21, response time: 63.73ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  40s] threads: 10, tps: 600.10, reads: 8401.50, writes: 2400.50, response time: 72.53ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  50s] threads: 10, tps: 508.10, reads: 7113.60, writes: 2032.20, response time: 79.97ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">[  60s] threads: 10, tps: 694.40, reads: 9720.67, writes: 2778.09, response time: 60.92ms (95%), errors: 0.00, reconnects:  0.00</div><div class="line">OLTP test statistics:</div><div class="line">    queries performed:</div><div class="line">        read:                            559482</div><div class="line">        write:                           159852</div><div class="line">        other:                           79926</div><div class="line">        total:                           799260</div><div class="line">    transactions:                        39963  (665.74 per sec.)   #TPS(每秒事务数)</div><div class="line">    read/write requests:                 719334 (11983.35 per sec.) #读写总数(每秒读写次数)</div><div class="line">    other operations:                    79926  (1331.48 per sec.)  #其他操作总数(每秒其他操作次数)</div><div class="line">    ignored errors:                      0      (0.00 per sec.)</div><div class="line">    reconnects:                          0      (0.00 per sec.)</div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          60.0278s</div><div class="line">    total number of events:              39963</div><div class="line">    total time taken by event execution: 600.1355s</div><div class="line">    response time:</div><div class="line">         min:                                  1.84ms</div><div class="line">         avg:                                 15.02ms</div><div class="line">         max:                                355.07ms</div><div class="line">         approx.  95 percentile:              63.13ms</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           3996.3000/34.31</div><div class="line">    execution time (avg/stddev):   60.0136/0.01</div></pre></td></tr></table></figure></p>
<p>查看OS资源：<br><img src="/2017/04/11/sysbench-for-mysql/2.png" alt="图2"><br>可以看到TPS达到：665.74，QPS达到：11983.35，CPU已耗光，load也已达到极限。</p>
<h3 id="内存测试"><a href="#内存测试" class="headerlink" title="内存测试"></a>内存测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql db]# sysbench --test=memory --num-threads=4 --memory-block-size=16384 --memory-total-size=16G run</div><div class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 4</div><div class="line">Random number generator seed is 0 and will be ignored</div><div class="line"></div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line">Operations performed: 1048576 (1277174.93 ops/sec)</div><div class="line"></div><div class="line">16384.00 MB transferred (19955.86 MB/sec)</div><div class="line"></div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          0.8210s</div><div class="line">    total number of events:              1048576</div><div class="line">    total time taken by event execution: 2.9372s</div><div class="line">    response time:</div><div class="line">         min:                                  0.00ms</div><div class="line">         avg:                                  0.00ms</div><div class="line">         max:                                  0.28ms</div><div class="line">         approx.  95 percentile:               0.00ms</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           262144.0000/609.13</div><div class="line">    execution time (avg/stddev):   0.7343/0.00</div></pre></td></tr></table></figure>
<h3 id="CPU测试"><a href="#CPU测试" class="headerlink" title="CPU测试"></a>CPU测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql db]# sysbench --test=cpu --cpu-max-prime=2000 run</div><div class="line">sysbench 0.5:  multi-threaded system evaluation benchmark</div><div class="line"></div><div class="line">Running the test with following options:</div><div class="line">Number of threads: 1</div><div class="line">Random number generator seed is 0 and will be ignored</div><div class="line"></div><div class="line"></div><div class="line">Prime numbers limit: 2000</div><div class="line"></div><div class="line">Initializing worker threads...</div><div class="line"></div><div class="line">Threads started!</div><div class="line"></div><div class="line"></div><div class="line">General statistics:</div><div class="line">    total time:                          1.0350s</div><div class="line">    total number of events:              10000</div><div class="line">    total time taken by event execution: 1.0334s</div><div class="line">    response time:</div><div class="line">         min:                                  0.10ms</div><div class="line">         avg:                                  0.10ms</div><div class="line">         max:                                  0.50ms</div><div class="line">         approx.  95 percentile:               0.10ms</div><div class="line"></div><div class="line">Threads fairness:</div><div class="line">    events (avg/stddev):           10000.0000/0.00</div><div class="line">    execution time (avg/stddev):   1.0334/0.00</div></pre></td></tr></table></figure>
<p>还可以进行文件IO性能测试、线程测试、互斥锁(Mutex)测试。<br>通过sysbench来压测单机的极限值，然后根据业务需求来做容量预估！</p>
</the>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sysbench </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL字符串处理一则]]></title>
      <url>http://riverdba.github.io/2017/04/06/String-handling-of-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：记一次字符串字段数据更新的过程<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>开发提出需修改某业务表中的一个字段的内容，将其中一部分修改掉。<br>修改前：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[&#123;&quot;extension&quot;:&quot;jpg&quot;,&quot;fileKey&quot;:&quot;B39C644EA275D5DF4062F7DCD5442077&quot;,&quot;smallUrl&quot;:&quot;http://dl.test.com/images/320x320_B39C644EA275D5DF4062F7DCD5442077.jpg&quot;,&quot;bigImgUrl&quot;:&quot;http://abc.test.com/r/010005002001001/010005002001001004001/B39C644EA275D5DF4062F7DCD5442077.jpg?t=20160310&quot;,&quot;type&quot;:6,&quot;fileName&quot;:&quot;段1.1&quot;&#125;]</div></pre></td></tr></table></figure></p>
<p>期望能修改为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[&#123;&quot;extension&quot;:&quot;jpg&quot;,&quot;fileKey&quot;:&quot;B39C644EA275D5DF4062F7DCD5442077&quot;,&quot;smallUrl&quot;:&quot;http://abc.test.com/r/010005002001001/010005002001001004001/98x98_B39C644EA275D5DF4062F7DCD5442077.jpg?t=20160310&quot;,&quot;bigImgUrl&quot;:&quot;http://abc.test.com/r/010005002001001/010005002001001004001/B39C644EA275D5DF4062F7DCD5442077.jpg?t=20160310&quot;,&quot;type&quot;:6,&quot;fileName&quot;:&quot;段1.1&quot;&#125;]</div></pre></td></tr></table></figure></p>
<h3 id="确定思路"><a href="#确定思路" class="headerlink" title="确定思路"></a>确定思路</h3><p>1、确定需要修改的具体内容，即”smallUrl”:后面的内容<br>2、写出要修改后的新内容，即bigImgUrl+分辨率<br>3、将需要修改的内容replace为新内容<br>经过讨论业务逻辑后，最终确定通过这三步即可完成。<br>此处有感：磨刀不误砍材工，动手之前一定要先梳理好业务逻辑。否则可能动手做了一半才发现不对，白白浪费了时间。</p>
<h3 id="编写SQL"><a href="#编写SQL" class="headerlink" title="编写SQL"></a>编写SQL</h3><p>需要用到Mysql的几个函数：SUBSTRING_INDEX、CONCAT、REPLACE<br>SUBSTRING_INDEX(str,delim,count)：用来返回字符串str中在第count个出现的分隔符delim之前或之后的字符串。如果count是一个正数，返回从最后的(从左边开始计数)分隔符到左边所有字符。如果count是负数，返回从最后的(从右边开始计数)分隔符到右边所有字符。<br>CONCAT()：用来拼接字符串<br>REPLACE()：用来替换字符串<br>1、找出需要被修改的部分：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;smallUrl&quot;:&apos;,-1),&apos;&quot;&apos;,2),&apos;&quot;&apos;) as &quot;old smallUrl&quot;,</div><div class="line">先截取smallUrl右边的部分，在此基础上再进一步截取这部分中第二个&quot;左边的部分，输出结果为：</div><div class="line">&quot;http://dl.test.com/images/320x320_B39C644EA275D5DF4062F7DCD5442077.jpg&quot;</div></pre></td></tr></table></figure></p>
<p>2、写出修改后的部分：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;bigImgUrl&quot;:&apos;,-1),&apos;/&apos;,6),&apos;/98x98_&apos;,SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;bigImgUrl&quot;:&apos;,-1),&apos;&quot;&apos;,2),&apos;/&apos;,-1),&apos;&quot;&apos;) as &quot;new smallUrl&quot;</div><div class="line">输出结果为：</div><div class="line">&quot;http://abc.test.com/r/010005002001001/010005002001001004001/98x98_B39C644EA275D5DF4062F7DCD5442077.jpg?t=20160310&quot;</div></pre></td></tr></table></figure></p>
<p>3、验证是否正确<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SELECT t_content1,</div><div class="line">REPLACE(t_content1,CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;smallUrl&quot;:&apos;,-1),&apos;&quot;&apos;,2),&apos;&quot;&apos;),CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;bigImgUrl&quot;:&apos;,-1),&apos;/&apos;,6),&apos;/98x98_&apos;,SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;bigImgUrl&quot;:&apos;,-1),&apos;&quot;&apos;,2),&apos;/&apos;,-1),&apos;&quot;&apos;)) as new_t_content1</div><div class="line">FROM test_book_class WHERE ccdl_type=5 </div><div class="line">AND t_content1 LIKE &apos;%&quot;bigImgUrl&quot;:&quot;http://abc.test.com%&apos; </div><div class="line">AND t_content1 LIKE &apos;%&quot;smallUrl&quot;:&quot;http://dl.test.com/%&apos; </div><div class="line">LIMIT 10;</div></pre></td></tr></table></figure></p>
<p>比较修改前的内容和修改后的内容，确定被修改的部分是正确的。</p>
<h3 id="执行SQL"><a href="#执行SQL" class="headerlink" title="执行SQL"></a>执行SQL</h3><p>注意：先测试库，后生产库。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UPDATE test_book_class SET t_content1=REPLACE(t_content1,CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;smallUrl&quot;:&apos;,-1),&apos;&quot;&apos;,2),&apos;&quot;&apos;),CONCAT(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;bigImgUrl&quot;:&apos;,-1),&apos;/&apos;,6),&apos;/98x98_&apos;,SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING_INDEX(t_content1,&apos;&quot;bigImgUrl&quot;:&apos;,-1),&apos;&quot;&apos;,2),&apos;/&apos;,-1),&apos;&quot;&apos;))</div><div class="line">WHERE ccdl_type=5 AND t_content1 LIKE &apos;%&quot;bigImgUrl&quot;:&quot;http://abc.test.com%&apos; AND t_content1 LIKE &apos;%&quot;smallUrl&quot;:&quot;http://dl.test.com/%&apos;;</div><div class="line">COMMIT;</div></pre></td></tr></table></figure></p>
</the>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL查询优化技术之非SPJ优化]]></title>
      <url>http://riverdba.github.io/2017/04/05/Non-SPJ-Optimization-of-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：结合实例探讨mysql查询优化技术中的非SPJ优化<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>SPJ：Select（查询）、Project（投影）、Join（连接）<br>非SPJ：SPJ+[Group By、Order By、Distinct、Limit等]</the></p>
<h3 id="Group-By的优化"><a href="#Group-By的优化" class="headerlink" title="Group By的优化"></a>Group By的优化</h3><p>创建测试数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE TABLE t_god (a INT, b INT, c INT, d INT, e INT);</div><div class="line">CREATE INDEX t_god_idx_1 ON t_god (a,b,c);</div><div class="line">CREATE INDEX t_god_idx_2 ON t_god (d);</div></pre></td></tr></table></figure></p>
<p>1、在索引列上执行GROUP BY，支持GROUP BY优化（没有使用“Using file sort”类似的操作进行排序）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 10:44:23&gt;EXPLAIN EXTENDED SELECT a FROM t_god GROUP BY a;</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">| id | select_type | table | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">|  1 | SIMPLE      | t_god | index | t_god_idx_1   | t_god_idx_1 | 15      | NULL |    1 |   100.00 | Using index |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">1 row in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>2、在索引列上执行ORDERBY，MySQL支持ORDERBY优化：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 10:44:33&gt;EXPLAIN EXTENDED SELECT a FROM t_god ORDER BY a;     </div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">| id | select_type | table | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">|  1 | SIMPLE      | t_god | index | NULL          | t_god_idx_1 | 15      | NULL |    1 |   100.00 | Using index |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">1 row in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>3、在索引列上执行ORDERBY、GROUPBY，MySQL支持ORDERBY优化也支持GROUPBY优化：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 11:08:54&gt;EXPLAIN EXTENDED SELECT a FROM t_god GROUP BY a ORDER BY a;</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">| id | select_type | table | type  | possible_keys | key         | key_len | ref  | rows | filtered | Extra       |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">|  1 | SIMPLE      | t_god | index | t_god_idx_1   | t_god_idx_1 | 15      | NULL |    1 |   100.00 | Using index |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+----------+-------------+</div><div class="line">1 row in set, 1 warning (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>4、在索引列上执行带有聚集操作的GROUPBY，MySQL支持GROUPBY优化：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 11:10:14&gt;EXPLAIN SELECT a, MIN(b) FROM t_god WHERE c&gt;2 GROUP BY a;</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+--------------------------+</div><div class="line">| id | select_type | table | type  | possible_keys | key         | key_len | ref  | rows | Extra                    |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+--------------------------+</div><div class="line">|  1 | SIMPLE      | t_god | index | t_god_idx_1   | t_god_idx_1 | 15      | NULL |    1 | Using where; Using index |</div><div class="line">+----+-------------+-------+-------+---------------+-------------+---------+------+------+--------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h3 id="Order-By的优化"><a href="#Order-By的优化" class="headerlink" title="Order By的优化"></a>Order By的优化</h3><p>创建测试数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE TABLE t_o1 (a1 INT UNIQUE, b1 INT);</div><div class="line">CREATE TABLE t_o2 (a2 INT UNIQUE, b2 INT);</div></pre></td></tr></table></figure></p>
<p>1、在索引列上进行排序操作， MySQL支持利用索引进行排序优化：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 11:13:04&gt;EXPLAIN SELECT a1 FROM t_o1 ORDER BY a1;</div><div class="line">+----+-------------+-------+-------+---------------+------+---------+------+------+-------------+</div><div class="line">| id | select_type | table | type  | possible_keys | key  | key_len | ref  | rows | Extra       |</div><div class="line">+----+-------------+-------+-------+---------------+------+---------+------+------+-------------+</div><div class="line">|  1 | SIMPLE      | t_o1  | index | NULL          | a1   | 5       | NULL |    1 | Using index |</div><div class="line">+----+-------------+-------+-------+---------------+------+---------+------+------+-------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>2、排序下推，MySQL不支持。在非索引列上执行连接，然后排序：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 11:16:32&gt;EXPLAIN EXTENDED SELECT * FROM t_o1, t_o2 WHERE b1=b2 ORDER BY b1;</div><div class="line">+----+-------------+-------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</div><div class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</div><div class="line">+----+-------------+-------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</div><div class="line">|  1 | SIMPLE      | t_o1  | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using temporary; Using filesort                    |</div><div class="line">|  1 | SIMPLE      | t_o2  | ALL  | NULL          | NULL | NULL    | NULL |    1 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</div><div class="line">+----+-------------+-------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</div><div class="line">2 rows in set, 1 warning (0.00 sec)</div><div class="line">可以看到执行计划中使用了“Using file sort”临时表操作进行排序</div></pre></td></tr></table></figure></p>
<p>group by、order by对同一个Btree索引的前缀部分可以用到索引进行优化</p>
<h3 id="Distinct的优化"><a href="#Distinct的优化" class="headerlink" title="Distinct的优化"></a>Distinct的优化</h3><p>1、MySQL支持对于DISTINCT消除的优化技术。在主键的a1列上执行DISTINCT是可以去除distinct的，查询执行计划如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 11:36:32&gt;explain select distinct a1 from t1;</div><div class="line">+----+-------------+-------+-------+----------------+--------+---------+------+------+-------------+</div><div class="line">| id | select_type | table | type  | possible_keys  | key    | key_len | ref  | rows | Extra       |</div><div class="line">+----+-------------+-------+-------+----------------+--------+---------+------+------+-------------+</div><div class="line">|  1 | SIMPLE      | t1    | index | PRIMARY,idx_b1 | idx_b1 | 21      | NULL | 9977 | Using index |</div><div class="line">+----+-------------+-------+-------+----------------+--------+---------+------+------+-------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>2、MySQL不支持对于DISTINCT推入的优化技术。<br>a2列是唯一列，又处于反半连接的语义（NOT EXISTS），完全可以把DISTINCT下推到表t_o2中先执行，然后再执行反半连接操作：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 11:39:21&gt;EXPLAIN EXTENDED SELECT DISTINCT b1 FROM t_o1 WHERE NOT EXISTS (SELECT 1 FROM t_o2 WHERE b1=a2);</div><div class="line">+----+--------------------+-------+------+---------------+------+---------+----------------+------+----------+------------------------------+</div><div class="line">| id | select_type        | table | type | possible_keys | key  | key_len | ref            | rows | filtered | Extra                        |</div><div class="line">+----+--------------------+-------+------+---------------+------+---------+----------------+------+----------+------------------------------+</div><div class="line">|  1 | PRIMARY            | t_o1  | ALL  | NULL          | NULL | NULL    | NULL           |    1 |   100.00 | Using where; Using temporary |</div><div class="line">|  2 | DEPENDENT SUBQUERY | t_o2  | ref  | a2            | a2   | 5       | testdb.t_o1.b1 |    1 |   100.00 | Using index                  |</div><div class="line">+----+--------------------+-------+------+---------------+------+---------+----------------+------+----------+------------------------------+</div><div class="line">2 rows in set, 2 warnings (0.00 sec)</div><div class="line">通过优化器处理后的执行计划可以看出，distinct关键字仍然存在：</div><div class="line">root@testdb 11:39:33&gt;show warnings;</div><div class="line">+-------+------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                |</div><div class="line">+-------+------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1276 | Field or reference &apos;testdb.t_o1.b1&apos; of SELECT #2 was resolved in SELECT #1                                                                                                                             |</div><div class="line">| Note  | 1003 | /* select#1 */ select distinct `testdb`.`t_o1`.`b1` AS `b1` from `testdb`.`t_o1` where (not(exists(/* select#2 */ select 1 from `testdb`.`t_o2` where (`testdb`.`t_o1`.`b1` = `testdb`.`t_o2`.`a2`)))) |</div><div class="line">+-------+------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h3 id="LIMIT的优化"><a href="#LIMIT的优化" class="headerlink" title="LIMIT的优化"></a>LIMIT的优化</h3><p>1、LIMIT对单表扫描的影响：如果索引扫描可用且花费低于全表扫描，则用索引扫描实现LIMIT（LIMIT取很少量的行，否则优化器更倾向于使用全表扫描）。<br>2、LIMIT对排序的影响：如果LIMIT和ORDERBY子句协同使用，当取到LIMIT设定个数的有序元组数后，后续的排序操作将不再进行。<br>3、LIMIT对去重的影响：如果LIMIT和DISTINCT子句协同使用，当取到LIMIT设定个数的唯一的元组数后，后续的去重操作将不再进行。<br>4、LIMIT受分组的影响：如果LIMIT和GROUPBY子句协同使用，GROUPBY按索引有序计算每个组的总数的过程中，LIMIT操作不必计数直到下一个分组开始计算。<br>5、LIMIT 0：直接返回空结果集。<br>6、MySQL支持对不带HAVING子句的LIMIT进行优化。</p>
<h3 id="SET的优化"><a href="#SET的优化" class="headerlink" title="SET的优化"></a>SET的优化</h3><p>与集合操作相关的优化：ORDER BY子句去除<br>union本身就是无序的合并结果集，在子句中加order by操作是无意义的，因此从下面执行计划中可以看出是没有排序操作的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 01:39:50&gt;explain extended (select * from t1 where b1 &lt; 20 order by b1) union (select * from t2 where b2 &lt; 20 order by b2);</div><div class="line">+----+--------------+------------+-------+---------------+--------+---------+------+------+----------+--------------------------+</div><div class="line">| id | select_type  | table      | type  | possible_keys | key    | key_len | ref  | rows | filtered | Extra                    |</div><div class="line">+----+--------------+------------+-------+---------------+--------+---------+------+------+----------+--------------------------+</div><div class="line">|  1 | PRIMARY      | t1         | range | idx_b1        | idx_b1 | 5       | NULL |   18 |   100.00 | Using where; Using index |</div><div class="line">|  2 | UNION        | t2         | ALL   | NULL          | NULL   | NULL    | NULL | 9999 |   100.00 | Using where              |</div><div class="line">| NULL | UNION RESULT | &lt;union1,2&gt; | ALL   | NULL          | NULL   | NULL    | NULL | NULL |     NULL | Using temporary          |</div><div class="line">+----+--------------+------------+-------+---------------+--------+---------+------+------+----------+--------------------------+</div><div class="line">3 rows in set, 1 warning (0.01 sec)</div></pre></td></tr></table></figure></p>
<p>如果在order by后面加上limit就无法去除order by子句了。从下面执行计划可以看出存在排序操作（Using filesort）。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 01:40:53&gt;explain extended (select * from t1 where b1 &lt; 20 order by b1 limit 5) union (select * from t2 where b2 &lt; 20 order by b2 limit 5);</div><div class="line">+----+--------------+------------+-------+---------------+--------+---------+------+------+----------+-----------------------------+</div><div class="line">| id | select_type  | table      | type  | possible_keys | key    | key_len | ref  | rows | filtered | Extra                       |</div><div class="line">+----+--------------+------------+-------+---------------+--------+---------+------+------+----------+-----------------------------+</div><div class="line">|  1 | PRIMARY      | t1         | range | idx_b1        | idx_b1 | 5       | NULL |   18 |   100.00 | Using where; Using index    |</div><div class="line">|  2 | UNION        | t2         | ALL   | NULL          | NULL   | NULL    | NULL | 9999 |   100.00 | Using where; Using filesort |</div><div class="line">| NULL | UNION RESULT | &lt;union1,2&gt; | ALL   | NULL          | NULL   | NULL    | NULL | NULL |     NULL | Using temporary             |</div><div class="line">+----+--------------+------------+-------+---------------+--------+---------+------+------+----------+-----------------------------+</div><div class="line">3 rows in set, 1 warning (0.01 sec)</div></pre></td></tr></table></figure></p>
<h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化:"></a>其他优化:</h3><p>1、SELECT DISTINCT a FROM t1 LIMIT 1;<br>2、SELECT DISTICT MAX(a) FROM t1;</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL查询优化技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Innodb的MVCC实现原理]]></title>
      <url>http://riverdba.github.io/2017/04/01/MVCC-theory-study/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：Innodb的MVCC实现原理学习<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC"></a>什么是MVCC</h3><p>Multi-Version Concurrency Control（多版本并发控制）是一种并发控制方法，在数据库管理系统中用来提供并发访问数据库的能力，在编程语言中实现事务内存。</p>
<h3 id="MVCC的作用"><a href="#MVCC的作用" class="headerlink" title="MVCC的作用"></a>MVCC的作用</h3><p>读不阻塞写，写不阻塞读。提高数据库的并发访问能力！<br>MVCC只兼容RC和RR两种隔离级别。</p>
<h3 id="数据库多版本读场景"><a href="#数据库多版本读场景" class="headerlink" title="数据库多版本读场景"></a>数据库多版本读场景</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">在session1开启一个事务，查询a表的a1记录：</div><div class="line">root@testdb 01:13:24&gt;set tx_isolation=&apos;read-committed&apos;;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@testdb 01:13:43&gt;select @@tx_isolation;</div><div class="line">+----------------+</div><div class="line">| @@tx_isolation |</div><div class="line">+----------------+</div><div class="line">| READ-COMMITTED |</div><div class="line">+----------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@testdb 01:13:48&gt;start transaction;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@testdb 01:14:16&gt;select * from a where a1=1;</div><div class="line">+------+------+</div><div class="line">| a1   | a2   |</div><div class="line">+------+------+</div><div class="line">|    1 | A1   |</div><div class="line">+------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">在session2上开启一个事务将A1改为A2，但不提交：</div><div class="line">root@testdb 11:53:18&gt;set tx_isolation=&apos;read-committed&apos;;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@testdb 01:13:56&gt;select @@tx_isolation;</div><div class="line">+----------------+</div><div class="line">| @@tx_isolation |</div><div class="line">+----------------+</div><div class="line">| READ-COMMITTED |</div><div class="line">+----------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@testdb 01:14:02&gt;start transaction;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@testdb 01:14:28&gt;update a set a2=&apos;A2&apos; where a1=1; </div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line">在session1上查询结果仍然是A1:</div><div class="line">root@testdb 01:14:19&gt;select * from a where a1=1;</div><div class="line">+------+------+</div><div class="line">| a1   | a2   |</div><div class="line">+------+------+</div><div class="line">|    1 | A1   |</div><div class="line">+------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">在session2上进行提交:</div><div class="line">root@testdb 01:14:39&gt;commit;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">在session1上查询结果变成了A2:</div><div class="line">root@testdb 01:14:44&gt;select * from a where a1=1;</div><div class="line">+------+------+</div><div class="line">| a1   | a2   |</div><div class="line">+------+------+</div><div class="line">|    1 | A2   |</div><div class="line">+------+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<p>可以看到隔离级别是RC的时候，当session2未提交时session1读到的是update前的数据，当session2提交后session1读到的数据是update后的数据。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">session1上开启一个事务，查询a表的a1记录：</div><div class="line">root@testdb 11:51:30&gt;select @@tx_isolation;</div><div class="line">+-----------------+</div><div class="line">| @@tx_isolation  |</div><div class="line">+-----------------+</div><div class="line">| REPEATABLE-READ |</div><div class="line">+-----------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@testdb 11:51:54&gt;start transaction;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@testdb 11:52:02&gt;select * from a where a1=1;</div><div class="line">+------+------+</div><div class="line">| a1   | a2   |</div><div class="line">+------+------+</div><div class="line">|    1 | A2   |</div><div class="line">+------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">session2上开启一个事务，将A2改成A1但不提交：</div><div class="line">root@testdb 11:52:32&gt;start transaction;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">root@testdb 11:52:50&gt;update a set a2=&apos;A1&apos; where a1=1; </div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line">Rows matched: 1  Changed: 1  Warnings: 0</div><div class="line">在session1上查到的结果依然为A2：</div><div class="line">root@testdb 11:52:10&gt;select * from a where a1=1;</div><div class="line">+------+------+</div><div class="line">| a1   | a2   |</div><div class="line">+------+------+</div><div class="line">|    1 | A2   |</div><div class="line">+------+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">在session2上进行提交：</div><div class="line">root@testdb 11:53:04&gt;commit;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">在session1上查询到的结果依然为A2：</div><div class="line">root@testdb 11:53:14&gt;select * from a where a1=1;</div><div class="line">+------+------+</div><div class="line">| a1   | a2   |</div><div class="line">+------+------+</div><div class="line">|    1 | A2   |</div><div class="line">+------+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>可以看出隔离级别是RR的情况下，无论session2是否提交，session1查到的数据都是update前的结果。</p>
<h3 id="MVCC实现原理"><a href="#MVCC实现原理" class="headerlink" title="MVCC实现原理"></a>MVCC实现原理</h3><p>从上面可以看出，在不同的隔离级别下，session1看到的数据是不同的。这由innodb中的MVCC通过undo实现的！<br>事务的隔离性是由锁来实现，而原子性、一致性、持久性通过redo和undo完成。</p>
<h4 id="什么是redo"><a href="#什么是redo" class="headerlink" title="什么是redo"></a>什么是redo</h4><p>redo log用来保证事务的原子性和持久性；redo恢复提交事务修改的页操作；redo是物理日志，记录的是页的物理修改操作；redo存放在redo log文件中；</p>
<h4 id="什么是undo"><a href="#什么是undo" class="headerlink" title="什么是undo"></a>什么是undo</h4><p>undo log用来保证事务的一致性；undo回滚行记录到某个特定版本；undo是逻辑日志，根据每行记录进行记录；undo存放在共享表空间的undo段中；</p>
<h4 id="rollback-segment"><a href="#rollback-segment" class="headerlink" title="rollback segment"></a>rollback segment</h4><p>在innodb中，undo log被划分成多个段，具体某行的undo log就保存在某个段中，称为回滚段。</p>
<h4 id="Innodb中MVCC的实现过程"><a href="#Innodb中MVCC的实现过程" class="headerlink" title="Innodb中MVCC的实现过程"></a>Innodb中MVCC的实现过程</h4><p>1、旧数据存储在UNDO中，再通过DB_ROLL_PTR回溯查找历史版本<br>先看下InnoDB的行存储格式（默认是compact格式）：<br><img src="/2017/04/01/MVCC-theory-study/0.png" alt="图0"><br>可以看到每行数据有个DB_ROLL_PTR（7字节的回滚指针），用于指向该行修改前的上一个历史版本（InnoDB里，会将row data修改前的旧数据存储在UNDO中）。当插入的是一条新数据时，记录上对应的回滚段指针为NULL！如下图：<br><img src="/2017/04/01/MVCC-theory-study/1.png" alt="图1"><br>更新记录时，原记录将被放入到undo表空间中，并通过DB_ROLL_PTR指向该记录。session1查询返回的未修改数据就是从这个UNDO中返回的。MySQL就是根据记录上的回滚段指针及事务ID判断记录是否可见，如果不可见继续按照DB_ROLL_PTR继续回溯查找。如下图：<br><img src="/2017/04/01/MVCC-theory-study/2.png" alt="图2"><br>2、通过read view判断行记录是否可见<br>RR隔离级别下：在每个事务开始的时候，会将当前系统中的所有的活跃事务拷贝到一个列表中(read view)。<br>RC隔离级别下：在事务中的每个语句开始时，会将当前系统中的所有的活跃事务拷贝到一个列表中(read view) 。<br>然后按照以下逻辑判断事务的可见性：<br><img src="/2017/04/01/MVCC-theory-study/3.png" alt="图3"><br>并不是用当前事务ID与表中各个数据行上的事务ID去比较的，而是在每个事务开始的时候，会将当前系统中所有的活跃事务拷贝到read view列表，根据read view最早一个事务ID和最晚的一个事务ID做比较，这样就能确保在当前事务之前没提交的所有事务的变更及后续新启动的事务的变更在当前事务中都是看不到的。当前事务自身的变更是可以看到的。</p>
<p>资料来源：<a href="https://mp.weixin.qq.com/s?__biz=MjM5NzAzMTY4NQ==&amp;mid=2653930052&amp;idx=1&amp;sn=eb4cf71dc838e784af27dff2a1ca8d4b&amp;chksm=bd3b582e8a4cd138536baa9a9b8a831f3f34c7790eed4c6f26ffecf0c332636ad896ed9f8da3&amp;mpshare=1&amp;scene=1&amp;srcid=03317XGPfOUvlUZiJVfCeRXk&amp;pass_ticket=TRE0ji3UrLUUrdtDV4lWf1%2FfQ58FwhCZ8QooTXvY9Dc%3D#rd" target="_blank" rel="external">老叶茶馆微信公共号</a></p>
</the>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql故障处理记录1]]></title>
      <url>http://riverdba.github.io/2017/03/30/mysql-troubleshooting01/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：mysql数据库故障处理记录<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="发现故障"><a href="#发现故障" class="headerlink" title="发现故障"></a>发现故障</h3><p>2017-03-29日晚上20点30突然同时收到2条微信告警：（mysql告警:threads_running超过阀值，os告警：cpu usage超过阀值）<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Type: mysql </div><div class="line">Tags: XXX </div><div class="line">Host: 192.168.XXX.XXX:3306 </div><div class="line">Level: critical </div><div class="line">Item: threads_running </div><div class="line">Value: 314 </div><div class="line">Message: too many threads running </div><div class="line">Type: os </div><div class="line">Tags: XXX </div><div class="line">Host: 192.168.XXX.XXX: </div><div class="line">Level: critical </div><div class="line">Item: cpu_idle </div><div class="line">Value: 39% </div><div class="line">Message: too little cpu idle</div></pre></td></tr></table></figure></p>
<h3 id="处理故障"><a href="#处理故障" class="headerlink" title="处理故障"></a>处理故障</h3><p>第一时间登录数据库查看当前运行的SQL：<br><img src="/2017/03/30/mysql-troubleshooting01/1.png" alt="图1"><br>查看慢查询：<br><img src="/2017/03/30/mysql-troubleshooting01/2.png" alt="图2"><br>发现该SQL就是阻塞的根源！<br>查看当前连接数，发现有800多个并发连接卡住，于是第一时间kill掉这些连接以保证业务正常！kill掉连接后数据库连接数下降到正常范围，同时主机CPU也恢复正常！</p>
<h3 id="分析故障"><a href="#分析故障" class="headerlink" title="分析故障"></a>分析故障</h3><p>通过分析这个SQL语句，发现identifying_code字段上是有索引的，这个where条件匹配到的数据存在大量重复（最多的一个identifying_code有十几W行）：<br><img src="/2017/03/30/mysql-troubleshooting01/3.png" alt="图3"><br>而且这些数据中大部分的delete_flag已经是1了。可见这个SQL每次都是将大部分1改为1，并发量大的时候导致每次都锁很多行最终导致连接阻塞。因此可以优化SQL为如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">UPDATE XXX</div><div class="line">    set</div><div class="line">      delete_flag = 1</div><div class="line">    where</div><div class="line">    identifying_code = &apos;1517bfd3f7f4558885a&apos; and delete_flag = 0;</div></pre></td></tr></table></figure></p>
<p>这样每次都只将delete_flag为0的改为1，这个条件过滤后每次符合条件的数据只有1行。就避免了每次update大量数据，减少行锁的发生！</p>
<h3 id="故障总结"><a href="#故障总结" class="headerlink" title="故障总结"></a>故障总结</h3><p>这个属于开发的业务逻辑没考虑完善，同时作为DBA没有结合业务做更细的SQL审核也需要自我检讨。</p>
</the>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 故障诊断 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入理解mysql的主从复制]]></title>
      <url>http://riverdba.github.io/2017/03/29/Deep-comprehend-mysql-replication/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：mysql主从复制原理学习笔记<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="主从复制的架构"><a href="#主从复制的架构" class="headerlink" title="主从复制的架构"></a>主从复制的架构</h3><p><img src="/2017/03/29/Deep-comprehend-mysql-replication/3.png" alt="图3"></p>
<h3 id="主从复制的过程"><a href="#主从复制的过程" class="headerlink" title="主从复制的过程"></a>主从复制的过程</h3><p>当主库上发生事务提交动作时，会记录到主库的binlog中，然后由主库的dump线程发送日志到从库。从库的IO线程负责接收主库的binlog日志并记录到自己的relay log日志。SQL线程负责读取relay log并将数据写入从库。<br>主库的dump线程：<br><img src="/2017/03/29/Deep-comprehend-mysql-replication/0.png" alt="图0"><br>dump线程时刻的等待binlog的变化，一旦变化就将日志发送给从库。<br>从库的IO线程和SQL线程：<br><img src="/2017/03/29/Deep-comprehend-mysql-replication/1.png" alt="图1"><br>从库的IO线程在时刻等待主库的事件发送过来，如果有的话就接受并写入本地的relay log中。<br>从库的SQL线程在时刻等待relay log的变化，一旦有变化就读取并写入数据库。</p>
<p>在主库上看一个事务：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; show master status \G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">             File: mysql-bin.000952</div><div class="line">         Position: 567035014</div><div class="line">     Binlog_Do_DB: </div><div class="line"> Binlog_Ignore_DB: </div><div class="line">Executed_Gtid_Set: 8ac65959-4cb3-11e5-81af-005056a311e0:1-345390234,</div><div class="line">9bc86bd5-a8a0-11e5-991c-005056a3bf07:4-233053957:233053959-572579981</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">ERROR: </div><div class="line">No query specified</div><div class="line"></div><div class="line">mysql&gt; show binlog events in &apos;mysql-bin.000952&apos;;</div><div class="line">| mysql-bin.000952 |    236240 | Query          |       706 |      236317 | BEGIN</div><div class="line">| mysql-bin.000952 |    236317 | Rows_query     |       706 |      236630 | # insert into t_table (task_set_id, user_id, task_set_date,task_terminal,</div><div class="line">      task_set_status, day_tast_id, week_task_id, </div><div class="line">      month_task_id)</div><div class="line">    values (&apos;9edd6ca5ff98443f8981a01dc5eae397&apos;, &apos;37728258&apos;, &apos;2017-03-29&apos;, </div><div class="line">      0,2, &apos;1ecf32416e7711e5ad54005056a3bad5&apos;, &apos;&apos;,</div><div class="line">      &apos;&apos;)                                          </div><div class="line">| mysql-bin.000952 |    236630 | Table_map      |       706 |      236712 | table_id: 82476 (t_db.t_table)  </div><div class="line">| mysql-bin.000952 |    236712 | Write_rows     |       706 |      236839 | table_id: 82476 flags: STMT_END_F              </div><div class="line">| mysql-bin.000952 |    236839 | Xid            |       706 |      236870 | COMMIT /* xid=146158662 */          </div><div class="line">| mysql-bin.000952 |    236870 | Gtid           |       706 |      236918 | SET @@SESSION.GTID_NEXT= &apos;9bc86bd5-a8a0-11e5-991c-005056a3bf07:572102075&apos;</div></pre></td></tr></table></figure></p>
<p>注意该事务COMMIT操作后面的<strong>/* xid=146158662 */</strong> ：这是innodb的内部事务号，用于commit的二阶段提交！<br>单实例mysql（内部XA,需设置innodb_support_xa=on）的commit操作要写2个日志：一个是innodb的redo日志（也就是ib_logfile）是没有归档的，因此会被覆盖掉。另一个是mysql的binlog日志，binlog是不会被覆盖的。<br>开始提交阶段：binlog不提交，redo提交<br>正式提交阶段：binlog提交，如果提交成功，则redo完成！如果提交失败，则redo回滚！</p>
<h3 id="主从复制相关参数"><a href="#主从复制相关参数" class="headerlink" title="主从复制相关参数"></a>主从复制相关参数</h3><p>1、server-id：主从要设置不一样<br>2、read_only：主库设为off，从库设为on<br>3、sql_log_bin：主从都开启<br>4、log_slave_updates：如果要做级联复制(M-S-S)就要开启<br>5、binlog_format：row<br>6、binlog_cache_size：<br>7、max_binlog_size：<br>8、expire_logs_days：binlog保存时间<br>9、binlog-do-db：<br>10、binlog-ignore-db：</p>
<h3 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h3><p>半同步复制的作用：可以保证主库将日志先传输到备库，然后再返回给应用事务提交成功。这个功能对网络要求较高，如果要使用的话建议把网络优化好一点，比如机器配置千M网卡且将同一组主从服务器位于同一交换机下。<br>查看源码包中是否支持半同步：<br><img src="/2017/03/29/Deep-comprehend-mysql-replication/2.png" alt="图2"><br>使用方法：主库安装semisync_master.so，从库安装semisync_slave.so然后开启rpl_semi_sync_master_enabled=on即可<br>主库安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mongohost2 semisync]# /opt/mysql/bin/mysql</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 243535</div><div class="line">Server version: 5.6.35-log Source distribution</div><div class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line">mysql&gt; show variables like &apos;%rpl_semi%&apos;;</div><div class="line">Empty set (0.00 sec)</div><div class="line">mysql&gt; install plugin rpl_semi_sync_master soname &apos;semisync_master.so&apos;;</div><div class="line">Query OK, 0 rows affected (0.04 sec)</div><div class="line">mysql&gt; show variables like &apos;%rpl_semi%&apos;;</div><div class="line">+------------------------------------+-------+</div><div class="line">| Variable_name                      | Value |</div><div class="line">+------------------------------------+-------+</div><div class="line">| rpl_semi_sync_master_enabled       | OFF   |</div><div class="line">| rpl_semi_sync_master_timeout       | 10000 |  #默认是10秒，可以自己调整</div><div class="line">| rpl_semi_sync_master_trace_level   | 32    |</div><div class="line">| rpl_semi_sync_master_wait_no_slave | ON    |</div><div class="line">+------------------------------------+-------+</div><div class="line">4 rows in set (0.00 sec)</div><div class="line">mysql&gt; set global rpl_semi_sync_master_enabled=on;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line">从库：</div><div class="line">mysql&gt; install plugin rpl_semi_sync_slave soname &apos;semisync_slave.so&apos;;</div><div class="line">Query OK, 0 rows affected (0.04 sec)</div></pre></td></tr></table></figure></p>
<h3 id="主从复制常见问题"><a href="#主从复制常见问题" class="headerlink" title="主从复制常见问题"></a>主从复制常见问题</h3><h4 id="主库挂了，如何判断从库是否同步完成？"><a href="#主库挂了，如何判断从库是否同步完成？" class="headerlink" title="主库挂了，如何判断从库是否同步完成？"></a>主库挂了，如何判断从库是否同步完成？</h4><p>从库执行：show slave status \G;<br>查看IO线程读取到主库的binlog日志文件及位置：<br>              Master_Log_File: mysql-bin.000952<br>          Read_Master_Log_Pos: 637762421<br>查看SQL线程执行的文件及位置：<br>        Relay_Master_Log_File: mysql-bin.000952<br>          Exec_Master_Log_Pos: 637762421<br>比较以上两者是否相等。如果都相等说明同步完成，否则没有完成同步！<br>还可以参考：<br>        Seconds_Behind_Master: 0</p>
<p>如果主库重启了。可以通过show master status查看binlog和位置与从库的binlog文件和位置比较是否一致。</p>
<h4 id="mysql主从库同步错误"><a href="#mysql主从库同步错误" class="headerlink" title="mysql主从库同步错误"></a>mysql主从库同步错误</h4><h5 id="错误号：1062"><a href="#错误号：1062" class="headerlink" title="错误号：1062"></a>错误号：1062</h5><p>主键冲突</p>
<h5 id="错误号：1060"><a href="#错误号：1060" class="headerlink" title="错误号：1060"></a>错误号：1060</h5><p>主从DDL不一致</p>
<h5 id="错误号：1032"><a href="#错误号：1032" class="headerlink" title="错误号：1032"></a>错误号：1032</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1032</div><div class="line">Last_Error: Could not execute Update_rows event on table testdb.table; Can&apos;t find record in &apos;table&apos;, Error_code: 1032; handler error HA_ERR_KEY_NOT_FOUND; the event&apos;s master log mysql-bin.000252, end_log_pos 441796235</div></pre></td></tr></table></figure>
<p>原因：主从数据不一致<br>解决办法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; set sql_slave_skip_counter=1;</div><div class="line">如果就个别事务可以先跳过事务再手动同步数据。如果数据量大则只能重做备库！</div></pre></td></tr></table></figure></p>
<h5 id="错误号：1756"><a href="#错误号：1756" class="headerlink" title="错误号：1756"></a>错误号：1756</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1756</div><div class="line">Last_Error: ... The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state. A restart should restore consistency automatically, although using non-transactional storage for data or info tables or DDL queries could lead to problems. In such cases you have to examine your data (see documentation for details).</div></pre></td></tr></table></figure>
<p>alert日志报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2017-05-02 09:19:38 21850 [Warning] Slave SQL: Worker 7 failed executing transaction &apos;7d7ebcb4-4cb3-11e5-81ae-005056a35f06:374729743&apos; at master log </div><div class="line">mysql-bin.000382, end_log_pos 693272629; Could not execute Delete_rows event on table testdb.q_answer; Deadlock found when trying to get lock; try </div><div class="line">restarting transaction, Error_code: 1213; handler error HA_ERR_LOCK_DEADLOCK; the event&apos;s master log mysql-bin.000382, end_log_pos 693272629, Error_</div><div class="line">code: 1213</div><div class="line">2017-05-02 09:19:38 21850 [ERROR] Slave SQL: ... The slave coordinator and worker threads are stopped, possibly leaving data in inconsistent state. </div><div class="line">A restart should restore consistency automatically, although using non-transactional storage for data or info tables or DDL queries could lead to pr</div><div class="line">oblems. In such cases you have to examine your data (see documentation for details). Error_code: 1756</div><div class="line">2017-05-02 09:19:38 21850 [Note] Error reading relay log event: slave SQL thread was killed</div></pre></td></tr></table></figure></p>
<p>原因：死锁导致。<br>疑问：这个报错会不会导致slave上q_answer表的数据不一致？通过确认slave的relaylog和binlog都有记录这个DELETE语句,可能终止slave进程是为了保证这个事务可以重启并正常执行。<br>解决办法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; stop slave;start slave;</div></pre></td></tr></table></figure></p>
<h5 id="错误号：1837"><a href="#错误号：1837" class="headerlink" title="错误号：1837"></a>错误号：1837</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1837</div><div class="line">Last_Error: Worker 7 failed executing transaction &apos;&apos; at master log mysql-bin.000189, end_log_pos 398170585; Error &apos;When @@SESSION.GTID_NEXT is set to a GTID, you must explicitly set it to a different value after a COMMIT or ROLLBACK. Please check GTID_NEXT variable manual page for detailed explanation. Current @@SESSION.GTID_NEXT is &apos;7d7ebcb4-4cb3-11e5-81ae-005056a35f72:198818971&apos;.&apos; on query. Default database: &apos;testdb&apos;. Query: &apos;INSERT INTO table(unit_id, unit_name, unit_type, book_id, sort) VALUES (&apos;130003002653462007003&apos;, &apos;动：综合表演（火车来了）&apos;, 2, &apos;130003002653462&apos;, &apos;130003002653462007003&apos;)&apos;</div></pre></td></tr></table></figure>
<p>原因：不明，可能是BUG，偶尔遇到。<br>解决办法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt; stop slave;start slave;</div><div class="line">如果还不行的话就要重启Mysql实例：service mysqld restart</div></pre></td></tr></table></figure></p>
<h5 id="错误号：1236"><a href="#错误号：1236" class="headerlink" title="错误号：1236"></a>错误号：1236</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_IO_Errno: 1236</div><div class="line">Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &apos;Client requested master to start replication from position &gt; file size; the first event &apos;mysql-bin.000159&apos; at 647052798, the last event read from &apos;/data/log/mysql/mysql-bin.000159&apos; at 4, the last byte read from &apos;/data/log/mysql/mysql-bin.000159&apos; at 4.&apos;</div></pre></td></tr></table></figure>
<p>解决办法：重新指定开始复制的日志位置</p>
<h5 id="错误号：1594"><a href="#错误号：1594" class="headerlink" title="错误号：1594"></a>错误号：1594</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1594</div><div class="line">Last_Error: Relay log read failure: Could not parse relay log event entry. The possible reasons are: the master&apos;s binary log is corrupted (you can check this by running &apos;mysqlbinlog&apos; on the binary log), the slave&apos;s relay log is corrupted (you can check this by running &apos;mysqlbinlog&apos; on the relay log), a network problem, or a bug in the master&apos;s or slave&apos;s MySQL code. If you want to check the master&apos;s binary log or slave&apos;s relay log, you will be able to know their names by issuing &apos;SHOW SLAVE STATUS&apos; on this slave.</div></pre></td></tr></table></figure>
<h5 id="错误号：1118"><a href="#错误号：1118" class="headerlink" title="错误号：1118"></a>错误号：1118</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1118</div><div class="line">Last_Error: Error &apos;Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.&apos; on query. Default database: &apos;testdb&apos;. Query: &apos;update table set content = &apos;&lt;span&gt; &lt;/span&gt; \n&lt;p&gt;\n      &lt;span style=&quot;font-family:宋体;font-size:16px;&quot;&gt;&lt;span&gt;一、创设情境、激发兴趣&lt;/span&gt;&lt;/span&gt; \n&lt;/p&gt;\n&lt;span&gt; &lt;/span&gt;&lt;span style=&quot;font-family:宋体;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;1、结合具体生活情境，回顾认识质量单位千克、克、吨，进一步感受&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;千克、&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;克、&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;吨的实际质量。&lt;/span&gt;&lt;/span&gt; \n&lt;p style=&quot;color:#000000;font-family:&amp;quot;Times New Roman&amp;quot;,serif;font-size:10.5pt;font-style:normal;font-weight:normal;&quot;&gt;\n   &lt;sp</div></pre></td></tr></table></figure>
<h5 id="错误号：1755"><a href="#错误号：1755" class="headerlink" title="错误号：1755"></a>错误号：1755</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1755</div><div class="line">Last_Error: Cannot execute the current event group in the parallel mode. Encountered event Update_rows, relay-log name /data/mysql2/log/mysqld-relay-bin.000125, position 354 which prevents execution of this event group in parallel mode. Reason: the event is a part of a group that is unsupported in the parallel execution mode.</div></pre></td></tr></table></figure>
<p>原因：5.6版本开启GTID后，MSS架构级联复制的时候会遇到这个BUG（备机salve线程执行SQL,主键冲突的话会导致自己的binlog异常，此时如果有其他备机以这台备机作为主机，会出现复制异常。）<br>解决办法：slave库注释掉：#slave-parallel-workers=64然后重启mysql</p>
<h5 id="错误号：1205"><a href="#错误号：1205" class="headerlink" title="错误号：1205"></a>错误号：1205</h5><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Last_Errno: 1205</div><div class="line">Last_Error: Slave SQL thread retried transaction 10 time(s) in vain, giving up. Consider raising the value of the slave_transaction_retries variable.</div></pre></td></tr></table></figure>
<p>原因：slave上的操作被lock阻塞<br>解决：重启slave</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql查询优化技术之语义优化]]></title>
      <url>http://riverdba.github.io/2017/03/28/Sematic-Optimization-of-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：工作中遇到的SQL语义优化案例<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="发现慢SQL"><a href="#发现慢SQL" class="headerlink" title="发现慢SQL"></a>发现慢SQL</h3><p>通过监控慢查询，执行时间在1秒以上的SQL如下：<br><img src="/2017/03/28/Sematic-Optimization-of-mysql/图片1.png" alt="图片1"><br>完整SQL：<br><img src="/2017/03/28/Sematic-Optimization-of-mysql/图片2.png" alt="图片2"><br>查看表结构：<br><img src="/2017/03/28/Sematic-Optimization-of-mysql/图片3.png" alt="图片3"><br>查看执行计划：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">EXPLAIN extended</div><div class="line">SELECT id, content, content_type, receiver_id, TYPE, function_type, function_id,</div><div class="line">read_status, send_time, read_time, STATUS</div><div class="line">FROM</div><div class="line">xxxtable</div><div class="line">WHERE receiver_id = &apos;1667510020&apos;</div><div class="line">AND STATUS = 1</div><div class="line">AND TYPE = 2</div><div class="line">AND send_time &lt; &apos;2017-03-22 08:35:50.553&apos; </div><div class="line">AND DATE_SUB(CURDATE(), INTERVAL 12 MONTH ) &lt;= DATE(send_time) </div><div class="line">ORDER BY send_time DESC LIMIT 1; </div><div class="line">/* select#1 */</div><div class="line">select </div><div class="line">`xxxxdb`.`xxxxtable`.`id` AS `id`,</div><div class="line">`xxxxdb`.`xxxxtable`.`content` AS `content`,</div><div class="line">`xxxxdb`.`xxxxtable`.`content_type` AS `content_type`,</div><div class="line">`xxxxdb`.`xxxxtable`.`receiver_id` AS `receiver_id`,</div><div class="line">`xxxxdb`.`xxxxtable`.`type` AS `TYPE`,</div><div class="line">`xxxxdb`.`xxxxtable`.`function_type` AS `function_type`,</div><div class="line">`xxxxdb`.`xxxxtable`.`function_id` AS `function_id`,</div><div class="line">`xxxxdb`.`xxxxtable`.`read_status` AS `read_status`,</div><div class="line">`xxxxdb`.`xxxxtable`.`send_time` AS `send_time`,</div><div class="line">`xxxxdb`.`xxxxtable`.`read_time` AS `read_time`,</div><div class="line">`xxxxdb`.`xxxxtable`.`status` AS `STATUS` </div><div class="line">from</div><div class="line">`xxxxdb`.`xxxxtable` </div><div class="line">where (</div><div class="line">(</div><div class="line">`xxxxdb`.`xxxxtable`.`type` = 2</div><div class="line">) </div><div class="line">and (</div><div class="line">`xxxxdb`.`xxxxtable`.`status` = 1</div><div class="line">) </div><div class="line">and (</div><div class="line">`xxxxdb`.`xxxxtable`.`receiver_id` = &apos;1667510020&apos;</div><div class="line">) </div><div class="line">and (</div><div class="line">`xxxxdb`.`xxxxtable`.`send_time` &lt; &apos;2017-03-22 08:35:50.553&apos;</div><div class="line">) </div><div class="line">and (</div><div class="line">&lt; cache &gt; ((curdate() - interval 12 month)) &lt;= cast(</div><div class="line">`xxxxdb`.`xxxxtable`.`send_time` as date</div><div class="line">)</div><div class="line">)</div><div class="line">) </div><div class="line">order by `xxxxdb`.`xxxxtable`.`send_time` desc </div><div class="line">limit 1</div></pre></td></tr></table></figure></p>
<h3 id="优化一"><a href="#优化一" class="headerlink" title="优化一"></a>优化一</h3><p>从表结构定义上看，已经有receiver_id和send_time的联合索引就没必要单独再需要receiver_id索引了。因此可以先drop掉索引idx_receiverid！</p>
<h3 id="优化二"><a href="#优化二" class="headerlink" title="优化二"></a>优化二</h3><p>从SQL语义上看，最关键的是发送时间条件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">AND send_time &lt; &apos;2017-03-22 08:35:50.553&apos; </div><div class="line">AND DATE_SUB(CURDATE(), INTERVAL 12 MONTH ) &lt;= DATE(send_time)</div></pre></td></tr></table></figure></p>
<p>初步判断业务需求是要查询发送时间小于当前时间，且发送时间在最近12个月内的数据。<br>Send_time数据库中的时间戳格式是：年月日时分秒毫秒，这里却对send_time字段做了date函数转换，开发者目的是为了和12个月前的年月日格式进行比对。为什么不直接让send_time和12个月前的年月日时分秒毫秒格式进行比对呢？这样不就可以去掉对索引字段做函数了吗。因此，我们可以将这2个条件改写为如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">AND send_time &lt; &apos;2017-03-22 08:35:50.553&apos; </div><div class="line">AND send_time &gt;= DATE_SUB(NOW(), INTERVAL 12 MONTH )</div></pre></td></tr></table></figure></p>
<p>优化后的执行计划：<br><img src="/2017/03/28/Sematic-Optimization-of-mysql/图片4.png" alt="图片4"><br>这句SQL在优化前的执行计划中是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">and (</div><div class="line">&lt; cache &gt; ((curdate() - interval 12 month)) &lt;= cast(</div><div class="line">`xxxxdb`.`xxxxtable`.`send_time` as date</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>通过对比可以看到优化后省去了mysql对字段做类型转换的工作，同时可以充分利用该字段的索引。</p>
</the>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL查询优化技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo's tips]]></title>
      <url>http://riverdba.github.io/2017/03/28/hexo-s-tips/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>摘要：hexo小技巧汇总<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="如何修改新建文章模板"><a href="#如何修改新建文章模板" class="headerlink" title="如何修改新建文章模板"></a>如何修改新建文章模板</h3><p>一般文章都需要添加分类和摘要，我们可以加到模板中。进入到hexo根目录的scaffolds下可以看到三个md文件：draft.md\page.md\post.md<br>在post.md中添加分类和摘要后：<br><img src="/2017/03/28/hexo-s-tips/1.png" alt="图片1"><br>这样新建文章的时候就包含分类和摘要了。</p>
<h3 id="如何在博客中引用本地图片"><a href="#如何在博客中引用本地图片" class="headerlink" title="如何在博客中引用本地图片"></a>如何在博客中引用本地图片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">首先修改_config.yml中参数 post_asset_folder:true，这样设置后在新建文章时，Hexo会自动创建一个与文章同名的文件夹用来存放图片</div><div class="line">然后安装插件：npm install https://github.com/CodeFalling/hexo-asset-image --save</div><div class="line">引用图片：将图片放在文章同名的文件夹中，比如图片名称：1.png，在md中书写：![图1](hexo-s-comment/1.png)即可。</div></pre></td></tr></table></figure>
<h3 id="报错日志及解决"><a href="#报错日志及解决" class="headerlink" title="报错日志及解决"></a>报错日志及解决</h3><p>1、发布博客遇到报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</div></pre></td></tr></table></figure></p>
<p>报错原因：根据日志定位到第5行，第1列的内容是：categories:Hexo。分类冒号后面需要加个空格再写内容！<br>解决办法：改成categories: Hexo即可！<br>2、将博客发布到远程报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh: connect to host github.com port 22: Connection timed out</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div><div class="line">Error: ssh: connect to host github.com port 22: Connection timed out</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">    at ChildProcess.&lt;anonymous&gt; (D:\src\Git\imdba\node_modules\hexo-util\lib\spawn.js:37:17)</div><div class="line">    at emitTwo (events.js:106:13)</div><div class="line">    at ChildProcess.emit (events.js:191:7)</div><div class="line">    at ChildProcess.cp.emit (D:\src\Git\imdba\node_modules\cross-spawn\lib\enoent.js:40:29)</div><div class="line">    at maybeClose (internal/child_process.js:877:16)</div><div class="line">    at Socket.&lt;anonymous&gt; (internal/child_process.js:334:11)</div><div class="line">    at emitOne (events.js:96:13)</div><div class="line">    at Socket.emit (events.js:188:7)</div><div class="line">    at Pipe._handle.close [as _onclose] (net.js:498:12)</div><div class="line">FATAL ssh: connect to host github.com port 22: Connection timed out</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">Error: ssh: connect to host github.com port 22: Connection timed out</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">    at ChildProcess.&lt;anonymous&gt; (D:\src\Git\imdba\node_modules\hexo-util\lib\spawn.js:37:17)</div><div class="line">    at emitTwo (events.js:106:13)</div><div class="line">    at ChildProcess.emit (events.js:191:7)</div><div class="line">    at ChildProcess.cp.emit (D:\src\Git\imdba\node_modules\cross-spawn\lib\enoent.js:40:29)</div><div class="line">    at maybeClose (internal/child_process.js:877:16)</div><div class="line">    at Socket.&lt;anonymous&gt; (internal/child_process.js:334:11)</div><div class="line">    at emitOne (events.js:96:13)</div><div class="line">    at Socket.emit (events.js:188:7)</div><div class="line">    at Pipe._handle.close [as _onclose] (net.js:498:12)</div></pre></td></tr></table></figure></p>
<p>报错原因：网络问题<br>解决办法：关闭VPN，重新发布即可。</p>
</the>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[实现hexo的评论功能]]></title>
      <url>http://riverdba.github.io/2017/03/27/hexo-s-comment/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>本文介绍如何在博客中添加评论功能！<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>1、首先需要到<a href="https://disqus.com" target="_blank" rel="external">disqus官网</a>注册账号，然后使用账号登录。<br>2、通过账号登录 disqus后，点击“settings”–&gt;在下拉列表中选择“add disqus to site”如图：<br><img src="/2017/03/27/hexo-s-comment/1.png" alt="图1"><br>3、浏览到该网页最下方选择“get started”如图：<br><img src="/2017/03/27/hexo-s-comment/2.png" alt="图2"><br>4、然后点击“i want to install Disqus on my site”：<br><img src="/2017/03/27/hexo-s-comment/3.png" alt="图3"><br>5、创建站点：<br><img src="/2017/03/27/hexo-s-comment/4.png" alt="图4"><br>6、完成create site后就能看到shortname了：<br><img src="/2017/03/27/hexo-s-comment/5.png" alt="图5"><br>7、选择advanced，在Trusted Domains中添加：github.com,github.io<br><img src="/2017/03/27/hexo-s-comment/6.png" alt="图6"><br>注意：一次只能添加一个域名<br>8、最后将shortname填到hexo主题的配置文件中：D:\src\Git\imdba\themes\yelee_config.yml改成如下内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">disqus: </div><div class="line">  on: true</div><div class="line">  shortname: xxx</div></pre></td></tr></table></figure></the></p>
<p>重新部署下博客，就可以看到每篇文章后面都有评论功能了。<br>有个前提：要登录disqus账号才可以查看和回复评论！</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> disqus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql性能调优的关键点]]></title>
      <url>http://riverdba.github.io/2017/03/27/Performance-tuning-key-points-of-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>本文记录了一些mysql性能调优相关知识。<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h2 id="服务器参数调优，有哪些关键点？"><a href="#服务器参数调优，有哪些关键点？" class="headerlink" title="服务器参数调优，有哪些关键点？"></a>服务器参数调优，有哪些关键点？</h2><h3 id="操作系统的选择"><a href="#操作系统的选择" class="headerlink" title="操作系统的选择"></a>操作系统的选择</h3><p>建议安装在64bit的linux平台（centos\linux\suse）。</p>
<h3 id="关闭SWAP"><a href="#关闭SWAP" class="headerlink" title="关闭SWAP"></a>关闭SWAP</h3><p>设置vm.swappiness = 10，如果设置为0当内存不足时会导致OOM。</p>
<h3 id="关闭NUMA"><a href="#关闭NUMA" class="headerlink" title="关闭NUMA"></a>关闭NUMA</h3><p>如果是单实例部署，需要关闭NUMA。关闭NUMA有3种方式：BIOS中关闭、OS内核中关闭、启动MYSQL时关闭。</p>
<h3 id="多网卡绑定"><a href="#多网卡绑定" class="headerlink" title="多网卡绑定"></a>多网卡绑定</h3><p>一定要做双网卡绑定。关键网络参数调整：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">net.ipv4.tcp_keepalive_time = 120  #用于减少失效tcp连接占用的资源，加快资源回收的效率</div><div class="line">net.ipv4.tcp_keepalive_intvl = 30  #用于减少失效tcp连接占用的资源，加快资源回收的效率</div><div class="line">net.ipv4.tcp_keepalive_probes = 3  #用于减少失效tcp连接占用的资源，加快资源回收的效率</div><div class="line">net.core.rmem_max = 4194304 #最大socket读buffer（单位：字节数）</div><div class="line">net.core.wmem_max = 4194304 #最大socket写buffer（单位：字节数）</div><div class="line">net.ipv4.tcp_moderate_rcvbuf = 1 #开启recv buffer自动调节机制</div><div class="line">net.ipv4.tcp_wmem = 4096        16384   4194304 #为socket发送缓冲区分配的字节数（依次是最小值、默认值、最大值）</div><div class="line">net.ipv4.tcp_rmem = 4096        87380   4194304 #为socket接受缓冲区分配的字节数（依次是最小值、默认值、最大值）</div></pre></td></tr></table></figure></p>
<h3 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h3><p>建议采用deadline。磁盘调度设置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo deadline &gt; /sys/block/fioa/queue/schedule</div></pre></td></tr></table></figure></p>
<p>查看设置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql_42 ~]# cat /sys/block/sda/queue/scheduler </div><div class="line">noop anticipatory deadline [cfq]</div></pre></td></tr></table></figure></p>
<h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>推荐选择xfs\ext4，格式化时记得添加noatime,nobarrier参数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[root@mysql_42 ~]# mount</div><div class="line">/dev/sda3 on / type ext4 (rw)</div><div class="line">proc on /proc type proc (rw)</div><div class="line">sysfs on /sys type sysfs (rw)</div><div class="line">devpts on /dev/pts type devpts (rw,gid=5,mode=620)</div><div class="line">tmpfs on /dev/shm type tmpfs (rw)</div><div class="line">/dev/sda1 on /boot type ext4 (rw)</div><div class="line">/dev/sdb on /data type ext4 (rw)</div><div class="line">/dev/sdc on /log type ext4 (rw)</div><div class="line">none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)</div></pre></td></tr></table></figure></p>
<h3 id="调大open-files"><a href="#调大open-files" class="headerlink" title="调大open files"></a>调大open files</h3><p>一定要调大open files，可以通过命令：ulimit -n查看。</p>
<h3 id="修改-etc-hosts绑定IP和主机名。"><a href="#修改-etc-hosts绑定IP和主机名。" class="headerlink" title="修改/etc/hosts绑定IP和主机名。"></a>修改/etc/hosts绑定IP和主机名。</h3><h2 id="MySQL性能调优有哪些关键点-经验？"><a href="#MySQL性能调优有哪些关键点-经验？" class="headerlink" title="MySQL性能调优有哪些关键点/经验？"></a>MySQL性能调优有哪些关键点/经验？</h2><h3 id="实例参数调优"><a href="#实例参数调优" class="headerlink" title="实例参数调优"></a>实例参数调优</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">innodb_buffer_pool_size=物理内存的60%-80%  #总IO能力</div><div class="line">innodb_thread_concurrency=CPU的核数  #线程的并发数</div><div class="line">query_cache_type=0  #禁用结果集缓存，一般通过redis\memcache缓存</div><div class="line">query_cache_size=0  #禁用结果集缓存</div><div class="line">max_user_connections=应用连接池大小X应用服务器的数量 #连接数设置要考虑每个会话占用的内存</div><div class="line">interactive_timeout=8小时 #交互连接空闲超时</div><div class="line">wait_timeout=8小时 #非交互的连接空闲超时</div><div class="line">innodb_io_capacity=20000（SSD盘） #innodb每秒后台进程处理IO操作的数据页（page）上限</div><div class="line">innodb_flush_log_at_trx_commit=1 #每次事务提交都刷盘，可保证数据安全。若设置为0的话是每秒刷盘，和提交没关系，不建议。设置为2的话每次提交会把数据存到操作系统的缓存中，然后定期刷盘。如果操作系统挂掉了数据就丢了。5.6以后该参数没有性能问题了。</div><div class="line">sync_binlog=1#1个提交就把日志从缓存写到日志文件</div><div class="line">innodb_log_file_size=1-2G（SAS盘）；4-8G（SSD盘）#日志文件的大小，若设置太小日志文件会频繁切换产生新文件，影响IO能力。</div><div class="line">innodb_log_files_in_group=4-8 #日志组的数量</div><div class="line">innodb_flush_method=O_DIRECT #刷脏块的方式：直接落盘，避免数据多次被cache</div><div class="line">innodb_max_dirty_pages_pct=50 #innodb buffer cache中的脏块刷到磁盘的比例</div><div class="line">innodb_flush_neighbors=0 #合并相邻页数据为1个IO：SAS建议开启，SSD可以关闭</div><div class="line">transaction-isolation = READ-COMMITTED #隔离级别</div></pre></td></tr></table></figure>
<h3 id="SQL调优"><a href="#SQL调优" class="headerlink" title="SQL调优"></a>SQL调优</h3><p>1、制定SQL编写规范，约束开发人员从项目开始阶段就编写出高效的SQL：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1、禁止多于3表的join</div><div class="line">2、不要select *</div><div class="line">3、count(*) 尽量用redis缓存去做</div><div class="line">4、避免多作的排序  比如group by 时不用 排序 order by null</div><div class="line">5、模糊查询前缀不用要%  如 like &apos;ss%&apos;</div><div class="line">6、使用in 代替 or</div><div class="line">7、禁止隐式转换</div><div class="line">8、禁止负向查询 如 not in, != ,not like等</div><div class="line">9、尽量用union all 代替  union  ,union 会排序去重</div><div class="line">10、where尽量早过滤</div><div class="line">11、不做计算 如select id*10.2 from t1 </div><div class="line">12、用id条件过滤数据后再分页where id&gt;10000 limit 10，不要用 limit 10000,10</div></pre></td></tr></table></figure></p>
<p>2、实时监控慢查询，通过分析执行计划优化SQL语句<br>3、合理的进行索引设计<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">覆盖索引</div><div class="line">1、查询谓词都能通过index进行扫描</div><div class="line">2、排序谓词都能利用index的有序性</div><div class="line">3、index包含了查询所需要的所有字段，这样只用索引就不用查表了</div><div class="line">不能使用索引</div><div class="line">1、不要给选择率低的字段建索引（通过索引扫描记录超30%就全表扫描了） 如 性别 男和女 直接查表快走索引更慢</div><div class="line">2、联合索引中，第一个索引不要使用范围查询，第一个查询条件不要是最左索引列</div><div class="line">3、like 查询最左 不要是%开始</div><div class="line">4、两个独立索引，一个用于检索，一个用于排序，（索引不是越多越好，尽量合并）</div><div class="line">5、表关联字段类型不一样（长度不一样）不会走索引</div><div class="line">6、索引字段使用函数</div><div class="line">7、不要使用外键约束</div></pre></td></tr></table></figure></p>
<h3 id="架构调优"><a href="#架构调优" class="headerlink" title="架构调优"></a>架构调优</h3><p>实时监控大表，合理制定拆分方案实施分库分表。</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL性能调优技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql查询优化技术之连接消除]]></title>
      <url>http://riverdba.github.io/2017/03/22/join-elimination-technique-of-mysql/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>本文是关于mysql的连接消除技术：外连接消除、连接消除、嵌套连接消除。<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="连接消除技术包括三种：外连接消除、连接消除、嵌套连接消除"><a href="#连接消除技术包括三种：外连接消除、连接消除、嵌套连接消除" class="headerlink" title="连接消除技术包括三种：外连接消除、连接消除、嵌套连接消除"></a>连接消除技术包括三种：外连接消除、连接消除、嵌套连接消除</h3><p><font color="#0099ff" size="4" face="微软雅黑">1、外连接消除</font><br>外连接消除就是把外连接变为内连接。之所以要消除外连接，是因为查询优化器在处理外连接操作时所消耗的时间多于内连接，因此消除外连接后可以加快查询速度。同时可以减少不必要的I/O开销，加快算法执行速度。<br>创建测试表并插入数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE TABLE t_1 (t_1_id INT UNIQUE, t_1_col_1 INT, t_1_col_2 VARCHAR(10));</div><div class="line">CREATE TABLE t_2 (t_2_id INT UNIQUE, t_2_col_1 INT, t_2_col_2 VARCHAR(10));</div><div class="line">INSERT INTO t_1 VALUES (1, 11, &apos;t_1_1&apos;);   INSERT INTO t_1 VALUES (2, 12, NULL);</div><div class="line">INSERT INTO t_1 VALUES (3, NULL, &apos;t_1_3&apos;); INSERT INTO t_1 VALUES (4, 14, &apos;t_1_4&apos;);</div><div class="line">INSERT INTO t_1 VALUES (5, 15, NULL);      INSERT INTO t_1 VALUES (7, NULL, NULL);</div><div class="line">INSERT INTO t_2 VALUES (1, 11, &apos;t_2_1&apos;);   INSERT INTO t_2 VALUES (2, NULL, &apos;t_2_2&apos;);</div><div class="line">INSERT INTO t_2 VALUES (3, 13, NULL);      INSERT INTO t_2 VALUES (4, 14, &apos;t_2_4&apos;);</div><div class="line">INSERT INTO t_2 VALUES (6, 16, &apos;t_2_6&apos;);   INSERT INTO t_2 VALUES (7, NULL, NULL);</div><div class="line">root@testdb 02:21:55&gt;select * from t_1;</div><div class="line">+--------+-----------+-----------+</div><div class="line">| t_1_id | t_1_col_1 | t_1_col_2 |</div><div class="line">+--------+-----------+-----------+</div><div class="line">|      1 |        11 | t_1_1     |</div><div class="line">|      2 |        12 | NULL      |</div><div class="line">|      3 |      NULL | t_1_3     |</div><div class="line">|      4 |        14 | t_1_4     |</div><div class="line">|      5 |        15 | NULL      |</div><div class="line">|      7 |      NULL | NULL      |</div><div class="line">+--------+-----------+-----------+</div><div class="line">6 rows in set (0.00 sec)</div><div class="line">root@testdb 02:22:08&gt;select * from t_2;</div><div class="line">+--------+-----------+-----------+</div><div class="line">| t_2_id | t_2_col_1 | t_2_col_2 |</div><div class="line">+--------+-----------+-----------+</div><div class="line">|      1 |        11 | t_2_1     |</div><div class="line">|      2 |      NULL | t_2_2     |</div><div class="line">|      3 |        13 | NULL      |</div><div class="line">|      4 |        14 | t_2_4     |</div><div class="line">|      6 |        16 | t_2_6     |</div><div class="line">|      7 |      NULL | NULL      |</div><div class="line">+--------+-----------+-----------+</div><div class="line">6 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>语句一：使用TRUE作为ON的子句，WHERE子句包括连接条件且WHERE条件可以保证从结果中排除外连接右侧（右表）生成的值为NULL的行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 02:48:44&gt;SELECT * FROM t_1 LEFT JOIN t_2 ON true WHERE t_1_id = t_2_id;</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</div><div class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</div><div class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</div><div class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</div><div class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">5 rows in set (0.00 sec)</div><div class="line">root@testdb 02:22:11&gt;explain extended SELECT * FROM t_1 LEFT JOIN t_2 ON true WHERE t_1_id = t_2_id;show warnings;</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref               | rows | filtered | Extra |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">|  1 | SIMPLE      | t_1   | ALL  | t_1_id        | NULL   | NULL    | NULL              |    6 |   100.00 | NULL  |</div><div class="line">|  1 | SIMPLE      | t_2   | ref  | t_2_id        | t_2_id | 5       | testdb.t_1.t_1_id |    1 |   100.00 | NULL  |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">2 rows in set, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                                                                                                 |</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`t_1`.`t_1_id` AS `t_1_id`,`testdb`.`t_1`.`t_1_col_1` AS `t_1_col_1`,`testdb`.`t_1`.`t_1_col_2` AS `t_1_col_2`,`testdb`.`t_2`.`t_2_id` AS `t_2_id`,`testdb`.`t_2`.`t_2_col_1` AS `t_2_col_1`,`testdb`.`t_2`.`t_2_col_2` AS `t_2_col_2` from `testdb`.`t_1` join `testdb`.`t_2` where (`testdb`.`t_2`.`t_2_id` = `testdb`.`t_1`.`t_1_id`) |</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">从执行计划看到被优化器处理后的语句由left join优化成了join。</div></pre></td></tr></table></figure></p>
<p>语句二：使用ON子句包括连接条件，并不能保证从结果中排除外连接右侧（右表）生成的值为NULL的行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 02:53:25&gt;SELECT * FROM t_1 LEFT JOIN t_2 ON t_1_id = t_2_id;</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</div><div class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</div><div class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</div><div class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</div><div class="line">|      5 |        15 | NULL      |   NULL |      NULL | NULL      |</div><div class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">6 rows in set (0.01 sec)</div><div class="line">root@testdb 03:06:26&gt;explain extended SELECT * FROM t_1 LEFT JOIN t_2 ON t_1_id = t_2_id;show warnings;</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref               | rows | filtered | Extra |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">|  1 | SIMPLE      | t_1   | ALL  | NULL          | NULL   | NULL    | NULL              |    6 |   100.00 | NULL  |</div><div class="line">|  1 | SIMPLE      | t_2   | ref  | t_2_id        | t_2_id | 5       | testdb.t_1.t_1_id |    1 |   100.00 | NULL  |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">2 rows in set, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">+-------+------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                                                                                                            |</div><div class="line">+-------+------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`t_1`.`t_1_id` AS `t_1_id`,`testdb`.`t_1`.`t_1_col_1` AS `t_1_col_1`,`testdb`.`t_1`.`t_1_col_2` AS `t_1_col_2`,`testdb`.`t_2`.`t_2_id` AS `t_2_id`,`testdb`.`t_2`.`t_2_col_1` AS `t_2_col_1`,`testdb`.`t_2`.`t_2_col_2` AS `t_2_col_2` from `testdb`.`t_1` left join `testdb`.`t_2` on((`testdb`.`t_1`.`t_1_id` = `testdb`.`t_2`.`t_2_id`)) where 1 |</div><div class="line">+-------+------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">可以看到这个结果集第5行的右侧结果集存在NULL的情况，其执行计划依然是left join，是没办法优化为join的。</div></pre></td></tr></table></figure></p>
<p>语句三：使用ON和WHERE子句包括连接条件,可以保证从结果中排除外连接右侧（右表）生成的值为NULL的行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 03:06:42&gt;SELECT * FROM t_1 LEFT JOIN t_2 ON t_1_id = t_2_id WHERE t_1_id = t_2_id;</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">| t_1_id | t_1_col_1 | t_1_col_2 | t_2_id | t_2_col_1 | t_2_col_2 |</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">|      1 |        11 | t_1_1     |      1 |        11 | t_2_1     |</div><div class="line">|      2 |        12 | NULL      |      2 |      NULL | t_2_2     |</div><div class="line">|      3 |      NULL | t_1_3     |      3 |        13 | NULL      |</div><div class="line">|      4 |        14 | t_1_4     |      4 |        14 | t_2_4     |</div><div class="line">|      7 |      NULL | NULL      |      7 |      NULL | NULL      |</div><div class="line">+--------+-----------+-----------+--------+-----------+-----------+</div><div class="line">5 rows in set (0.00 sec)</div><div class="line"></div><div class="line">root@testdb 03:11:24&gt;explain extended SELECT * FROM t_1 LEFT JOIN t_2 ON t_1_id = t_2_id WHERE t_1_id = t_2_id;</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref               | rows | filtered | Extra |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">|  1 | SIMPLE      | t_1   | ALL  | t_1_id        | NULL   | NULL    | NULL              |    6 |   100.00 | NULL  |</div><div class="line">|  1 | SIMPLE      | t_2   | ref  | t_2_id        | t_2_id | 5       | testdb.t_1.t_1_id |    1 |   100.00 | NULL  |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------+</div><div class="line">2 rows in set, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">root@testdb 03:11:38&gt;show warnings;</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                                                                                                 |</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`t_1`.`t_1_id` AS `t_1_id`,`testdb`.`t_1`.`t_1_col_1` AS `t_1_col_1`,`testdb`.`t_1`.`t_1_col_2` AS `t_1_col_2`,`testdb`.`t_2`.`t_2_id` AS `t_2_id`,`testdb`.`t_2`.`t_2_col_1` AS `t_2_col_1`,`testdb`.`t_2`.`t_2_col_2` AS `t_2_col_2` from `testdb`.`t_1` join `testdb`.`t_2` where (`testdb`.`t_2`.`t_2_id` = `testdb`.`t_1`.`t_1_id`) |</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">可以看到语句三同语句一是一样的，被优化器处理后的语句由left join优化成了join。</div></pre></td></tr></table></figure></p>
<p>语句四：当外表的索引列出现在WHERE子句中，可以看到依然是left join无法被优化。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 03:11:38&gt;EXPLAIN EXTENDED SELECT * FROM t_1 LEFT JOIN t_2 ON t_1_id = t_2_id WHERE t_1_id&gt;0;show warnings;</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------------+</div><div class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref               | rows | filtered | Extra       |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------------+</div><div class="line">|  1 | SIMPLE      | t_1   | ALL  | t_1_id        | NULL   | NULL    | NULL              |    6 |   100.00 | Using where |</div><div class="line">|  1 | SIMPLE      | t_2   | ref  | t_2_id        | t_2_id | 5       | testdb.t_1.t_1_id |    1 |   100.00 | NULL        |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------------+</div><div class="line">2 rows in set, 1 warning (0.00 sec)</div><div class="line">注：左向外连接的结果集包括左表(t_1)所有的行，不仅是连接所匹配的行，还包括左表某行在右表中没有匹配的行用NULL表示。</div><div class="line">+-------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                                                                                                                                        |</div><div class="line">+-------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`t_1`.`t_1_id` AS `t_1_id`,`testdb`.`t_1`.`t_1_col_1` AS `t_1_col_1`,`testdb`.`t_1`.`t_1_col_2` AS `t_1_col_2`,`testdb`.`t_2`.`t_2_id` AS `t_2_id`,`testdb`.`t_2`.`t_2_col_1` AS `t_2_col_1`,`testdb`.`t_2`.`t_2_col_2` AS `t_2_col_2` from `testdb`.`t_1` left join `testdb`.`t_2` on((`testdb`.`t_2`.`t_2_id` = `testdb`.`t_1`.`t_1_id`)) where (`testdb`.`t_1`.`t_1_id` &gt; 0) |</div><div class="line">+-------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>语句五：当内表的索引列出现在WHERE子句中，left join可以被优化join。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 03:21:22&gt;EXPLAIN EXTENDED SELECT * FROM t_1 LEFT JOIN t_2 ON t_1_id = t_2_id WHERE t_2_id&gt;0;show warnings;</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------------+</div><div class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref               | rows | filtered | Extra       |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------------+</div><div class="line">|  1 | SIMPLE      | t_1   | ALL  | t_1_id        | NULL   | NULL    | NULL              |    6 |   100.00 | Using where |</div><div class="line">|  1 | SIMPLE      | t_2   | ref  | t_2_id        | t_2_id | 5       | testdb.t_1.t_1_id |    1 |   100.00 | NULL        |</div><div class="line">+----+-------------+-------+------+---------------+--------+---------+-------------------+------+----------+-------------+</div><div class="line">2 rows in set, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                                                                                                                                     |</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`t_1`.`t_1_id` AS `t_1_id`,`testdb`.`t_1`.`t_1_col_1` AS `t_1_col_1`,`testdb`.`t_1`.`t_1_col_2` AS `t_1_col_2`,`testdb`.`t_2`.`t_2_id` AS `t_2_id`,`testdb`.`t_2`.`t_2_col_1` AS `t_2_col_1`,`testdb`.`t_2`.`t_2_col_2` AS `t_2_col_2` from `testdb`.`t_1` join `testdb`.`t_2` where ((`testdb`.`t_2`.`t_2_id` = `testdb`.`t_1`.`t_1_id`) and (`testdb`.`t_1`.`t_1_id` &gt; 0)) |</div><div class="line">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>综上实例可以知道外连接优化的本质：语义上是外连接，但WHER条件使得外连接可以蜕化为内连接</p>
<p><font color="#0099ff" size="4" face="微软雅黑">2、连接消除</font><br>连接消除就是去掉不必要的连接对象，减少连接操作。<br>准备测试数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 03:44:52&gt;select * from t1 limit 1;</div><div class="line">+----+------+</div><div class="line">| a1 | b1   |</div><div class="line">+----+------+</div><div class="line">|  1 | 1    |</div><div class="line">+----+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@testdb 03:45:05&gt;select * from t2 limit 1; </div><div class="line">+----+------+</div><div class="line">| a2 | b2   |</div><div class="line">+----+------+</div><div class="line">|  1 |    1 |</div><div class="line">+----+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@testdb 03:45:10&gt;select * from t3 limit 1; </div><div class="line">+----+------+</div><div class="line">| a3 | b3   |</div><div class="line">+----+------+</div><div class="line">|  1 |    1 |</div><div class="line">+----+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>语句1：唯一键/主键作为连接条件，三表内连接可以去掉中间表（mysql优化器不支持，需人工去掉）<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 03:47:24&gt;select t1.*,t3.* from t1 join t2 on (a1=a2) join t3 on (a2=a3) limit 1;</div><div class="line">+----+------+----+------+</div><div class="line">| a1 | b1   | a3 | b3   |</div><div class="line">+----+------+----+------+</div><div class="line">|  1 | 1    |  1 |    1 |</div><div class="line">+----+------+----+------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">root@testdb 04:04:24&gt;explain extended select t1.*,t3.* from t1 join t2 on (a1=a2) join t3 on (a2=a3) limit 1;show warnings;</div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+--------------+------+----------+-------------+</div><div class="line">| id | select_type | table | type   | possible_keys | key     | key_len | ref          | rows | filtered | Extra       |</div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+--------------+------+----------+-------------+</div><div class="line">|  1 | SIMPLE      | t1    | index  | PRIMARY       | idx_b1  | 21      | NULL         | 9977 |   100.00 | Using index |</div><div class="line">|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | testdb.t1.a1 |    1 |   100.00 | Using index |</div><div class="line">|  1 | SIMPLE      | t3    | eq_ref | PRIMARY       | PRIMARY | 4       | testdb.t1.a1 |    1 |   100.00 | NULL        |</div><div class="line">+----+-------------+-------+--------+---------------+---------+---------+--------------+------+----------+-------------+</div><div class="line">3 rows in set, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">+-------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                            |</div><div class="line">+-------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`t1`.`a1` AS `a1`,`testdb`.`t1`.`b1` AS `b1`,`testdb`.`t3`.`a3` AS `a3`,`testdb`.`t3`.`b3` AS `b3` from `testdb`.`t1` join `testdb`.`t2` join `testdb`.`t3` where ((`testdb`.`t2`.`a2` = `testdb`.`t1`.`a1`) and (`testdb`.`t3`.`a3` = `testdb`.`t1`.`a1`)) limit 1 |</div><div class="line">+-------+------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">可以看到这个语句中的t2表仅仅作为连接条件，查询目标列没有t2的列，它属于多余的对象，但是优化器依然去连接它。</div><div class="line">我们实际工作中可以人工去掉t2表，改写为：</div><div class="line">root@testdb 03:47:40&gt;select t1.*,t3.* from t1 join t3 on (a1=a3) limit 1;</div><div class="line">+----+------+----+------+</div><div class="line">| a1 | b1   | a3 | b3   |</div><div class="line">+----+------+----+------+</div><div class="line">|  1 | 1    |  1 |    1 |</div><div class="line">+----+------+----+------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>语句2：可去除的表，除了作为连接对象外，不出现在任何子句中比如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 03:48:00&gt;select max(b1) from t1,t2;</div><div class="line">+---------+</div><div class="line">| max(b1) |</div><div class="line">+---------+</div><div class="line">| 9999    |</div><div class="line">+---------+</div><div class="line">1 row in set (2.74 sec)</div><div class="line">可以去掉t2：</div><div class="line">root@testdb 03:54:56&gt;select max(b1) from t1;</div><div class="line">+---------+</div><div class="line">| max(b1) |</div><div class="line">+---------+</div><div class="line">| 9999    |</div><div class="line">+---------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">还有select a1 from t1,t2 group by a1可以改为select a1 from t1 group by a1等类似写法</div></pre></td></tr></table></figure></p>
<p><font color="#0099ff" size="4" face="微软雅黑">3、嵌套连接消除</font><br>连接存在多个层次，用括号标识连接的优先次序。嵌套连接消除，就是消除嵌套的连接层次，把多个层次的连接减少为较少层次的连接，尽量“扁平化”。<br>创建测试表及数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE TABLE B (b1 INT, b2 VARCHAR(9));</div><div class="line">CREATE TABLE A (a1 INT, a2 VARCHAR(9));</div><div class="line">CREATE TABLE C (c1 INT, c2 VARCHAR(9));</div><div class="line">INSERT INTO B VALUES(1, &apos;B1&apos;), (NULL, &apos;B2&apos;), (31, &apos;B31&apos;), (32, &apos;B32&apos;), (NULL, &apos;B4&apos;),(5, &apos;B5&apos;), (6, &apos;B6&apos;);</div><div class="line">INSERT INTO A VALUES(1, &apos;A1&apos;), (null, &apos;A2&apos;), (NULL, &apos;A31&apos;), (32, &apos;A32&apos;), (4, &apos;A4&apos;), (5, &apos;A5&apos;), (NULL, &apos;A6&apos;);</div><div class="line">INSERT INTO C VALUES(1, &apos;C1&apos;), (NULL, &apos;C2&apos;), (31, &apos;C31&apos;), (NULL, &apos;C32&apos;), (4, &apos;C4&apos;), (NULL, &apos;C5&apos;),(6, &apos;A6&apos;);</div></pre></td></tr></table></figure></p>
<p>语句示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">root@testdb 04:17:29&gt;EXPLAIN EXTENDED SELECT * FROM A JOIN (B JOIN C ON B.b1=C.c1) ON A.a1=B.b1 </div><div class="line">    -&gt; WHERE A.a1 &gt; 1;</div><div class="line">+----+-------------+-------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</div><div class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |</div><div class="line">+----+-------------+-------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</div><div class="line">|  1 | SIMPLE      | A     | ALL  | NULL          | NULL | NULL    | NULL |    7 |   100.00 | Using where                                        |</div><div class="line">|  1 | SIMPLE      | B     | ALL  | NULL          | NULL | NULL    | NULL |    7 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</div><div class="line">|  1 | SIMPLE      | C     | ALL  | NULL          | NULL | NULL    | NULL |    7 |   100.00 | Using where; Using join buffer (Block Nested Loop) |</div><div class="line">+----+-------------+-------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+</div><div class="line">3 rows in set, 1 warning (0.00 sec)</div><div class="line"></div><div class="line">root@testdb 04:18:20&gt;show warnings;</div><div class="line">+-------+------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Level | Code | Message                                                                                                                                                                                                                                                                                                                                                         |</div><div class="line">+-------+------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">| Note  | 1003 | /* select#1 */ select `testdb`.`a`.`a1` AS `a1`,`testdb`.`a`.`a2` AS `a2`,`testdb`.`b`.`b1` AS `b1`,`testdb`.`b`.`b2` AS `b2`,`testdb`.`c`.`c1` AS `c1`,`testdb`.`c`.`c2` AS `c2` from `testdb`.`a` join `testdb`.`b` join `testdb`.`c` where ((`testdb`.`b`.`b1` = `testdb`.`a`.`a1`) and (`testdb`.`c`.`c1` = `testdb`.`a`.`a1`) and (`testdb`.`a`.`a1` &gt; 1)) |</div><div class="line">+-------+------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line">从该SQL语义上看，是希望先执行B和C连接，然后再和A连接。但是执行计划上看到连接顺序依次是先A和B再和C，说明mysql优化器是支持对嵌套连接的消除的。</div></pre></td></tr></table></figure></p>
<p>针对三种连接技术做个简单的总结：</p>
<ul>
<li>连接消除是去掉被连接的某个对象。</li>
<li>外连接消除是去掉外连接的语义使其变为内连接。</li>
<li>嵌套连接消除是一种连接的语义顺序的变化。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL查询优化技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://riverdba.github.io/2017/03/21/hello-world/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>从这里开始，快速开启博客之旅！<a id="more"></a></excerpt></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</the></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div><div class="line">简写命令：hexo n <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>新建一篇博文，新建的md文件位于：hexo当前目录/source/_posts中。<br>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div><div class="line">简写命令：hexo s</div></pre></td></tr></table></figure>
<p>这个命令是开启本地hexo服务用的，可以访问<a href="http://localhost:4000/进行本地预览。" target="_blank" rel="external">http://localhost:4000/进行本地预览。</a><br>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">简写命令：hexo g</div></pre></td></tr></table></figure>
<p>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 件夹，将所有的md文件编译成html文件 。<br>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div><div class="line">简写命令：hexo d</div></pre></td></tr></table></figure>
<p>执行这个命令可以将博客部署到git。<br>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h3 id="清除-public"><a href="#清除-public" class="headerlink" title="清除 public"></a>清除 public</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure>
<p>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。 </p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1、当执行hexo d部署博客时遇到被hang住没反应的时候，按Crtl + C退出然后执行：hexo clean再执行：hexo d -g即可！</div><div class="line">2、hexo d -g组合命令代表先执行hexo g再执行hexo d</div></pre></td></tr></table></figure>
<h3 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1、分段： 两个回车</div><div class="line">2、换行 两个空格 + 回车</div><div class="line">3、标题 # ~ ###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</div><div class="line">4、引用 &gt;</div><div class="line">5、列表 * ， + ， - ， 1. ，选其中之一，注意后面有个空格</div><div class="line">6、代码区块 四个空格 开头</div><div class="line">7、链接 [文字](链接地址)</div><div class="line">8、图片 ![图片说明](图片地址) ，图片地址可以是本地路径，也可以是网络地址</div><div class="line">9、强调 **文字** ， __文字__ ， _文字_ ， *文字*</div><div class="line">10、代码 ```，```</div></pre></td></tr></table></figure>
<p>More info: <a href="http://www.kancloud.cn/wizardforcel/markdown-simple-world/97373" target="_blank" rel="external">Markdown更多语法</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo Quick Start </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
